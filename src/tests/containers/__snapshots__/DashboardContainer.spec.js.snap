// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App component redirects the user to the admin page if they're an admin 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Dashboard
    authenticated={true}
    common={
      Object {
        "loading": false,
      }
    }
    getRequests={
      [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    hideModal={[MockFunction]}
    history={
      Object {
        "push": [Function],
      }
    }
    requests={
      Object {
        "message": "You have no requests",
        "requests": Array [
          Object {
            "detail": "it's stuck in a boot loop",
            "id": 1,
            "item": "Macbook Pro",
            "model": "2015",
            "owner": "josephodina@gmail.com",
            "type": "repair",
          },
          Object {
            "detail": "it's stuck in a boot loop",
            "id": 2,
            "item": "Macbook Pro",
            "model": "2015",
            "owner": "josephodina@gmail.com",
            "type": "maintenance",
          },
        ],
      }
    }
    showModal={[MockFunction]}
    user={
      Object {
        "email": "josephodina@gmail.com",
        "firstName": "Chukwuka",
        "lastName": "Odina",
        "role": "admin",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Modal
          handleClose={[Function]}
          show={false}
        >
          <Connect(RequestForm)
            handleClose={[Function]}
          />
        </Modal>,
        <Connect(Navbar)
          profileIconVisibility=""
        />,
        <div
          className="body"
          style={
            Object {
              "backgroundImage": "url(null)",
            }
          }
        >
          <div
            className="wrapper"
          >
            <div
              className="left white"
            >
              <span
                id="username"
              >
                Welcome, 
                Chukwuka
              </span>
            </div>
            <div
              className="right white"
              id="table-sort"
            >
              <span
                id="sort-group"
              >
                <span>
                  Sort by: 
                </span>
                <span>
                  <select
                    className="dropdown"
                    id="request-status-dropdown"
                  >
                    <option
                      value="all"
                    >
                      All
                    </option>
                    <option
                      value="pending"
                    >
                      In-Review
                    </option>
                    <option
                      value="approved"
                    >
                      Pending
                    </option>
                    <option
                      value="ongoing"
                    >
                      Disapproved
                    </option>
                    <option
                      value="resolved"
                    >
                      Resolved
                    </option>
                  </select>
                </span>
                 
              </span>
            </div>
            <br />
            <br />
            <RequestTable
              requests={
                Object {
                  "message": "You have no requests",
                  "requests": Array [
                    Object {
                      "detail": "it's stuck in a boot loop",
                      "id": 1,
                      "item": "Macbook Pro",
                      "model": "2015",
                      "owner": "josephodina@gmail.com",
                      "type": "repair",
                    },
                    Object {
                      "detail": "it's stuck in a boot loop",
                      "id": 2,
                      "item": "Macbook Pro",
                      "model": "2015",
                      "owner": "josephodina@gmail.com",
                      "type": "maintenance",
                    },
                  ],
                }
              }
            />
            <span
              className="table-nav right hidden"
            >
              <Input
                className="button"
                id=""
                isRequired=""
                type="button"
                value="<"
              />
              <Input
                className="button"
                id=""
                isRequired=""
                type="button"
                value=">"
              />
            </span>
          </div>
          <br />
          <div
            className="divider"
          />
        </div>,
        false,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Connect(RequestForm)
            handleClose={[Function]}
          />,
          "handleClose": [Function],
          "show": false,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "handleClose": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "profileIconVisibility": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="wrapper"
            >
              <div
                className="left white"
              >
                <span
                  id="username"
                >
                  Welcome, 
                  Chukwuka
                </span>
              </div>
              <div
                className="right white"
                id="table-sort"
              >
                <span
                  id="sort-group"
                >
                  <span>
                    Sort by: 
                  </span>
                  <span>
                    <select
                      className="dropdown"
                      id="request-status-dropdown"
                    >
                      <option
                        value="all"
                      >
                        All
                      </option>
                      <option
                        value="pending"
                      >
                        In-Review
                      </option>
                      <option
                        value="approved"
                      >
                        Pending
                      </option>
                      <option
                        value="ongoing"
                      >
                        Disapproved
                      </option>
                      <option
                        value="resolved"
                      >
                        Resolved
                      </option>
                    </select>
                  </span>
                   
                </span>
              </div>
              <br />
              <br />
              <RequestTable
                requests={
                  Object {
                    "message": "You have no requests",
                    "requests": Array [
                      Object {
                        "detail": "it's stuck in a boot loop",
                        "id": 1,
                        "item": "Macbook Pro",
                        "model": "2015",
                        "owner": "josephodina@gmail.com",
                        "type": "repair",
                      },
                      Object {
                        "detail": "it's stuck in a boot loop",
                        "id": 2,
                        "item": "Macbook Pro",
                        "model": "2015",
                        "owner": "josephodina@gmail.com",
                        "type": "maintenance",
                      },
                    ],
                  }
                }
              />
              <span
                className="table-nav right hidden"
              >
                <Input
                  className="button"
                  id=""
                  isRequired=""
                  type="button"
                  value="<"
                />
                <Input
                  className="button"
                  id=""
                  isRequired=""
                  type="button"
                  value=">"
                />
              </span>
            </div>,
            <br />,
            <div
              className="divider"
            />,
          ],
          "className": "body",
          "style": Object {
            "backgroundImage": "url(null)",
          },
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="left white"
                >
                  <span
                    id="username"
                  >
                    Welcome, 
                    Chukwuka
                  </span>
                </div>,
                <div
                  className="right white"
                  id="table-sort"
                >
                  <span
                    id="sort-group"
                  >
                    <span>
                      Sort by: 
                    </span>
                    <span>
                      <select
                        className="dropdown"
                        id="request-status-dropdown"
                      >
                        <option
                          value="all"
                        >
                          All
                        </option>
                        <option
                          value="pending"
                        >
                          In-Review
                        </option>
                        <option
                          value="approved"
                        >
                          Pending
                        </option>
                        <option
                          value="ongoing"
                        >
                          Disapproved
                        </option>
                        <option
                          value="resolved"
                        >
                          Resolved
                        </option>
                      </select>
                    </span>
                     
                  </span>
                </div>,
                <br />,
                <br />,
                <RequestTable
                  requests={
                    Object {
                      "message": "You have no requests",
                      "requests": Array [
                        Object {
                          "detail": "it's stuck in a boot loop",
                          "id": 1,
                          "item": "Macbook Pro",
                          "model": "2015",
                          "owner": "josephodina@gmail.com",
                          "type": "repair",
                        },
                        Object {
                          "detail": "it's stuck in a boot loop",
                          "id": 2,
                          "item": "Macbook Pro",
                          "model": "2015",
                          "owner": "josephodina@gmail.com",
                          "type": "maintenance",
                        },
                      ],
                    }
                  }
                />,
                <span
                  className="table-nav right hidden"
                >
                  <Input
                    className="button"
                    id=""
                    isRequired=""
                    type="button"
                    value="<"
                  />
                  <Input
                    className="button"
                    id=""
                    isRequired=""
                    type="button"
                    value=">"
                  />
                </span>,
              ],
              "className": "wrapper",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <span
                    id="username"
                  >
                    Welcome, 
                    Chukwuka
                  </span>,
                  "className": "left white",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Welcome, ",
                      "Chukwuka",
                    ],
                    "id": "username",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Welcome, ",
                    "Chukwuka",
                  ],
                  "type": "span",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <span
                      id="sort-group"
                    >
                      <span>
                        Sort by: 
                      </span>
                      <span>
                        <select
                          className="dropdown"
                          id="request-status-dropdown"
                        >
                          <option
                            value="all"
                          >
                            All
                          </option>
                          <option
                            value="pending"
                          >
                            In-Review
                          </option>
                          <option
                            value="approved"
                          >
                            Pending
                          </option>
                          <option
                            value="ongoing"
                          >
                            Disapproved
                          </option>
                          <option
                            value="resolved"
                          >
                            Resolved
                          </option>
                        </select>
                      </span>
                       
                    </span>,
                    false,
                  ],
                  "className": "right white",
                  "id": "table-sort",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <span>
                          Sort by: 
                        </span>,
                        <span>
                          <select
                            className="dropdown"
                            id="request-status-dropdown"
                          >
                            <option
                              value="all"
                            >
                              All
                            </option>
                            <option
                              value="pending"
                            >
                              In-Review
                            </option>
                            <option
                              value="approved"
                            >
                              Pending
                            </option>
                            <option
                              value="ongoing"
                            >
                              Disapproved
                            </option>
                            <option
                              value="resolved"
                            >
                              Resolved
                            </option>
                          </select>
                        </span>,
                        " ",
                      ],
                      "id": "sort-group",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Sort by: ",
                        },
                        "ref": null,
                        "rendered": "Sort by: ",
                        "type": "span",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": <select
                            className="dropdown"
                            id="request-status-dropdown"
                          >
                            <option
                              value="all"
                            >
                              All
                            </option>
                            <option
                              value="pending"
                            >
                              In-Review
                            </option>
                            <option
                              value="approved"
                            >
                              Pending
                            </option>
                            <option
                              value="ongoing"
                            >
                              Disapproved
                            </option>
                            <option
                              value="resolved"
                            >
                              Resolved
                            </option>
                          </select>,
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": Array [
                              <option
                                value="all"
                              >
                                All
                              </option>,
                              <option
                                value="pending"
                              >
                                In-Review
                              </option>,
                              <option
                                value="approved"
                              >
                                Pending
                              </option>,
                              <option
                                value="ongoing"
                              >
                                Disapproved
                              </option>,
                              <option
                                value="resolved"
                              >
                                Resolved
                              </option>,
                            ],
                            "className": "dropdown",
                            "id": "request-status-dropdown",
                          },
                          "ref": null,
                          "rendered": Array [
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "All",
                                "value": "all",
                              },
                              "ref": null,
                              "rendered": "All",
                              "type": "option",
                            },
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "In-Review",
                                "value": "pending",
                              },
                              "ref": null,
                              "rendered": "In-Review",
                              "type": "option",
                            },
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "Pending",
                                "value": "approved",
                              },
                              "ref": null,
                              "rendered": "Pending",
                              "type": "option",
                            },
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "Disapproved",
                                "value": "ongoing",
                              },
                              "ref": null,
                              "rendered": "Disapproved",
                              "type": "option",
                            },
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "Resolved",
                                "value": "resolved",
                              },
                              "ref": null,
                              "rendered": "Resolved",
                              "type": "option",
                            },
                          ],
                          "type": "select",
                        },
                        "type": "span",
                      },
                      " ",
                    ],
                    "type": "span",
                  },
                  false,
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "message": undefined,
                  "requests": Object {
                    "message": "You have no requests",
                    "requests": Array [
                      Object {
                        "detail": "it's stuck in a boot loop",
                        "id": 1,
                        "item": "Macbook Pro",
                        "model": "2015",
                        "owner": "josephodina@gmail.com",
                        "type": "repair",
                      },
                      Object {
                        "detail": "it's stuck in a boot loop",
                        "id": 2,
                        "item": "Macbook Pro",
                        "model": "2015",
                        "owner": "josephodina@gmail.com",
                        "type": "maintenance",
                      },
                    ],
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <Input
                      className="button"
                      id=""
                      isRequired=""
                      type="button"
                      value="<"
                    />,
                    <Input
                      className="button"
                      id=""
                      isRequired=""
                      type="button"
                      value=">"
                    />,
                  ],
                  "className": "table-nav right hidden",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "className": "button",
                      "handleChange": undefined,
                      "handleClick": undefined,
                      "id": "",
                      "isRequired": "",
                      "label": undefined,
                      "name": undefined,
                      "type": "button",
                      "value": "<",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "className": "button",
                      "handleChange": undefined,
                      "handleClick": undefined,
                      "id": "",
                      "isRequired": "",
                      "label": undefined,
                      "name": undefined,
                      "type": "button",
                      "value": ">",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": "span",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "divider",
            },
            "ref": null,
            "rendered": null,
            "type": "div",
          },
        ],
        "type": "div",
      },
      false,
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Modal
            handleClose={[Function]}
            show={false}
          >
            <Connect(RequestForm)
              handleClose={[Function]}
            />
          </Modal>,
          <Connect(Navbar)
            profileIconVisibility=""
          />,
          <div
            className="body"
            style={
              Object {
                "backgroundImage": "url(null)",
              }
            }
          >
            <div
              className="wrapper"
            >
              <div
                className="left white"
              >
                <span
                  id="username"
                >
                  Welcome, 
                  Chukwuka
                </span>
              </div>
              <div
                className="right white"
                id="table-sort"
              >
                <span
                  id="sort-group"
                >
                  <span>
                    Sort by: 
                  </span>
                  <span>
                    <select
                      className="dropdown"
                      id="request-status-dropdown"
                    >
                      <option
                        value="all"
                      >
                        All
                      </option>
                      <option
                        value="pending"
                      >
                        In-Review
                      </option>
                      <option
                        value="approved"
                      >
                        Pending
                      </option>
                      <option
                        value="ongoing"
                      >
                        Disapproved
                      </option>
                      <option
                        value="resolved"
                      >
                        Resolved
                      </option>
                    </select>
                  </span>
                   
                </span>
              </div>
              <br />
              <br />
              <RequestTable
                requests={
                  Object {
                    "message": "You have no requests",
                    "requests": Array [
                      Object {
                        "detail": "it's stuck in a boot loop",
                        "id": 1,
                        "item": "Macbook Pro",
                        "model": "2015",
                        "owner": "josephodina@gmail.com",
                        "type": "repair",
                      },
                      Object {
                        "detail": "it's stuck in a boot loop",
                        "id": 2,
                        "item": "Macbook Pro",
                        "model": "2015",
                        "owner": "josephodina@gmail.com",
                        "type": "maintenance",
                      },
                    ],
                  }
                }
              />
              <span
                className="table-nav right hidden"
              >
                <Input
                  className="button"
                  id=""
                  isRequired=""
                  type="button"
                  value="<"
                />
                <Input
                  className="button"
                  id=""
                  isRequired=""
                  type="button"
                  value=">"
                />
              </span>
            </div>
            <br />
            <div
              className="divider"
            />
          </div>,
          false,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Connect(RequestForm)
              handleClose={[Function]}
            />,
            "handleClose": [Function],
            "show": false,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "handleClose": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "profileIconVisibility": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="wrapper"
              >
                <div
                  className="left white"
                >
                  <span
                    id="username"
                  >
                    Welcome, 
                    Chukwuka
                  </span>
                </div>
                <div
                  className="right white"
                  id="table-sort"
                >
                  <span
                    id="sort-group"
                  >
                    <span>
                      Sort by: 
                    </span>
                    <span>
                      <select
                        className="dropdown"
                        id="request-status-dropdown"
                      >
                        <option
                          value="all"
                        >
                          All
                        </option>
                        <option
                          value="pending"
                        >
                          In-Review
                        </option>
                        <option
                          value="approved"
                        >
                          Pending
                        </option>
                        <option
                          value="ongoing"
                        >
                          Disapproved
                        </option>
                        <option
                          value="resolved"
                        >
                          Resolved
                        </option>
                      </select>
                    </span>
                     
                  </span>
                </div>
                <br />
                <br />
                <RequestTable
                  requests={
                    Object {
                      "message": "You have no requests",
                      "requests": Array [
                        Object {
                          "detail": "it's stuck in a boot loop",
                          "id": 1,
                          "item": "Macbook Pro",
                          "model": "2015",
                          "owner": "josephodina@gmail.com",
                          "type": "repair",
                        },
                        Object {
                          "detail": "it's stuck in a boot loop",
                          "id": 2,
                          "item": "Macbook Pro",
                          "model": "2015",
                          "owner": "josephodina@gmail.com",
                          "type": "maintenance",
                        },
                      ],
                    }
                  }
                />
                <span
                  className="table-nav right hidden"
                >
                  <Input
                    className="button"
                    id=""
                    isRequired=""
                    type="button"
                    value="<"
                  />
                  <Input
                    className="button"
                    id=""
                    isRequired=""
                    type="button"
                    value=">"
                  />
                </span>
              </div>,
              <br />,
              <div
                className="divider"
              />,
            ],
            "className": "body",
            "style": Object {
              "backgroundImage": "url(null)",
            },
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="left white"
                  >
                    <span
                      id="username"
                    >
                      Welcome, 
                      Chukwuka
                    </span>
                  </div>,
                  <div
                    className="right white"
                    id="table-sort"
                  >
                    <span
                      id="sort-group"
                    >
                      <span>
                        Sort by: 
                      </span>
                      <span>
                        <select
                          className="dropdown"
                          id="request-status-dropdown"
                        >
                          <option
                            value="all"
                          >
                            All
                          </option>
                          <option
                            value="pending"
                          >
                            In-Review
                          </option>
                          <option
                            value="approved"
                          >
                            Pending
                          </option>
                          <option
                            value="ongoing"
                          >
                            Disapproved
                          </option>
                          <option
                            value="resolved"
                          >
                            Resolved
                          </option>
                        </select>
                      </span>
                       
                    </span>
                  </div>,
                  <br />,
                  <br />,
                  <RequestTable
                    requests={
                      Object {
                        "message": "You have no requests",
                        "requests": Array [
                          Object {
                            "detail": "it's stuck in a boot loop",
                            "id": 1,
                            "item": "Macbook Pro",
                            "model": "2015",
                            "owner": "josephodina@gmail.com",
                            "type": "repair",
                          },
                          Object {
                            "detail": "it's stuck in a boot loop",
                            "id": 2,
                            "item": "Macbook Pro",
                            "model": "2015",
                            "owner": "josephodina@gmail.com",
                            "type": "maintenance",
                          },
                        ],
                      }
                    }
                  />,
                  <span
                    className="table-nav right hidden"
                  >
                    <Input
                      className="button"
                      id=""
                      isRequired=""
                      type="button"
                      value="<"
                    />
                    <Input
                      className="button"
                      id=""
                      isRequired=""
                      type="button"
                      value=">"
                    />
                  </span>,
                ],
                "className": "wrapper",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <span
                      id="username"
                    >
                      Welcome, 
                      Chukwuka
                    </span>,
                    "className": "left white",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Welcome, ",
                        "Chukwuka",
                      ],
                      "id": "username",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Welcome, ",
                      "Chukwuka",
                    ],
                    "type": "span",
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <span
                        id="sort-group"
                      >
                        <span>
                          Sort by: 
                        </span>
                        <span>
                          <select
                            className="dropdown"
                            id="request-status-dropdown"
                          >
                            <option
                              value="all"
                            >
                              All
                            </option>
                            <option
                              value="pending"
                            >
                              In-Review
                            </option>
                            <option
                              value="approved"
                            >
                              Pending
                            </option>
                            <option
                              value="ongoing"
                            >
                              Disapproved
                            </option>
                            <option
                              value="resolved"
                            >
                              Resolved
                            </option>
                          </select>
                        </span>
                         
                      </span>,
                      false,
                    ],
                    "className": "right white",
                    "id": "table-sort",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <span>
                            Sort by: 
                          </span>,
                          <span>
                            <select
                              className="dropdown"
                              id="request-status-dropdown"
                            >
                              <option
                                value="all"
                              >
                                All
                              </option>
                              <option
                                value="pending"
                              >
                                In-Review
                              </option>
                              <option
                                value="approved"
                              >
                                Pending
                              </option>
                              <option
                                value="ongoing"
                              >
                                Disapproved
                              </option>
                              <option
                                value="resolved"
                              >
                                Resolved
                              </option>
                            </select>
                          </span>,
                          " ",
                        ],
                        "id": "sort-group",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": "Sort by: ",
                          },
                          "ref": null,
                          "rendered": "Sort by: ",
                          "type": "span",
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": <select
                              className="dropdown"
                              id="request-status-dropdown"
                            >
                              <option
                                value="all"
                              >
                                All
                              </option>
                              <option
                                value="pending"
                              >
                                In-Review
                              </option>
                              <option
                                value="approved"
                              >
                                Pending
                              </option>
                              <option
                                value="ongoing"
                              >
                                Disapproved
                              </option>
                              <option
                                value="resolved"
                              >
                                Resolved
                              </option>
                            </select>,
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": Array [
                                <option
                                  value="all"
                                >
                                  All
                                </option>,
                                <option
                                  value="pending"
                                >
                                  In-Review
                                </option>,
                                <option
                                  value="approved"
                                >
                                  Pending
                                </option>,
                                <option
                                  value="ongoing"
                                >
                                  Disapproved
                                </option>,
                                <option
                                  value="resolved"
                                >
                                  Resolved
                                </option>,
                              ],
                              "className": "dropdown",
                              "id": "request-status-dropdown",
                            },
                            "ref": null,
                            "rendered": Array [
                              Object {
                                "instance": null,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": "All",
                                  "value": "all",
                                },
                                "ref": null,
                                "rendered": "All",
                                "type": "option",
                              },
                              Object {
                                "instance": null,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": "In-Review",
                                  "value": "pending",
                                },
                                "ref": null,
                                "rendered": "In-Review",
                                "type": "option",
                              },
                              Object {
                                "instance": null,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": "Pending",
                                  "value": "approved",
                                },
                                "ref": null,
                                "rendered": "Pending",
                                "type": "option",
                              },
                              Object {
                                "instance": null,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": "Disapproved",
                                  "value": "ongoing",
                                },
                                "ref": null,
                                "rendered": "Disapproved",
                                "type": "option",
                              },
                              Object {
                                "instance": null,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": "Resolved",
                                  "value": "resolved",
                                },
                                "ref": null,
                                "rendered": "Resolved",
                                "type": "option",
                              },
                            ],
                            "type": "select",
                          },
                          "type": "span",
                        },
                        " ",
                      ],
                      "type": "span",
                    },
                    false,
                  ],
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "message": undefined,
                    "requests": Object {
                      "message": "You have no requests",
                      "requests": Array [
                        Object {
                          "detail": "it's stuck in a boot loop",
                          "id": 1,
                          "item": "Macbook Pro",
                          "model": "2015",
                          "owner": "josephodina@gmail.com",
                          "type": "repair",
                        },
                        Object {
                          "detail": "it's stuck in a boot loop",
                          "id": 2,
                          "item": "Macbook Pro",
                          "model": "2015",
                          "owner": "josephodina@gmail.com",
                          "type": "maintenance",
                        },
                      ],
                    },
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <Input
                        className="button"
                        id=""
                        isRequired=""
                        type="button"
                        value="<"
                      />,
                      <Input
                        className="button"
                        id=""
                        isRequired=""
                        type="button"
                        value=">"
                      />,
                    ],
                    "className": "table-nav right hidden",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "className": "button",
                        "handleChange": undefined,
                        "handleClick": undefined,
                        "id": "",
                        "isRequired": "",
                        "label": undefined,
                        "name": undefined,
                        "type": "button",
                        "value": "<",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "className": "button",
                        "handleChange": undefined,
                        "handleClick": undefined,
                        "id": "",
                        "isRequired": "",
                        "label": undefined,
                        "name": undefined,
                        "type": "button",
                        "value": ">",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": "span",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "divider",
              },
              "ref": null,
              "rendered": null,
              "type": "div",
            },
          ],
          "type": "div",
        },
        false,
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`App component renders a message instead of the table when there are no requests 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Dashboard
    authenticated={true}
    common={
      Object {
        "loading": false,
      }
    }
    getRequests={
      [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    hideModal={[MockFunction]}
    history={
      Object {
        "push": [Function],
      }
    }
    requests={Array []}
    showModal={[MockFunction]}
    user={
      Object {
        "email": "josephodina@gmail.com",
        "firstName": "Chukwuka",
        "lastName": "Odina",
        "role": "user",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Modal
          handleClose={[Function]}
          show={false}
        >
          <Connect(RequestForm)
            handleClose={[Function]}
          />
        </Modal>,
        <Connect(Navbar)
          profileIconVisibility=""
        />,
        <div
          className="body"
          style={
            Object {
              "backgroundImage": "url(null)",
            }
          }
        >
          <div
            className="wrapper"
          >
            <div
              className="left white"
            >
              <span
                id="username"
              >
                Welcome, 
                Chukwuka
              </span>
            </div>
            <div
              className="right white"
              id="table-sort"
            >
              <span
                id="sort-group"
              >
                <span>
                  Sort by: 
                </span>
                <span>
                  <select
                    className="dropdown"
                    id="request-status-dropdown"
                  >
                    <option
                      value="all"
                    >
                      All
                    </option>
                    <option
                      value="pending"
                    >
                      In-Review
                    </option>
                    <option
                      value="approved"
                    >
                      Pending
                    </option>
                    <option
                      value="ongoing"
                    >
                      Disapproved
                    </option>
                    <option
                      value="resolved"
                    >
                      Resolved
                    </option>
                  </select>
                </span>
                 
              </span>
              <span>
                <Input
                  className="button"
                  handleClick={[Function]}
                  id="new-request-btn"
                  isRequired=""
                  name="new-request"
                  type="button"
                  value="New Request"
                />
              </span>
            </div>
            <br />
            <br />
            <RequestTable
              requests={Array []}
            />
            <span
              className="table-nav right hidden"
            >
              <Input
                className="button"
                id=""
                isRequired=""
                type="button"
                value="<"
              />
              <Input
                className="button"
                id=""
                isRequired=""
                type="button"
                value=">"
              />
            </span>
          </div>
          <br />
          <div
            className="divider"
          />
        </div>,
        false,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Connect(RequestForm)
            handleClose={[Function]}
          />,
          "handleClose": [Function],
          "show": false,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "handleClose": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "profileIconVisibility": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="wrapper"
            >
              <div
                className="left white"
              >
                <span
                  id="username"
                >
                  Welcome, 
                  Chukwuka
                </span>
              </div>
              <div
                className="right white"
                id="table-sort"
              >
                <span
                  id="sort-group"
                >
                  <span>
                    Sort by: 
                  </span>
                  <span>
                    <select
                      className="dropdown"
                      id="request-status-dropdown"
                    >
                      <option
                        value="all"
                      >
                        All
                      </option>
                      <option
                        value="pending"
                      >
                        In-Review
                      </option>
                      <option
                        value="approved"
                      >
                        Pending
                      </option>
                      <option
                        value="ongoing"
                      >
                        Disapproved
                      </option>
                      <option
                        value="resolved"
                      >
                        Resolved
                      </option>
                    </select>
                  </span>
                   
                </span>
                <span>
                  <Input
                    className="button"
                    handleClick={[Function]}
                    id="new-request-btn"
                    isRequired=""
                    name="new-request"
                    type="button"
                    value="New Request"
                  />
                </span>
              </div>
              <br />
              <br />
              <RequestTable
                requests={Array []}
              />
              <span
                className="table-nav right hidden"
              >
                <Input
                  className="button"
                  id=""
                  isRequired=""
                  type="button"
                  value="<"
                />
                <Input
                  className="button"
                  id=""
                  isRequired=""
                  type="button"
                  value=">"
                />
              </span>
            </div>,
            <br />,
            <div
              className="divider"
            />,
          ],
          "className": "body",
          "style": Object {
            "backgroundImage": "url(null)",
          },
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="left white"
                >
                  <span
                    id="username"
                  >
                    Welcome, 
                    Chukwuka
                  </span>
                </div>,
                <div
                  className="right white"
                  id="table-sort"
                >
                  <span
                    id="sort-group"
                  >
                    <span>
                      Sort by: 
                    </span>
                    <span>
                      <select
                        className="dropdown"
                        id="request-status-dropdown"
                      >
                        <option
                          value="all"
                        >
                          All
                        </option>
                        <option
                          value="pending"
                        >
                          In-Review
                        </option>
                        <option
                          value="approved"
                        >
                          Pending
                        </option>
                        <option
                          value="ongoing"
                        >
                          Disapproved
                        </option>
                        <option
                          value="resolved"
                        >
                          Resolved
                        </option>
                      </select>
                    </span>
                     
                  </span>
                  <span>
                    <Input
                      className="button"
                      handleClick={[Function]}
                      id="new-request-btn"
                      isRequired=""
                      name="new-request"
                      type="button"
                      value="New Request"
                    />
                  </span>
                </div>,
                <br />,
                <br />,
                <RequestTable
                  requests={Array []}
                />,
                <span
                  className="table-nav right hidden"
                >
                  <Input
                    className="button"
                    id=""
                    isRequired=""
                    type="button"
                    value="<"
                  />
                  <Input
                    className="button"
                    id=""
                    isRequired=""
                    type="button"
                    value=">"
                  />
                </span>,
              ],
              "className": "wrapper",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <span
                    id="username"
                  >
                    Welcome, 
                    Chukwuka
                  </span>,
                  "className": "left white",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Welcome, ",
                      "Chukwuka",
                    ],
                    "id": "username",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Welcome, ",
                    "Chukwuka",
                  ],
                  "type": "span",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <span
                      id="sort-group"
                    >
                      <span>
                        Sort by: 
                      </span>
                      <span>
                        <select
                          className="dropdown"
                          id="request-status-dropdown"
                        >
                          <option
                            value="all"
                          >
                            All
                          </option>
                          <option
                            value="pending"
                          >
                            In-Review
                          </option>
                          <option
                            value="approved"
                          >
                            Pending
                          </option>
                          <option
                            value="ongoing"
                          >
                            Disapproved
                          </option>
                          <option
                            value="resolved"
                          >
                            Resolved
                          </option>
                        </select>
                      </span>
                       
                    </span>,
                    <span>
                      <Input
                        className="button"
                        handleClick={[Function]}
                        id="new-request-btn"
                        isRequired=""
                        name="new-request"
                        type="button"
                        value="New Request"
                      />
                    </span>,
                  ],
                  "className": "right white",
                  "id": "table-sort",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <span>
                          Sort by: 
                        </span>,
                        <span>
                          <select
                            className="dropdown"
                            id="request-status-dropdown"
                          >
                            <option
                              value="all"
                            >
                              All
                            </option>
                            <option
                              value="pending"
                            >
                              In-Review
                            </option>
                            <option
                              value="approved"
                            >
                              Pending
                            </option>
                            <option
                              value="ongoing"
                            >
                              Disapproved
                            </option>
                            <option
                              value="resolved"
                            >
                              Resolved
                            </option>
                          </select>
                        </span>,
                        " ",
                      ],
                      "id": "sort-group",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Sort by: ",
                        },
                        "ref": null,
                        "rendered": "Sort by: ",
                        "type": "span",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": <select
                            className="dropdown"
                            id="request-status-dropdown"
                          >
                            <option
                              value="all"
                            >
                              All
                            </option>
                            <option
                              value="pending"
                            >
                              In-Review
                            </option>
                            <option
                              value="approved"
                            >
                              Pending
                            </option>
                            <option
                              value="ongoing"
                            >
                              Disapproved
                            </option>
                            <option
                              value="resolved"
                            >
                              Resolved
                            </option>
                          </select>,
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": Array [
                              <option
                                value="all"
                              >
                                All
                              </option>,
                              <option
                                value="pending"
                              >
                                In-Review
                              </option>,
                              <option
                                value="approved"
                              >
                                Pending
                              </option>,
                              <option
                                value="ongoing"
                              >
                                Disapproved
                              </option>,
                              <option
                                value="resolved"
                              >
                                Resolved
                              </option>,
                            ],
                            "className": "dropdown",
                            "id": "request-status-dropdown",
                          },
                          "ref": null,
                          "rendered": Array [
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "All",
                                "value": "all",
                              },
                              "ref": null,
                              "rendered": "All",
                              "type": "option",
                            },
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "In-Review",
                                "value": "pending",
                              },
                              "ref": null,
                              "rendered": "In-Review",
                              "type": "option",
                            },
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "Pending",
                                "value": "approved",
                              },
                              "ref": null,
                              "rendered": "Pending",
                              "type": "option",
                            },
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "Disapproved",
                                "value": "ongoing",
                              },
                              "ref": null,
                              "rendered": "Disapproved",
                              "type": "option",
                            },
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "Resolved",
                                "value": "resolved",
                              },
                              "ref": null,
                              "rendered": "Resolved",
                              "type": "option",
                            },
                          ],
                          "type": "select",
                        },
                        "type": "span",
                      },
                      " ",
                    ],
                    "type": "span",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <Input
                        className="button"
                        handleClick={[Function]}
                        id="new-request-btn"
                        isRequired=""
                        name="new-request"
                        type="button"
                        value="New Request"
                      />,
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "className": "button",
                        "handleChange": undefined,
                        "handleClick": [Function],
                        "id": "new-request-btn",
                        "isRequired": "",
                        "label": undefined,
                        "name": "new-request",
                        "type": "button",
                        "value": "New Request",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "span",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "message": undefined,
                  "requests": Array [],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <Input
                      className="button"
                      id=""
                      isRequired=""
                      type="button"
                      value="<"
                    />,
                    <Input
                      className="button"
                      id=""
                      isRequired=""
                      type="button"
                      value=">"
                    />,
                  ],
                  "className": "table-nav right hidden",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "className": "button",
                      "handleChange": undefined,
                      "handleClick": undefined,
                      "id": "",
                      "isRequired": "",
                      "label": undefined,
                      "name": undefined,
                      "type": "button",
                      "value": "<",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "className": "button",
                      "handleChange": undefined,
                      "handleClick": undefined,
                      "id": "",
                      "isRequired": "",
                      "label": undefined,
                      "name": undefined,
                      "type": "button",
                      "value": ">",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": "span",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "divider",
            },
            "ref": null,
            "rendered": null,
            "type": "div",
          },
        ],
        "type": "div",
      },
      false,
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Modal
            handleClose={[Function]}
            show={false}
          >
            <Connect(RequestForm)
              handleClose={[Function]}
            />
          </Modal>,
          <Connect(Navbar)
            profileIconVisibility=""
          />,
          <div
            className="body"
            style={
              Object {
                "backgroundImage": "url(null)",
              }
            }
          >
            <div
              className="wrapper"
            >
              <div
                className="left white"
              >
                <span
                  id="username"
                >
                  Welcome, 
                  Chukwuka
                </span>
              </div>
              <div
                className="right white"
                id="table-sort"
              >
                <span
                  id="sort-group"
                >
                  <span>
                    Sort by: 
                  </span>
                  <span>
                    <select
                      className="dropdown"
                      id="request-status-dropdown"
                    >
                      <option
                        value="all"
                      >
                        All
                      </option>
                      <option
                        value="pending"
                      >
                        In-Review
                      </option>
                      <option
                        value="approved"
                      >
                        Pending
                      </option>
                      <option
                        value="ongoing"
                      >
                        Disapproved
                      </option>
                      <option
                        value="resolved"
                      >
                        Resolved
                      </option>
                    </select>
                  </span>
                   
                </span>
                <span>
                  <Input
                    className="button"
                    handleClick={[Function]}
                    id="new-request-btn"
                    isRequired=""
                    name="new-request"
                    type="button"
                    value="New Request"
                  />
                </span>
              </div>
              <br />
              <br />
              <RequestTable
                requests={Array []}
              />
              <span
                className="table-nav right hidden"
              >
                <Input
                  className="button"
                  id=""
                  isRequired=""
                  type="button"
                  value="<"
                />
                <Input
                  className="button"
                  id=""
                  isRequired=""
                  type="button"
                  value=">"
                />
              </span>
            </div>
            <br />
            <div
              className="divider"
            />
          </div>,
          false,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Connect(RequestForm)
              handleClose={[Function]}
            />,
            "handleClose": [Function],
            "show": false,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "handleClose": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "profileIconVisibility": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="wrapper"
              >
                <div
                  className="left white"
                >
                  <span
                    id="username"
                  >
                    Welcome, 
                    Chukwuka
                  </span>
                </div>
                <div
                  className="right white"
                  id="table-sort"
                >
                  <span
                    id="sort-group"
                  >
                    <span>
                      Sort by: 
                    </span>
                    <span>
                      <select
                        className="dropdown"
                        id="request-status-dropdown"
                      >
                        <option
                          value="all"
                        >
                          All
                        </option>
                        <option
                          value="pending"
                        >
                          In-Review
                        </option>
                        <option
                          value="approved"
                        >
                          Pending
                        </option>
                        <option
                          value="ongoing"
                        >
                          Disapproved
                        </option>
                        <option
                          value="resolved"
                        >
                          Resolved
                        </option>
                      </select>
                    </span>
                     
                  </span>
                  <span>
                    <Input
                      className="button"
                      handleClick={[Function]}
                      id="new-request-btn"
                      isRequired=""
                      name="new-request"
                      type="button"
                      value="New Request"
                    />
                  </span>
                </div>
                <br />
                <br />
                <RequestTable
                  requests={Array []}
                />
                <span
                  className="table-nav right hidden"
                >
                  <Input
                    className="button"
                    id=""
                    isRequired=""
                    type="button"
                    value="<"
                  />
                  <Input
                    className="button"
                    id=""
                    isRequired=""
                    type="button"
                    value=">"
                  />
                </span>
              </div>,
              <br />,
              <div
                className="divider"
              />,
            ],
            "className": "body",
            "style": Object {
              "backgroundImage": "url(null)",
            },
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="left white"
                  >
                    <span
                      id="username"
                    >
                      Welcome, 
                      Chukwuka
                    </span>
                  </div>,
                  <div
                    className="right white"
                    id="table-sort"
                  >
                    <span
                      id="sort-group"
                    >
                      <span>
                        Sort by: 
                      </span>
                      <span>
                        <select
                          className="dropdown"
                          id="request-status-dropdown"
                        >
                          <option
                            value="all"
                          >
                            All
                          </option>
                          <option
                            value="pending"
                          >
                            In-Review
                          </option>
                          <option
                            value="approved"
                          >
                            Pending
                          </option>
                          <option
                            value="ongoing"
                          >
                            Disapproved
                          </option>
                          <option
                            value="resolved"
                          >
                            Resolved
                          </option>
                        </select>
                      </span>
                       
                    </span>
                    <span>
                      <Input
                        className="button"
                        handleClick={[Function]}
                        id="new-request-btn"
                        isRequired=""
                        name="new-request"
                        type="button"
                        value="New Request"
                      />
                    </span>
                  </div>,
                  <br />,
                  <br />,
                  <RequestTable
                    requests={Array []}
                  />,
                  <span
                    className="table-nav right hidden"
                  >
                    <Input
                      className="button"
                      id=""
                      isRequired=""
                      type="button"
                      value="<"
                    />
                    <Input
                      className="button"
                      id=""
                      isRequired=""
                      type="button"
                      value=">"
                    />
                  </span>,
                ],
                "className": "wrapper",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <span
                      id="username"
                    >
                      Welcome, 
                      Chukwuka
                    </span>,
                    "className": "left white",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Welcome, ",
                        "Chukwuka",
                      ],
                      "id": "username",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Welcome, ",
                      "Chukwuka",
                    ],
                    "type": "span",
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <span
                        id="sort-group"
                      >
                        <span>
                          Sort by: 
                        </span>
                        <span>
                          <select
                            className="dropdown"
                            id="request-status-dropdown"
                          >
                            <option
                              value="all"
                            >
                              All
                            </option>
                            <option
                              value="pending"
                            >
                              In-Review
                            </option>
                            <option
                              value="approved"
                            >
                              Pending
                            </option>
                            <option
                              value="ongoing"
                            >
                              Disapproved
                            </option>
                            <option
                              value="resolved"
                            >
                              Resolved
                            </option>
                          </select>
                        </span>
                         
                      </span>,
                      <span>
                        <Input
                          className="button"
                          handleClick={[Function]}
                          id="new-request-btn"
                          isRequired=""
                          name="new-request"
                          type="button"
                          value="New Request"
                        />
                      </span>,
                    ],
                    "className": "right white",
                    "id": "table-sort",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <span>
                            Sort by: 
                          </span>,
                          <span>
                            <select
                              className="dropdown"
                              id="request-status-dropdown"
                            >
                              <option
                                value="all"
                              >
                                All
                              </option>
                              <option
                                value="pending"
                              >
                                In-Review
                              </option>
                              <option
                                value="approved"
                              >
                                Pending
                              </option>
                              <option
                                value="ongoing"
                              >
                                Disapproved
                              </option>
                              <option
                                value="resolved"
                              >
                                Resolved
                              </option>
                            </select>
                          </span>,
                          " ",
                        ],
                        "id": "sort-group",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": "Sort by: ",
                          },
                          "ref": null,
                          "rendered": "Sort by: ",
                          "type": "span",
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": <select
                              className="dropdown"
                              id="request-status-dropdown"
                            >
                              <option
                                value="all"
                              >
                                All
                              </option>
                              <option
                                value="pending"
                              >
                                In-Review
                              </option>
                              <option
                                value="approved"
                              >
                                Pending
                              </option>
                              <option
                                value="ongoing"
                              >
                                Disapproved
                              </option>
                              <option
                                value="resolved"
                              >
                                Resolved
                              </option>
                            </select>,
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": Array [
                                <option
                                  value="all"
                                >
                                  All
                                </option>,
                                <option
                                  value="pending"
                                >
                                  In-Review
                                </option>,
                                <option
                                  value="approved"
                                >
                                  Pending
                                </option>,
                                <option
                                  value="ongoing"
                                >
                                  Disapproved
                                </option>,
                                <option
                                  value="resolved"
                                >
                                  Resolved
                                </option>,
                              ],
                              "className": "dropdown",
                              "id": "request-status-dropdown",
                            },
                            "ref": null,
                            "rendered": Array [
                              Object {
                                "instance": null,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": "All",
                                  "value": "all",
                                },
                                "ref": null,
                                "rendered": "All",
                                "type": "option",
                              },
                              Object {
                                "instance": null,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": "In-Review",
                                  "value": "pending",
                                },
                                "ref": null,
                                "rendered": "In-Review",
                                "type": "option",
                              },
                              Object {
                                "instance": null,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": "Pending",
                                  "value": "approved",
                                },
                                "ref": null,
                                "rendered": "Pending",
                                "type": "option",
                              },
                              Object {
                                "instance": null,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": "Disapproved",
                                  "value": "ongoing",
                                },
                                "ref": null,
                                "rendered": "Disapproved",
                                "type": "option",
                              },
                              Object {
                                "instance": null,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": "Resolved",
                                  "value": "resolved",
                                },
                                "ref": null,
                                "rendered": "Resolved",
                                "type": "option",
                              },
                            ],
                            "type": "select",
                          },
                          "type": "span",
                        },
                        " ",
                      ],
                      "type": "span",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <Input
                          className="button"
                          handleClick={[Function]}
                          id="new-request-btn"
                          isRequired=""
                          name="new-request"
                          type="button"
                          value="New Request"
                        />,
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "className": "button",
                          "handleChange": undefined,
                          "handleClick": [Function],
                          "id": "new-request-btn",
                          "isRequired": "",
                          "label": undefined,
                          "name": "new-request",
                          "type": "button",
                          "value": "New Request",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      "type": "span",
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "message": undefined,
                    "requests": Array [],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <Input
                        className="button"
                        id=""
                        isRequired=""
                        type="button"
                        value="<"
                      />,
                      <Input
                        className="button"
                        id=""
                        isRequired=""
                        type="button"
                        value=">"
                      />,
                    ],
                    "className": "table-nav right hidden",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "className": "button",
                        "handleChange": undefined,
                        "handleClick": undefined,
                        "id": "",
                        "isRequired": "",
                        "label": undefined,
                        "name": undefined,
                        "type": "button",
                        "value": "<",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "className": "button",
                        "handleChange": undefined,
                        "handleClick": undefined,
                        "id": "",
                        "isRequired": "",
                        "label": undefined,
                        "name": undefined,
                        "type": "button",
                        "value": ">",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": "span",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "divider",
              },
              "ref": null,
              "rendered": null,
              "type": "div",
            },
          ],
          "type": "div",
        },
        false,
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`App component renders the dashboard 1`] = `
<Fragment>
  <Modal
    handleClose={[Function]}
    show={false}
  >
    <Connect(RequestForm)
      handleClose={[Function]}
    />
  </Modal>
  <Connect(Navbar)
    profileIconVisibility=""
  />
  <div
    className="body"
    style={
      Object {
        "backgroundImage": "url(null)",
      }
    }
  >
    <div
      className="wrapper"
    >
      <div
        className="left white"
      >
        <span
          id="username"
        >
          Welcome, 
          Chukwuka
        </span>
      </div>
      <div
        className="right white"
        id="table-sort"
      >
        <span
          id="sort-group"
        >
          <span>
            Sort by: 
          </span>
          <span>
            <select
              className="dropdown"
              id="request-status-dropdown"
            >
              <option
                value="all"
              >
                All
              </option>
              <option
                value="pending"
              >
                In-Review
              </option>
              <option
                value="approved"
              >
                Pending
              </option>
              <option
                value="ongoing"
              >
                Disapproved
              </option>
              <option
                value="resolved"
              >
                Resolved
              </option>
            </select>
          </span>
           
        </span>
        <span>
          <Input
            className="button"
            handleClick={[Function]}
            id="new-request-btn"
            isRequired=""
            name="new-request"
            type="button"
            value="New Request"
          />
        </span>
      </div>
      <br />
      <br />
      <RequestTable
        requests={
          Object {
            "message": "You have no requests",
            "requests": Array [
              Object {
                "detail": "it's stuck in a boot loop",
                "id": 1,
                "item": "Macbook Pro",
                "model": "2015",
                "owner": "josephodina@gmail.com",
                "type": "repair",
              },
              Object {
                "detail": "it's stuck in a boot loop",
                "id": 2,
                "item": "Macbook Pro",
                "model": "2015",
                "owner": "josephodina@gmail.com",
                "type": "maintenance",
              },
            ],
          }
        }
      />
      <span
        className="table-nav right hidden"
      >
        <Input
          className="button"
          id=""
          isRequired=""
          type="button"
          value="<"
        />
        <Input
          className="button"
          id=""
          isRequired=""
          type="button"
          value=">"
        />
      </span>
    </div>
    <br />
    <div
      className="divider"
    />
  </div>
</Fragment>
`;

exports[`App component renders the requests table when there are requests 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Dashboard
    authenticated={true}
    common={
      Object {
        "loading": false,
      }
    }
    getRequests={
      [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    hideModal={[MockFunction]}
    history={
      Object {
        "push": [Function],
      }
    }
    requests={
      Object {
        "message": "You have no requests",
        "requests": Array [
          Object {
            "detail": "it's stuck in a boot loop",
            "id": 1,
            "item": "Macbook Pro",
            "model": "2015",
            "owner": "josephodina@gmail.com",
            "type": "repair",
          },
          Object {
            "detail": "it's stuck in a boot loop",
            "id": 2,
            "item": "Macbook Pro",
            "model": "2015",
            "owner": "josephodina@gmail.com",
            "type": "maintenance",
          },
        ],
      }
    }
    showModal={[MockFunction]}
    user={
      Object {
        "email": "josephodina@gmail.com",
        "firstName": "Chukwuka",
        "lastName": "Odina",
        "role": "user",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Modal
          handleClose={[Function]}
          show={false}
        >
          <Connect(RequestForm)
            handleClose={[Function]}
          />
        </Modal>,
        <Connect(Navbar)
          profileIconVisibility=""
        />,
        <div
          className="body"
          style={
            Object {
              "backgroundImage": "url(null)",
            }
          }
        >
          <div
            className="wrapper"
          >
            <div
              className="left white"
            >
              <span
                id="username"
              >
                Welcome, 
                Chukwuka
              </span>
            </div>
            <div
              className="right white"
              id="table-sort"
            >
              <span
                id="sort-group"
              >
                <span>
                  Sort by: 
                </span>
                <span>
                  <select
                    className="dropdown"
                    id="request-status-dropdown"
                  >
                    <option
                      value="all"
                    >
                      All
                    </option>
                    <option
                      value="pending"
                    >
                      In-Review
                    </option>
                    <option
                      value="approved"
                    >
                      Pending
                    </option>
                    <option
                      value="ongoing"
                    >
                      Disapproved
                    </option>
                    <option
                      value="resolved"
                    >
                      Resolved
                    </option>
                  </select>
                </span>
                 
              </span>
              <span>
                <Input
                  className="button"
                  handleClick={[Function]}
                  id="new-request-btn"
                  isRequired=""
                  name="new-request"
                  type="button"
                  value="New Request"
                />
              </span>
            </div>
            <br />
            <br />
            <RequestTable
              requests={
                Object {
                  "message": "You have no requests",
                  "requests": Array [
                    Object {
                      "detail": "it's stuck in a boot loop",
                      "id": 1,
                      "item": "Macbook Pro",
                      "model": "2015",
                      "owner": "josephodina@gmail.com",
                      "type": "repair",
                    },
                    Object {
                      "detail": "it's stuck in a boot loop",
                      "id": 2,
                      "item": "Macbook Pro",
                      "model": "2015",
                      "owner": "josephodina@gmail.com",
                      "type": "maintenance",
                    },
                  ],
                }
              }
            />
            <span
              className="table-nav right hidden"
            >
              <Input
                className="button"
                id=""
                isRequired=""
                type="button"
                value="<"
              />
              <Input
                className="button"
                id=""
                isRequired=""
                type="button"
                value=">"
              />
            </span>
          </div>
          <br />
          <div
            className="divider"
          />
        </div>,
        false,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Connect(RequestForm)
            handleClose={[Function]}
          />,
          "handleClose": [Function],
          "show": false,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "handleClose": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "profileIconVisibility": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="wrapper"
            >
              <div
                className="left white"
              >
                <span
                  id="username"
                >
                  Welcome, 
                  Chukwuka
                </span>
              </div>
              <div
                className="right white"
                id="table-sort"
              >
                <span
                  id="sort-group"
                >
                  <span>
                    Sort by: 
                  </span>
                  <span>
                    <select
                      className="dropdown"
                      id="request-status-dropdown"
                    >
                      <option
                        value="all"
                      >
                        All
                      </option>
                      <option
                        value="pending"
                      >
                        In-Review
                      </option>
                      <option
                        value="approved"
                      >
                        Pending
                      </option>
                      <option
                        value="ongoing"
                      >
                        Disapproved
                      </option>
                      <option
                        value="resolved"
                      >
                        Resolved
                      </option>
                    </select>
                  </span>
                   
                </span>
                <span>
                  <Input
                    className="button"
                    handleClick={[Function]}
                    id="new-request-btn"
                    isRequired=""
                    name="new-request"
                    type="button"
                    value="New Request"
                  />
                </span>
              </div>
              <br />
              <br />
              <RequestTable
                requests={
                  Object {
                    "message": "You have no requests",
                    "requests": Array [
                      Object {
                        "detail": "it's stuck in a boot loop",
                        "id": 1,
                        "item": "Macbook Pro",
                        "model": "2015",
                        "owner": "josephodina@gmail.com",
                        "type": "repair",
                      },
                      Object {
                        "detail": "it's stuck in a boot loop",
                        "id": 2,
                        "item": "Macbook Pro",
                        "model": "2015",
                        "owner": "josephodina@gmail.com",
                        "type": "maintenance",
                      },
                    ],
                  }
                }
              />
              <span
                className="table-nav right hidden"
              >
                <Input
                  className="button"
                  id=""
                  isRequired=""
                  type="button"
                  value="<"
                />
                <Input
                  className="button"
                  id=""
                  isRequired=""
                  type="button"
                  value=">"
                />
              </span>
            </div>,
            <br />,
            <div
              className="divider"
            />,
          ],
          "className": "body",
          "style": Object {
            "backgroundImage": "url(null)",
          },
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="left white"
                >
                  <span
                    id="username"
                  >
                    Welcome, 
                    Chukwuka
                  </span>
                </div>,
                <div
                  className="right white"
                  id="table-sort"
                >
                  <span
                    id="sort-group"
                  >
                    <span>
                      Sort by: 
                    </span>
                    <span>
                      <select
                        className="dropdown"
                        id="request-status-dropdown"
                      >
                        <option
                          value="all"
                        >
                          All
                        </option>
                        <option
                          value="pending"
                        >
                          In-Review
                        </option>
                        <option
                          value="approved"
                        >
                          Pending
                        </option>
                        <option
                          value="ongoing"
                        >
                          Disapproved
                        </option>
                        <option
                          value="resolved"
                        >
                          Resolved
                        </option>
                      </select>
                    </span>
                     
                  </span>
                  <span>
                    <Input
                      className="button"
                      handleClick={[Function]}
                      id="new-request-btn"
                      isRequired=""
                      name="new-request"
                      type="button"
                      value="New Request"
                    />
                  </span>
                </div>,
                <br />,
                <br />,
                <RequestTable
                  requests={
                    Object {
                      "message": "You have no requests",
                      "requests": Array [
                        Object {
                          "detail": "it's stuck in a boot loop",
                          "id": 1,
                          "item": "Macbook Pro",
                          "model": "2015",
                          "owner": "josephodina@gmail.com",
                          "type": "repair",
                        },
                        Object {
                          "detail": "it's stuck in a boot loop",
                          "id": 2,
                          "item": "Macbook Pro",
                          "model": "2015",
                          "owner": "josephodina@gmail.com",
                          "type": "maintenance",
                        },
                      ],
                    }
                  }
                />,
                <span
                  className="table-nav right hidden"
                >
                  <Input
                    className="button"
                    id=""
                    isRequired=""
                    type="button"
                    value="<"
                  />
                  <Input
                    className="button"
                    id=""
                    isRequired=""
                    type="button"
                    value=">"
                  />
                </span>,
              ],
              "className": "wrapper",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <span
                    id="username"
                  >
                    Welcome, 
                    Chukwuka
                  </span>,
                  "className": "left white",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Welcome, ",
                      "Chukwuka",
                    ],
                    "id": "username",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Welcome, ",
                    "Chukwuka",
                  ],
                  "type": "span",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <span
                      id="sort-group"
                    >
                      <span>
                        Sort by: 
                      </span>
                      <span>
                        <select
                          className="dropdown"
                          id="request-status-dropdown"
                        >
                          <option
                            value="all"
                          >
                            All
                          </option>
                          <option
                            value="pending"
                          >
                            In-Review
                          </option>
                          <option
                            value="approved"
                          >
                            Pending
                          </option>
                          <option
                            value="ongoing"
                          >
                            Disapproved
                          </option>
                          <option
                            value="resolved"
                          >
                            Resolved
                          </option>
                        </select>
                      </span>
                       
                    </span>,
                    <span>
                      <Input
                        className="button"
                        handleClick={[Function]}
                        id="new-request-btn"
                        isRequired=""
                        name="new-request"
                        type="button"
                        value="New Request"
                      />
                    </span>,
                  ],
                  "className": "right white",
                  "id": "table-sort",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <span>
                          Sort by: 
                        </span>,
                        <span>
                          <select
                            className="dropdown"
                            id="request-status-dropdown"
                          >
                            <option
                              value="all"
                            >
                              All
                            </option>
                            <option
                              value="pending"
                            >
                              In-Review
                            </option>
                            <option
                              value="approved"
                            >
                              Pending
                            </option>
                            <option
                              value="ongoing"
                            >
                              Disapproved
                            </option>
                            <option
                              value="resolved"
                            >
                              Resolved
                            </option>
                          </select>
                        </span>,
                        " ",
                      ],
                      "id": "sort-group",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Sort by: ",
                        },
                        "ref": null,
                        "rendered": "Sort by: ",
                        "type": "span",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": <select
                            className="dropdown"
                            id="request-status-dropdown"
                          >
                            <option
                              value="all"
                            >
                              All
                            </option>
                            <option
                              value="pending"
                            >
                              In-Review
                            </option>
                            <option
                              value="approved"
                            >
                              Pending
                            </option>
                            <option
                              value="ongoing"
                            >
                              Disapproved
                            </option>
                            <option
                              value="resolved"
                            >
                              Resolved
                            </option>
                          </select>,
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": Array [
                              <option
                                value="all"
                              >
                                All
                              </option>,
                              <option
                                value="pending"
                              >
                                In-Review
                              </option>,
                              <option
                                value="approved"
                              >
                                Pending
                              </option>,
                              <option
                                value="ongoing"
                              >
                                Disapproved
                              </option>,
                              <option
                                value="resolved"
                              >
                                Resolved
                              </option>,
                            ],
                            "className": "dropdown",
                            "id": "request-status-dropdown",
                          },
                          "ref": null,
                          "rendered": Array [
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "All",
                                "value": "all",
                              },
                              "ref": null,
                              "rendered": "All",
                              "type": "option",
                            },
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "In-Review",
                                "value": "pending",
                              },
                              "ref": null,
                              "rendered": "In-Review",
                              "type": "option",
                            },
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "Pending",
                                "value": "approved",
                              },
                              "ref": null,
                              "rendered": "Pending",
                              "type": "option",
                            },
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "Disapproved",
                                "value": "ongoing",
                              },
                              "ref": null,
                              "rendered": "Disapproved",
                              "type": "option",
                            },
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "Resolved",
                                "value": "resolved",
                              },
                              "ref": null,
                              "rendered": "Resolved",
                              "type": "option",
                            },
                          ],
                          "type": "select",
                        },
                        "type": "span",
                      },
                      " ",
                    ],
                    "type": "span",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <Input
                        className="button"
                        handleClick={[Function]}
                        id="new-request-btn"
                        isRequired=""
                        name="new-request"
                        type="button"
                        value="New Request"
                      />,
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "className": "button",
                        "handleChange": undefined,
                        "handleClick": [Function],
                        "id": "new-request-btn",
                        "isRequired": "",
                        "label": undefined,
                        "name": "new-request",
                        "type": "button",
                        "value": "New Request",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "span",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "message": undefined,
                  "requests": Object {
                    "message": "You have no requests",
                    "requests": Array [
                      Object {
                        "detail": "it's stuck in a boot loop",
                        "id": 1,
                        "item": "Macbook Pro",
                        "model": "2015",
                        "owner": "josephodina@gmail.com",
                        "type": "repair",
                      },
                      Object {
                        "detail": "it's stuck in a boot loop",
                        "id": 2,
                        "item": "Macbook Pro",
                        "model": "2015",
                        "owner": "josephodina@gmail.com",
                        "type": "maintenance",
                      },
                    ],
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <Input
                      className="button"
                      id=""
                      isRequired=""
                      type="button"
                      value="<"
                    />,
                    <Input
                      className="button"
                      id=""
                      isRequired=""
                      type="button"
                      value=">"
                    />,
                  ],
                  "className": "table-nav right hidden",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "className": "button",
                      "handleChange": undefined,
                      "handleClick": undefined,
                      "id": "",
                      "isRequired": "",
                      "label": undefined,
                      "name": undefined,
                      "type": "button",
                      "value": "<",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "className": "button",
                      "handleChange": undefined,
                      "handleClick": undefined,
                      "id": "",
                      "isRequired": "",
                      "label": undefined,
                      "name": undefined,
                      "type": "button",
                      "value": ">",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": "span",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "divider",
            },
            "ref": null,
            "rendered": null,
            "type": "div",
          },
        ],
        "type": "div",
      },
      false,
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Modal
            handleClose={[Function]}
            show={false}
          >
            <Connect(RequestForm)
              handleClose={[Function]}
            />
          </Modal>,
          <Connect(Navbar)
            profileIconVisibility=""
          />,
          <div
            className="body"
            style={
              Object {
                "backgroundImage": "url(null)",
              }
            }
          >
            <div
              className="wrapper"
            >
              <div
                className="left white"
              >
                <span
                  id="username"
                >
                  Welcome, 
                  Chukwuka
                </span>
              </div>
              <div
                className="right white"
                id="table-sort"
              >
                <span
                  id="sort-group"
                >
                  <span>
                    Sort by: 
                  </span>
                  <span>
                    <select
                      className="dropdown"
                      id="request-status-dropdown"
                    >
                      <option
                        value="all"
                      >
                        All
                      </option>
                      <option
                        value="pending"
                      >
                        In-Review
                      </option>
                      <option
                        value="approved"
                      >
                        Pending
                      </option>
                      <option
                        value="ongoing"
                      >
                        Disapproved
                      </option>
                      <option
                        value="resolved"
                      >
                        Resolved
                      </option>
                    </select>
                  </span>
                   
                </span>
                <span>
                  <Input
                    className="button"
                    handleClick={[Function]}
                    id="new-request-btn"
                    isRequired=""
                    name="new-request"
                    type="button"
                    value="New Request"
                  />
                </span>
              </div>
              <br />
              <br />
              <RequestTable
                requests={
                  Object {
                    "message": "You have no requests",
                    "requests": Array [
                      Object {
                        "detail": "it's stuck in a boot loop",
                        "id": 1,
                        "item": "Macbook Pro",
                        "model": "2015",
                        "owner": "josephodina@gmail.com",
                        "type": "repair",
                      },
                      Object {
                        "detail": "it's stuck in a boot loop",
                        "id": 2,
                        "item": "Macbook Pro",
                        "model": "2015",
                        "owner": "josephodina@gmail.com",
                        "type": "maintenance",
                      },
                    ],
                  }
                }
              />
              <span
                className="table-nav right hidden"
              >
                <Input
                  className="button"
                  id=""
                  isRequired=""
                  type="button"
                  value="<"
                />
                <Input
                  className="button"
                  id=""
                  isRequired=""
                  type="button"
                  value=">"
                />
              </span>
            </div>
            <br />
            <div
              className="divider"
            />
          </div>,
          false,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Connect(RequestForm)
              handleClose={[Function]}
            />,
            "handleClose": [Function],
            "show": false,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "handleClose": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "profileIconVisibility": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="wrapper"
              >
                <div
                  className="left white"
                >
                  <span
                    id="username"
                  >
                    Welcome, 
                    Chukwuka
                  </span>
                </div>
                <div
                  className="right white"
                  id="table-sort"
                >
                  <span
                    id="sort-group"
                  >
                    <span>
                      Sort by: 
                    </span>
                    <span>
                      <select
                        className="dropdown"
                        id="request-status-dropdown"
                      >
                        <option
                          value="all"
                        >
                          All
                        </option>
                        <option
                          value="pending"
                        >
                          In-Review
                        </option>
                        <option
                          value="approved"
                        >
                          Pending
                        </option>
                        <option
                          value="ongoing"
                        >
                          Disapproved
                        </option>
                        <option
                          value="resolved"
                        >
                          Resolved
                        </option>
                      </select>
                    </span>
                     
                  </span>
                  <span>
                    <Input
                      className="button"
                      handleClick={[Function]}
                      id="new-request-btn"
                      isRequired=""
                      name="new-request"
                      type="button"
                      value="New Request"
                    />
                  </span>
                </div>
                <br />
                <br />
                <RequestTable
                  requests={
                    Object {
                      "message": "You have no requests",
                      "requests": Array [
                        Object {
                          "detail": "it's stuck in a boot loop",
                          "id": 1,
                          "item": "Macbook Pro",
                          "model": "2015",
                          "owner": "josephodina@gmail.com",
                          "type": "repair",
                        },
                        Object {
                          "detail": "it's stuck in a boot loop",
                          "id": 2,
                          "item": "Macbook Pro",
                          "model": "2015",
                          "owner": "josephodina@gmail.com",
                          "type": "maintenance",
                        },
                      ],
                    }
                  }
                />
                <span
                  className="table-nav right hidden"
                >
                  <Input
                    className="button"
                    id=""
                    isRequired=""
                    type="button"
                    value="<"
                  />
                  <Input
                    className="button"
                    id=""
                    isRequired=""
                    type="button"
                    value=">"
                  />
                </span>
              </div>,
              <br />,
              <div
                className="divider"
              />,
            ],
            "className": "body",
            "style": Object {
              "backgroundImage": "url(null)",
            },
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="left white"
                  >
                    <span
                      id="username"
                    >
                      Welcome, 
                      Chukwuka
                    </span>
                  </div>,
                  <div
                    className="right white"
                    id="table-sort"
                  >
                    <span
                      id="sort-group"
                    >
                      <span>
                        Sort by: 
                      </span>
                      <span>
                        <select
                          className="dropdown"
                          id="request-status-dropdown"
                        >
                          <option
                            value="all"
                          >
                            All
                          </option>
                          <option
                            value="pending"
                          >
                            In-Review
                          </option>
                          <option
                            value="approved"
                          >
                            Pending
                          </option>
                          <option
                            value="ongoing"
                          >
                            Disapproved
                          </option>
                          <option
                            value="resolved"
                          >
                            Resolved
                          </option>
                        </select>
                      </span>
                       
                    </span>
                    <span>
                      <Input
                        className="button"
                        handleClick={[Function]}
                        id="new-request-btn"
                        isRequired=""
                        name="new-request"
                        type="button"
                        value="New Request"
                      />
                    </span>
                  </div>,
                  <br />,
                  <br />,
                  <RequestTable
                    requests={
                      Object {
                        "message": "You have no requests",
                        "requests": Array [
                          Object {
                            "detail": "it's stuck in a boot loop",
                            "id": 1,
                            "item": "Macbook Pro",
                            "model": "2015",
                            "owner": "josephodina@gmail.com",
                            "type": "repair",
                          },
                          Object {
                            "detail": "it's stuck in a boot loop",
                            "id": 2,
                            "item": "Macbook Pro",
                            "model": "2015",
                            "owner": "josephodina@gmail.com",
                            "type": "maintenance",
                          },
                        ],
                      }
                    }
                  />,
                  <span
                    className="table-nav right hidden"
                  >
                    <Input
                      className="button"
                      id=""
                      isRequired=""
                      type="button"
                      value="<"
                    />
                    <Input
                      className="button"
                      id=""
                      isRequired=""
                      type="button"
                      value=">"
                    />
                  </span>,
                ],
                "className": "wrapper",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <span
                      id="username"
                    >
                      Welcome, 
                      Chukwuka
                    </span>,
                    "className": "left white",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Welcome, ",
                        "Chukwuka",
                      ],
                      "id": "username",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Welcome, ",
                      "Chukwuka",
                    ],
                    "type": "span",
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <span
                        id="sort-group"
                      >
                        <span>
                          Sort by: 
                        </span>
                        <span>
                          <select
                            className="dropdown"
                            id="request-status-dropdown"
                          >
                            <option
                              value="all"
                            >
                              All
                            </option>
                            <option
                              value="pending"
                            >
                              In-Review
                            </option>
                            <option
                              value="approved"
                            >
                              Pending
                            </option>
                            <option
                              value="ongoing"
                            >
                              Disapproved
                            </option>
                            <option
                              value="resolved"
                            >
                              Resolved
                            </option>
                          </select>
                        </span>
                         
                      </span>,
                      <span>
                        <Input
                          className="button"
                          handleClick={[Function]}
                          id="new-request-btn"
                          isRequired=""
                          name="new-request"
                          type="button"
                          value="New Request"
                        />
                      </span>,
                    ],
                    "className": "right white",
                    "id": "table-sort",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <span>
                            Sort by: 
                          </span>,
                          <span>
                            <select
                              className="dropdown"
                              id="request-status-dropdown"
                            >
                              <option
                                value="all"
                              >
                                All
                              </option>
                              <option
                                value="pending"
                              >
                                In-Review
                              </option>
                              <option
                                value="approved"
                              >
                                Pending
                              </option>
                              <option
                                value="ongoing"
                              >
                                Disapproved
                              </option>
                              <option
                                value="resolved"
                              >
                                Resolved
                              </option>
                            </select>
                          </span>,
                          " ",
                        ],
                        "id": "sort-group",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": "Sort by: ",
                          },
                          "ref": null,
                          "rendered": "Sort by: ",
                          "type": "span",
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": <select
                              className="dropdown"
                              id="request-status-dropdown"
                            >
                              <option
                                value="all"
                              >
                                All
                              </option>
                              <option
                                value="pending"
                              >
                                In-Review
                              </option>
                              <option
                                value="approved"
                              >
                                Pending
                              </option>
                              <option
                                value="ongoing"
                              >
                                Disapproved
                              </option>
                              <option
                                value="resolved"
                              >
                                Resolved
                              </option>
                            </select>,
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": Array [
                                <option
                                  value="all"
                                >
                                  All
                                </option>,
                                <option
                                  value="pending"
                                >
                                  In-Review
                                </option>,
                                <option
                                  value="approved"
                                >
                                  Pending
                                </option>,
                                <option
                                  value="ongoing"
                                >
                                  Disapproved
                                </option>,
                                <option
                                  value="resolved"
                                >
                                  Resolved
                                </option>,
                              ],
                              "className": "dropdown",
                              "id": "request-status-dropdown",
                            },
                            "ref": null,
                            "rendered": Array [
                              Object {
                                "instance": null,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": "All",
                                  "value": "all",
                                },
                                "ref": null,
                                "rendered": "All",
                                "type": "option",
                              },
                              Object {
                                "instance": null,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": "In-Review",
                                  "value": "pending",
                                },
                                "ref": null,
                                "rendered": "In-Review",
                                "type": "option",
                              },
                              Object {
                                "instance": null,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": "Pending",
                                  "value": "approved",
                                },
                                "ref": null,
                                "rendered": "Pending",
                                "type": "option",
                              },
                              Object {
                                "instance": null,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": "Disapproved",
                                  "value": "ongoing",
                                },
                                "ref": null,
                                "rendered": "Disapproved",
                                "type": "option",
                              },
                              Object {
                                "instance": null,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": "Resolved",
                                  "value": "resolved",
                                },
                                "ref": null,
                                "rendered": "Resolved",
                                "type": "option",
                              },
                            ],
                            "type": "select",
                          },
                          "type": "span",
                        },
                        " ",
                      ],
                      "type": "span",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <Input
                          className="button"
                          handleClick={[Function]}
                          id="new-request-btn"
                          isRequired=""
                          name="new-request"
                          type="button"
                          value="New Request"
                        />,
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "className": "button",
                          "handleChange": undefined,
                          "handleClick": [Function],
                          "id": "new-request-btn",
                          "isRequired": "",
                          "label": undefined,
                          "name": "new-request",
                          "type": "button",
                          "value": "New Request",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      "type": "span",
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "message": undefined,
                    "requests": Object {
                      "message": "You have no requests",
                      "requests": Array [
                        Object {
                          "detail": "it's stuck in a boot loop",
                          "id": 1,
                          "item": "Macbook Pro",
                          "model": "2015",
                          "owner": "josephodina@gmail.com",
                          "type": "repair",
                        },
                        Object {
                          "detail": "it's stuck in a boot loop",
                          "id": 2,
                          "item": "Macbook Pro",
                          "model": "2015",
                          "owner": "josephodina@gmail.com",
                          "type": "maintenance",
                        },
                      ],
                    },
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <Input
                        className="button"
                        id=""
                        isRequired=""
                        type="button"
                        value="<"
                      />,
                      <Input
                        className="button"
                        id=""
                        isRequired=""
                        type="button"
                        value=">"
                      />,
                    ],
                    "className": "table-nav right hidden",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "className": "button",
                        "handleChange": undefined,
                        "handleClick": undefined,
                        "id": "",
                        "isRequired": "",
                        "label": undefined,
                        "name": undefined,
                        "type": "button",
                        "value": "<",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "className": "button",
                        "handleChange": undefined,
                        "handleClick": undefined,
                        "id": "",
                        "isRequired": "",
                        "label": undefined,
                        "name": undefined,
                        "type": "button",
                        "value": ">",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": "span",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "divider",
              },
              "ref": null,
              "rendered": null,
              "type": "div",
            },
          ],
          "type": "div",
        },
        false,
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
