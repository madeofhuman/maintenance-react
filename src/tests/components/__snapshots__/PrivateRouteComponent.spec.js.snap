// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PrivateRoute Component does not render the component when the user is not authenticated 1`] = `
<BrowserRouter>
  <Router
    history={
      Object {
        "action": "REPLACE",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "szc784",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Switch>
      <Connect(PrivateRoute)
        component={[Function]}
        computedMatch={
          Object {
            "isExact": true,
            "params": Object {},
            "path": "/",
            "url": "/",
          }
        }
        location={
          Object {
            "hash": "",
            "key": "szc784",
            "pathname": "/",
            "search": "",
            "state": undefined,
          }
        }
        store={
          Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
      >
        <PrivateRoute
          authenticated={false}
          component={[Function]}
          computedMatch={
            Object {
              "isExact": true,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
          dispatch={[Function]}
          location={
            Object {
              "hash": "",
              "key": "szc784",
              "pathname": "/",
              "search": "",
              "state": undefined,
            }
          }
          store={
            Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            }
          }
          storeSubscription={
            Subscription {
              "listeners": Object {
                "clear": [Function],
                "get": [Function],
                "notify": [Function],
                "subscribe": [Function],
              },
              "onStateChange": [Function],
              "parentSub": undefined,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "unsubscribe": [Function],
            }
          }
        >
          <Route
            computedMatch={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            dispatch={[Function]}
            location={
              Object {
                "hash": "",
                "key": "szc784",
                "pathname": "/",
                "search": "",
                "state": undefined,
              }
            }
            render={[Function]}
            store={
              Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              }
            }
            storeSubscription={
              Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              }
            }
          >
            <Redirect
              push={false}
              to="/"
            />
          </Route>
        </PrivateRoute>
      </Connect(PrivateRoute)>
    </Switch>
  </Router>
</BrowserRouter>
`;

exports[`PrivateRoute Component renders the component when the user is authenticated 1`] = `
<BrowserRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Switch>
      <Connect(PrivateRoute)
        component={[Function]}
        computedMatch={
          Object {
            "isExact": true,
            "params": Object {},
            "path": "/",
            "url": "/",
          }
        }
        location={
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          }
        }
        store={
          Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
      >
        <PrivateRoute
          authenticated={true}
          component={[Function]}
          computedMatch={
            Object {
              "isExact": true,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
          dispatch={[Function]}
          location={
            Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            }
          }
          store={
            Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            }
          }
          storeSubscription={
            Subscription {
              "listeners": Object {
                "clear": [Function],
                "get": [Function],
                "notify": [Function],
                "subscribe": [Function],
              },
              "onStateChange": [Function],
              "parentSub": undefined,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "unsubscribe": [Function],
            }
          }
        >
          <Route
            computedMatch={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            dispatch={[Function]}
            location={
              Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              }
            }
            render={[Function]}
            store={
              Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              }
            }
            storeSubscription={
              Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              }
            }
          >
            <Input
              className=""
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "createHref": [Function],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              id=""
              isRequired=""
              location={
                Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                }
              }
              match={
                Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
            >
              <label />
              <input
                className=""
                id=""
                required=""
              />
            </Input>
          </Route>
        </PrivateRoute>
      </Connect(PrivateRoute)>
    </Switch>
  </Router>
</BrowserRouter>
`;
