// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Request Form instantiates with initial values when called as an update form 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RequestForm
    initialValues={
      Object {
        "detail": "it is stuck in a boot loop",
        "id": 1,
        "item": "Macbook Pro",
        "model": "2015",
        "type": "repair",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <form
        className="form request-form"
        id="new-request-form"
        onSubmit={[Function]}
      >
        <span
          className="close-btn grey right"
          id="sign-up-form-close-btn"
        >
          x
        </span>
        <Input
          className=""
          id=""
          isRequired=""
          name="id"
          type="hidden"
          value={1}
        />
        <label
          className="left orange center"
          id="title"
        >
          Update request
        </label>
        <select
          className="transparent-selector"
          id="type"
          name="type"
          onChange={[Function]}
          required="required"
          value="repair"
        >
          <option
            disabled={true}
            value=""
          >
            Select request type
          </option>
          <option
            value="maintenance"
          >
            Maintenance
          </option>
          <option
            value="repair"
          >
            Repair
          </option>
        </select>
        <br />
        <Input
          className=""
          handleChange={[Function]}
          id="item"
          isRequired="required"
          label="Item:"
          name="item"
          type="text"
          value="Macbook Pro"
        />
        <br />
        <Input
          className=""
          handleChange={[Function]}
          id="model"
          isRequired="required"
          label="Model:"
          name="model"
          type="text"
          value="2015"
        />
        <br />
        <label>
          <span>
            Description:
          </span>
        </label>
        <textarea
          cols="40"
          id="detail"
          name="detail"
          onChange={[Function]}
          required="required"
          type="text"
          value="it is stuck in a boot loop"
        />
        <Input
          className="white auth-submit-btn"
          id="new-request-btn"
          isRequired=""
          type="submit"
          value="Submit"
        />
      </form>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <span
            className="close-btn grey right"
            id="sign-up-form-close-btn"
          >
            x
          </span>,
          <Input
            className=""
            id=""
            isRequired=""
            name="id"
            type="hidden"
            value={1}
          />,
          <label
            className="left orange center"
            id="title"
          >
            Update request
          </label>,
          <select
            className="transparent-selector"
            id="type"
            name="type"
            onChange={[Function]}
            required="required"
            value="repair"
          >
            <option
              disabled={true}
              value=""
            >
              Select request type
            </option>
            <option
              value="maintenance"
            >
              Maintenance
            </option>
            <option
              value="repair"
            >
              Repair
            </option>
          </select>,
          <br />,
          <Input
            className=""
            handleChange={[Function]}
            id="item"
            isRequired="required"
            label="Item:"
            name="item"
            type="text"
            value="Macbook Pro"
          />,
          <br />,
          <Input
            className=""
            handleChange={[Function]}
            id="model"
            isRequired="required"
            label="Model:"
            name="model"
            type="text"
            value="2015"
          />,
          <br />,
          <label>
            <span>
              Description:
            </span>
          </label>,
          <textarea
            cols="40"
            id="detail"
            name="detail"
            onChange={[Function]}
            required="required"
            type="text"
            value="it is stuck in a boot loop"
          />,
          <Input
            className="white auth-submit-btn"
            id="new-request-btn"
            isRequired=""
            type="submit"
            value="Submit"
          />,
        ],
        "className": "form request-form",
        "id": "new-request-form",
        "onSubmit": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "x",
            "className": "close-btn grey right",
            "id": "sign-up-form-close-btn",
            "onClick": undefined,
          },
          "ref": null,
          "rendered": "x",
          "type": "span",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "",
            "handleChange": undefined,
            "handleClick": undefined,
            "id": "",
            "isRequired": "",
            "label": undefined,
            "name": "id",
            "type": "hidden",
            "value": 1,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Update request",
            "className": "left orange center",
            "id": "title",
          },
          "ref": null,
          "rendered": "Update request",
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <option
                disabled={true}
                value=""
              >
                Select request type
              </option>,
              <option
                value="maintenance"
              >
                Maintenance
              </option>,
              <option
                value="repair"
              >
                Repair
              </option>,
            ],
            "className": "transparent-selector",
            "id": "type",
            "name": "type",
            "onChange": [Function],
            "required": "required",
            "value": "repair",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Select request type",
                "disabled": true,
                "value": "",
              },
              "ref": null,
              "rendered": "Select request type",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Maintenance",
                "value": "maintenance",
              },
              "ref": null,
              "rendered": "Maintenance",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Repair",
                "value": "repair",
              },
              "ref": null,
              "rendered": "Repair",
              "type": "option",
            },
          ],
          "type": "select",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "br",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "",
            "handleChange": [Function],
            "handleClick": undefined,
            "id": "item",
            "isRequired": "required",
            "label": "Item:",
            "name": "item",
            "type": "text",
            "value": "Macbook Pro",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "br",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "",
            "handleChange": [Function],
            "handleClick": undefined,
            "id": "model",
            "isRequired": "required",
            "label": "Model:",
            "name": "model",
            "type": "text",
            "value": "2015",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "br",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <span>
              Description:
            </span>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Description:",
            },
            "ref": null,
            "rendered": "Description:",
            "type": "span",
          },
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "cols": "40",
            "id": "detail",
            "name": "detail",
            "onChange": [Function],
            "required": "required",
            "type": "text",
            "value": "it is stuck in a boot loop",
          },
          "ref": null,
          "rendered": null,
          "type": "textarea",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "white auth-submit-btn",
            "handleChange": undefined,
            "handleClick": undefined,
            "id": "new-request-btn",
            "isRequired": "",
            "label": undefined,
            "name": undefined,
            "type": "submit",
            "value": "Submit",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "form",
    },
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <form
          className="form request-form"
          id="new-request-form"
          onSubmit={[Function]}
        >
          <span
            className="close-btn grey right"
            id="sign-up-form-close-btn"
          >
            x
          </span>
          <Input
            className=""
            id=""
            isRequired=""
            name="id"
            type="hidden"
            value={1}
          />
          <label
            className="left orange center"
            id="title"
          >
            Update request
          </label>
          <select
            className="transparent-selector"
            id="type"
            name="type"
            onChange={[Function]}
            required="required"
            value="repair"
          >
            <option
              disabled={true}
              value=""
            >
              Select request type
            </option>
            <option
              value="maintenance"
            >
              Maintenance
            </option>
            <option
              value="repair"
            >
              Repair
            </option>
          </select>
          <br />
          <Input
            className=""
            handleChange={[Function]}
            id="item"
            isRequired="required"
            label="Item:"
            name="item"
            type="text"
            value="Macbook Pro"
          />
          <br />
          <Input
            className=""
            handleChange={[Function]}
            id="model"
            isRequired="required"
            label="Model:"
            name="model"
            type="text"
            value="2015"
          />
          <br />
          <label>
            <span>
              Description:
            </span>
          </label>
          <textarea
            cols="40"
            id="detail"
            name="detail"
            onChange={[Function]}
            required="required"
            type="text"
            value="it is stuck in a boot loop"
          />
          <Input
            className="white auth-submit-btn"
            id="new-request-btn"
            isRequired=""
            type="submit"
            value="Submit"
          />
        </form>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <span
              className="close-btn grey right"
              id="sign-up-form-close-btn"
            >
              x
            </span>,
            <Input
              className=""
              id=""
              isRequired=""
              name="id"
              type="hidden"
              value={1}
            />,
            <label
              className="left orange center"
              id="title"
            >
              Update request
            </label>,
            <select
              className="transparent-selector"
              id="type"
              name="type"
              onChange={[Function]}
              required="required"
              value="repair"
            >
              <option
                disabled={true}
                value=""
              >
                Select request type
              </option>
              <option
                value="maintenance"
              >
                Maintenance
              </option>
              <option
                value="repair"
              >
                Repair
              </option>
            </select>,
            <br />,
            <Input
              className=""
              handleChange={[Function]}
              id="item"
              isRequired="required"
              label="Item:"
              name="item"
              type="text"
              value="Macbook Pro"
            />,
            <br />,
            <Input
              className=""
              handleChange={[Function]}
              id="model"
              isRequired="required"
              label="Model:"
              name="model"
              type="text"
              value="2015"
            />,
            <br />,
            <label>
              <span>
                Description:
              </span>
            </label>,
            <textarea
              cols="40"
              id="detail"
              name="detail"
              onChange={[Function]}
              required="required"
              type="text"
              value="it is stuck in a boot loop"
            />,
            <Input
              className="white auth-submit-btn"
              id="new-request-btn"
              isRequired=""
              type="submit"
              value="Submit"
            />,
          ],
          "className": "form request-form",
          "id": "new-request-form",
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "x",
              "className": "close-btn grey right",
              "id": "sign-up-form-close-btn",
              "onClick": undefined,
            },
            "ref": null,
            "rendered": "x",
            "type": "span",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "",
              "handleChange": undefined,
              "handleClick": undefined,
              "id": "",
              "isRequired": "",
              "label": undefined,
              "name": "id",
              "type": "hidden",
              "value": 1,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Update request",
              "className": "left orange center",
              "id": "title",
            },
            "ref": null,
            "rendered": "Update request",
            "type": "label",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <option
                  disabled={true}
                  value=""
                >
                  Select request type
                </option>,
                <option
                  value="maintenance"
                >
                  Maintenance
                </option>,
                <option
                  value="repair"
                >
                  Repair
                </option>,
              ],
              "className": "transparent-selector",
              "id": "type",
              "name": "type",
              "onChange": [Function],
              "required": "required",
              "value": "repair",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Select request type",
                  "disabled": true,
                  "value": "",
                },
                "ref": null,
                "rendered": "Select request type",
                "type": "option",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Maintenance",
                  "value": "maintenance",
                },
                "ref": null,
                "rendered": "Maintenance",
                "type": "option",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Repair",
                  "value": "repair",
                },
                "ref": null,
                "rendered": "Repair",
                "type": "option",
              },
            ],
            "type": "select",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "",
              "handleChange": [Function],
              "handleClick": undefined,
              "id": "item",
              "isRequired": "required",
              "label": "Item:",
              "name": "item",
              "type": "text",
              "value": "Macbook Pro",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "",
              "handleChange": [Function],
              "handleClick": undefined,
              "id": "model",
              "isRequired": "required",
              "label": "Model:",
              "name": "model",
              "type": "text",
              "value": "2015",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <span>
                Description:
              </span>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Description:",
              },
              "ref": null,
              "rendered": "Description:",
              "type": "span",
            },
            "type": "label",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "cols": "40",
              "id": "detail",
              "name": "detail",
              "onChange": [Function],
              "required": "required",
              "type": "text",
              "value": "it is stuck in a boot loop",
            },
            "ref": null,
            "rendered": null,
            "type": "textarea",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "white auth-submit-btn",
              "handleChange": undefined,
              "handleClick": undefined,
              "id": "new-request-btn",
              "isRequired": "",
              "label": undefined,
              "name": undefined,
              "type": "submit",
              "value": "Submit",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "form",
      },
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`Request Form renders a form 1`] = `
ReactWrapper {
  Symbol(enzyme.__unrendered__): <BrowserRouter>
    <RequestForm
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    />
  </BrowserRouter>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": BrowserRouter {
      "_reactInternalFiber": FiberNode {
        "_debugID": 50,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": FiberNode {
          "_debugID": 49,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "effectTag": 1,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <RequestForm
                store={
                  Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  }
                }
              />,
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "children": <RequestForm
                store={
                  Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  }
                }
              />,
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <RequestForm
                store={
                  Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  }
                }
              />,
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 47,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 1,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <form
                    class="form request-form"
                    id="new-request-form"
                  >
                    <span
                      class="close-btn grey right"
                      id="sign-up-form-close-btn"
                    >
                      x
                    </span>
                    <label
                      for="id"
                    />
                    <input
                      class=""
                      id=""
                      name="id"
                      type="hidden"
                      value=""
                    />
                    <label
                      class="left orange center"
                      id="title"
                    >
                      Create a new request
                    </label>
                    <select
                      class="transparent-selector"
                      id="type"
                      name="type"
                      required=""
                    >
                      <option
                        disabled=""
                        value=""
                      >
                        Select request type
                      </option>
                      <option
                        value="maintenance"
                      >
                        Maintenance
                      </option>
                      <option
                        value="repair"
                      >
                        Repair
                      </option>
                    </select>
                    <br />
                    <label
                      for="item"
                    >
                      Item:
                    </label>
                    <input
                      class=""
                      id="item"
                      name="item"
                      required=""
                      type="text"
                      value=""
                    />
                    <br />
                    <label
                      for="model"
                    >
                      Model:
                    </label>
                    <input
                      class=""
                      id="model"
                      name="model"
                      required=""
                      type="text"
                      value=""
                    />
                    <br />
                    <label>
                      <span>
                        Description:
                      </span>
                    </label>
                    <textarea
                      cols="40"
                      id="detail"
                      name="detail"
                      required=""
                      type="text"
                    />
                    <label />
                    <input
                      class="white auth-submit-btn"
                      id="new-request-btn"
                      type="submit"
                      value="Submit"
                    />
                  </form>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "timeoutHandle": -1,
              },
              "tag": 5,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <RequestForm
                            store={
                              Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              }
                            }
                          />,
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <RequestForm
                            store={
                              Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              }
                            }
                          />,
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 32,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <form
                  class="form request-form"
                  id="new-request-form"
                >
                  <span
                    class="close-btn grey right"
                    id="sign-up-form-close-btn"
                  >
                    x
                  </span>
                  <label
                    for="id"
                  />
                  <input
                    class=""
                    id=""
                    name="id"
                    type="hidden"
                    value=""
                  />
                  <label
                    class="left orange center"
                    id="title"
                  >
                    Create a new request
                  </label>
                  <select
                    class="transparent-selector"
                    id="type"
                    name="type"
                    required=""
                  >
                    <option
                      disabled=""
                      value=""
                    >
                      Select request type
                    </option>
                    <option
                      value="maintenance"
                    >
                      Maintenance
                    </option>
                    <option
                      value="repair"
                    >
                      Repair
                    </option>
                  </select>
                  <br />
                  <label
                    for="item"
                  >
                    Item:
                  </label>
                  <input
                    class=""
                    id="item"
                    name="item"
                    required=""
                    type="text"
                    value=""
                  />
                  <br />
                  <label
                    for="model"
                  >
                    Model:
                  </label>
                  <input
                    class=""
                    id="model"
                    name="model"
                    required=""
                    type="text"
                    value=""
                  />
                  <br />
                  <label>
                    <span>
                      Description:
                    </span>
                  </label>
                  <textarea
                    cols="40"
                    id="detail"
                    name="detail"
                    required=""
                    type="text"
                  />
                  <label />
                  <input
                    class="white auth-submit-btn"
                    id="new-request-btn"
                    type="submit"
                    value="Submit"
                  />
                </form>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 12,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "timeoutHandle": -1,
            },
            "tag": 5,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    }
                  }
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <RequestForm
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                />,
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <RequestForm
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                />,
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_debugSource": null,
        "actualDuration": 0,
        "actualStartTime": -1,
        "alternate": null,
        "child": FiberNode {
          "_debugID": 51,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 52,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 53,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 54,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": "x",
                  "className": "close-btn grey right",
                  "id": "sign-up-form-close-btn",
                  "onClick": undefined,
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": "x",
                  "className": "close-btn grey right",
                  "id": "sign-up-form-close-btn",
                  "onClick": undefined,
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugID": 55,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 66,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": undefined,
                      "htmlFor": "id",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": undefined,
                      "htmlFor": "id",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 67,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "className": "",
                        "id": "",
                        "name": "id",
                        "onChange": undefined,
                        "onClick": undefined,
                        "required": "",
                        "type": "hidden",
                        "value": undefined,
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "className": "",
                        "id": "",
                        "name": "id",
                        "onChange": undefined,
                        "onClick": undefined,
                        "required": "",
                        "type": "hidden",
                        "value": undefined,
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <input
                        class=""
                        id=""
                        name="id"
                        type="hidden"
                        value=""
                      />,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "input",
                      "updateQueue": null,
                    },
                    "stateNode": <label
                      for="id"
                    />,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "label",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "className": "",
                    "handleChange": undefined,
                    "handleClick": undefined,
                    "id": "",
                    "isRequired": "",
                    "label": undefined,
                    "name": "id",
                    "type": "hidden",
                    "value": undefined,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "className": "",
                    "handleChange": undefined,
                    "handleClick": undefined,
                    "id": "",
                    "isRequired": "",
                    "label": undefined,
                    "name": "id",
                    "type": "hidden",
                    "value": undefined,
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 2,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": "Create a new request",
                      "className": "left orange center",
                      "id": "title",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": "Create a new request",
                      "className": "left orange center",
                      "id": "title",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 57,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 68,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Select request type",
                          "disabled": true,
                          "value": "",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Select request type",
                          "disabled": true,
                          "value": "",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 69,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "Maintenance",
                            "value": "maintenance",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "Maintenance",
                            "value": "maintenance",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 70,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 2,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": "Repair",
                              "value": "repair",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": "Repair",
                              "value": "repair",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <option
                              value="repair"
                            >
                              Repair
                            </option>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "option",
                            "updateQueue": null,
                          },
                          "stateNode": <option
                            value="maintenance"
                          >
                            Maintenance
                          </option>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "option",
                          "updateQueue": null,
                        },
                        "stateNode": <option
                          disabled=""
                          value=""
                        >
                          Select request type
                        </option>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "option",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 3,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <option
                            disabled={true}
                            value=""
                          >
                            Select request type
                          </option>,
                          <option
                            value="maintenance"
                          >
                            Maintenance
                          </option>,
                          <option
                            value="repair"
                          >
                            Repair
                          </option>,
                        ],
                        "className": "transparent-selector",
                        "id": "type",
                        "name": "type",
                        "onChange": [Function],
                        "required": "required",
                        "value": "",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <option
                            disabled={true}
                            value=""
                          >
                            Select request type
                          </option>,
                          <option
                            value="maintenance"
                          >
                            Maintenance
                          </option>,
                          <option
                            value="repair"
                          >
                            Repair
                          </option>,
                        ],
                        "className": "transparent-selector",
                        "id": "type",
                        "name": "type",
                        "onChange": [Function],
                        "required": "required",
                        "value": "",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 4,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {},
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {},
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 59,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 71,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": "Item:",
                              "htmlFor": "item",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": "Item:",
                              "htmlFor": "item",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 72,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "className": "",
                                "id": "item",
                                "name": "item",
                                "onChange": [Function],
                                "onClick": undefined,
                                "required": "required",
                                "type": "text",
                                "value": "",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "className": "",
                                "id": "item",
                                "name": "item",
                                "onChange": [Function],
                                "onClick": undefined,
                                "required": "required",
                                "type": "text",
                                "value": "",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <input
                                class=""
                                id="item"
                                name="item"
                                required=""
                                type="text"
                                value=""
                              />,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "input",
                              "updateQueue": null,
                            },
                            "stateNode": <label
                              for="item"
                            >
                              Item:
                            </label>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "label",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "effectTag": 1,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 5,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "className": "",
                            "handleChange": [Function],
                            "handleClick": undefined,
                            "id": "item",
                            "isRequired": "required",
                            "label": "Item:",
                            "name": "item",
                            "type": "text",
                            "value": "",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "className": "",
                            "handleChange": [Function],
                            "handleClick": undefined,
                            "id": "item",
                            "isRequired": "required",
                            "label": "Item:",
                            "name": "item",
                            "type": "text",
                            "value": "",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 6,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {},
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {},
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 61,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugID": 73,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": "Model:",
                                  "htmlFor": "model",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": "Model:",
                                  "htmlFor": "model",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugID": 74,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 1,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "className": "",
                                    "id": "model",
                                    "name": "model",
                                    "onChange": [Function],
                                    "onClick": undefined,
                                    "required": "required",
                                    "type": "text",
                                    "value": "",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "className": "",
                                    "id": "model",
                                    "name": "model",
                                    "onChange": [Function],
                                    "onClick": undefined,
                                    "required": "required",
                                    "type": "text",
                                    "value": "",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode": <input
                                    class=""
                                    id="model"
                                    name="model"
                                    required=""
                                    type="text"
                                    value=""
                                  />,
                                  "tag": 7,
                                  "treeBaseDuration": 0,
                                  "type": "input",
                                  "updateQueue": null,
                                },
                                "stateNode": <label
                                  for="model"
                                >
                                  Model:
                                </label>,
                                "tag": 7,
                                "treeBaseDuration": 0,
                                "type": "label",
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "effectTag": 1,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 7,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "className": "",
                                "handleChange": [Function],
                                "handleClick": undefined,
                                "id": "model",
                                "isRequired": "required",
                                "label": "Model:",
                                "name": "model",
                                "type": "text",
                                "value": "",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "className": "",
                                "handleChange": [Function],
                                "handleClick": undefined,
                                "id": "model",
                                "isRequired": "required",
                                "label": "Model:",
                                "name": "model",
                                "type": "text",
                                "value": "",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 62,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 8,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {},
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {},
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugID": 63,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": FiberNode {
                                    "_debugID": 75,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": null,
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "effectTag": 0,
                                    "expirationTime": 0,
                                    "firstContextDependency": null,
                                    "firstEffect": null,
                                    "index": 0,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "children": "Description:",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "children": "Description:",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode": <span>
                                      Description:
                                    </span>,
                                    "tag": 7,
                                    "treeBaseDuration": 0,
                                    "type": "span",
                                    "updateQueue": null,
                                  },
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 9,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "children": <span>
                                      Description:
                                    </span>,
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "children": <span>
                                      Description:
                                    </span>,
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugID": 64,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": null,
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "effectTag": 0,
                                    "expirationTime": 0,
                                    "firstContextDependency": null,
                                    "firstEffect": null,
                                    "index": 10,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "cols": "40",
                                      "id": "detail",
                                      "name": "detail",
                                      "onChange": [Function],
                                      "required": "required",
                                      "type": "text",
                                      "value": "",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "cols": "40",
                                      "id": "detail",
                                      "name": "detail",
                                      "onChange": [Function],
                                      "required": "required",
                                      "type": "text",
                                      "value": "",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": FiberNode {
                                      "_debugID": 65,
                                      "_debugIsCurrentlyTiming": false,
                                      "_debugOwner": [Circular],
                                      "_debugSource": null,
                                      "actualDuration": 0,
                                      "actualStartTime": -1,
                                      "alternate": null,
                                      "child": FiberNode {
                                        "_debugID": 76,
                                        "_debugIsCurrentlyTiming": false,
                                        "_debugOwner": [Circular],
                                        "_debugSource": null,
                                        "actualDuration": 0,
                                        "actualStartTime": -1,
                                        "alternate": null,
                                        "child": null,
                                        "childExpirationTime": 0,
                                        "effectTag": 0,
                                        "expirationTime": 0,
                                        "firstContextDependency": null,
                                        "firstEffect": null,
                                        "index": 0,
                                        "key": null,
                                        "lastEffect": null,
                                        "memoizedProps": Object {
                                          "children": undefined,
                                          "htmlFor": undefined,
                                        },
                                        "memoizedState": null,
                                        "mode": 0,
                                        "nextEffect": null,
                                        "pendingProps": Object {
                                          "children": undefined,
                                          "htmlFor": undefined,
                                        },
                                        "ref": null,
                                        "return": [Circular],
                                        "selfBaseDuration": 0,
                                        "sibling": FiberNode {
                                          "_debugID": 77,
                                          "_debugIsCurrentlyTiming": false,
                                          "_debugOwner": [Circular],
                                          "_debugSource": null,
                                          "actualDuration": 0,
                                          "actualStartTime": -1,
                                          "alternate": null,
                                          "child": null,
                                          "childExpirationTime": 0,
                                          "effectTag": 0,
                                          "expirationTime": 0,
                                          "firstContextDependency": null,
                                          "firstEffect": null,
                                          "index": 1,
                                          "key": null,
                                          "lastEffect": null,
                                          "memoizedProps": Object {
                                            "className": "white auth-submit-btn",
                                            "id": "new-request-btn",
                                            "name": undefined,
                                            "onChange": undefined,
                                            "onClick": undefined,
                                            "required": "",
                                            "type": "submit",
                                            "value": "Submit",
                                          },
                                          "memoizedState": null,
                                          "mode": 0,
                                          "nextEffect": null,
                                          "pendingProps": Object {
                                            "className": "white auth-submit-btn",
                                            "id": "new-request-btn",
                                            "name": undefined,
                                            "onChange": undefined,
                                            "onClick": undefined,
                                            "required": "",
                                            "type": "submit",
                                            "value": "Submit",
                                          },
                                          "ref": null,
                                          "return": [Circular],
                                          "selfBaseDuration": 0,
                                          "sibling": null,
                                          "stateNode": <input
                                            class="white auth-submit-btn"
                                            id="new-request-btn"
                                            type="submit"
                                            value="Submit"
                                          />,
                                          "tag": 7,
                                          "treeBaseDuration": 0,
                                          "type": "input",
                                          "updateQueue": null,
                                        },
                                        "stateNode": <label />,
                                        "tag": 7,
                                        "treeBaseDuration": 0,
                                        "type": "label",
                                        "updateQueue": null,
                                      },
                                      "childExpirationTime": 0,
                                      "effectTag": 1,
                                      "expirationTime": 0,
                                      "firstContextDependency": null,
                                      "firstEffect": null,
                                      "index": 11,
                                      "key": null,
                                      "lastEffect": null,
                                      "memoizedProps": Object {
                                        "className": "white auth-submit-btn",
                                        "handleChange": undefined,
                                        "handleClick": undefined,
                                        "id": "new-request-btn",
                                        "isRequired": "",
                                        "label": undefined,
                                        "name": undefined,
                                        "type": "submit",
                                        "value": "Submit",
                                      },
                                      "memoizedState": null,
                                      "mode": 0,
                                      "nextEffect": null,
                                      "pendingProps": Object {
                                        "className": "white auth-submit-btn",
                                        "handleChange": undefined,
                                        "handleClick": undefined,
                                        "id": "new-request-btn",
                                        "isRequired": "",
                                        "label": undefined,
                                        "name": undefined,
                                        "type": "submit",
                                        "value": "Submit",
                                      },
                                      "ref": null,
                                      "return": [Circular],
                                      "selfBaseDuration": 0,
                                      "sibling": null,
                                      "stateNode": null,
                                      "tag": 0,
                                      "treeBaseDuration": 0,
                                      "type": [Function],
                                      "updateQueue": null,
                                    },
                                    "stateNode": <textarea
                                      cols="40"
                                      id="detail"
                                      name="detail"
                                      required=""
                                      type="text"
                                    />,
                                    "tag": 7,
                                    "treeBaseDuration": 0,
                                    "type": "textarea",
                                    "updateQueue": null,
                                  },
                                  "stateNode": <label>
                                    <span>
                                      Description:
                                    </span>
                                  </label>,
                                  "tag": 7,
                                  "treeBaseDuration": 0,
                                  "type": "label",
                                  "updateQueue": null,
                                },
                                "stateNode": <br />,
                                "tag": 7,
                                "treeBaseDuration": 0,
                                "type": "br",
                                "updateQueue": null,
                              },
                              "stateNode": null,
                              "tag": 0,
                              "treeBaseDuration": 0,
                              "type": [Function],
                              "updateQueue": null,
                            },
                            "stateNode": <br />,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "br",
                            "updateQueue": null,
                          },
                          "stateNode": null,
                          "tag": 0,
                          "treeBaseDuration": 0,
                          "type": [Function],
                          "updateQueue": null,
                        },
                        "stateNode": <br />,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "br",
                        "updateQueue": null,
                      },
                      "stateNode": <select
                        class="transparent-selector"
                        id="type"
                        name="type"
                        required=""
                      >
                        <option
                          disabled=""
                          value=""
                        >
                          Select request type
                        </option>
                        <option
                          value="maintenance"
                        >
                          Maintenance
                        </option>
                        <option
                          value="repair"
                        >
                          Repair
                        </option>
                      </select>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "select",
                      "updateQueue": null,
                    },
                    "stateNode": <label
                      class="left orange center"
                      id="title"
                    >
                      Create a new request
                    </label>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "label",
                    "updateQueue": null,
                  },
                  "stateNode": null,
                  "tag": 0,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "stateNode": <span
                  class="close-btn grey right"
                  id="sign-up-form-close-btn"
                >
                  x
                </span>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "span",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <span
                    className="close-btn grey right"
                    id="sign-up-form-close-btn"
                  >
                    x
                  </span>,
                  <Input
                    className=""
                    id=""
                    isRequired=""
                    name="id"
                    type="hidden"
                  />,
                  <label
                    className="left orange center"
                    id="title"
                  >
                    Create a new request
                  </label>,
                  <select
                    className="transparent-selector"
                    id="type"
                    name="type"
                    onChange={[Function]}
                    required="required"
                    value=""
                  >
                    <option
                      disabled={true}
                      value=""
                    >
                      Select request type
                    </option>
                    <option
                      value="maintenance"
                    >
                      Maintenance
                    </option>
                    <option
                      value="repair"
                    >
                      Repair
                    </option>
                  </select>,
                  <br />,
                  <Input
                    className=""
                    handleChange={[Function]}
                    id="item"
                    isRequired="required"
                    label="Item:"
                    name="item"
                    type="text"
                    value=""
                  />,
                  <br />,
                  <Input
                    className=""
                    handleChange={[Function]}
                    id="model"
                    isRequired="required"
                    label="Model:"
                    name="model"
                    type="text"
                    value=""
                  />,
                  <br />,
                  <label>
                    <span>
                      Description:
                    </span>
                  </label>,
                  <textarea
                    cols="40"
                    id="detail"
                    name="detail"
                    onChange={[Function]}
                    required="required"
                    type="text"
                    value=""
                  />,
                  <Input
                    className="white auth-submit-btn"
                    id="new-request-btn"
                    isRequired=""
                    type="submit"
                    value="Submit"
                  />,
                ],
                "className": "form request-form",
                "id": "new-request-form",
                "onSubmit": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <span
                    className="close-btn grey right"
                    id="sign-up-form-close-btn"
                  >
                    x
                  </span>,
                  <Input
                    className=""
                    id=""
                    isRequired=""
                    name="id"
                    type="hidden"
                  />,
                  <label
                    className="left orange center"
                    id="title"
                  >
                    Create a new request
                  </label>,
                  <select
                    className="transparent-selector"
                    id="type"
                    name="type"
                    onChange={[Function]}
                    required="required"
                    value=""
                  >
                    <option
                      disabled={true}
                      value=""
                    >
                      Select request type
                    </option>
                    <option
                      value="maintenance"
                    >
                      Maintenance
                    </option>
                    <option
                      value="repair"
                    >
                      Repair
                    </option>
                  </select>,
                  <br />,
                  <Input
                    className=""
                    handleChange={[Function]}
                    id="item"
                    isRequired="required"
                    label="Item:"
                    name="item"
                    type="text"
                    value=""
                  />,
                  <br />,
                  <Input
                    className=""
                    handleChange={[Function]}
                    id="model"
                    isRequired="required"
                    label="Model:"
                    name="model"
                    type="text"
                    value=""
                  />,
                  <br />,
                  <label>
                    <span>
                      Description:
                    </span>
                  </label>,
                  <textarea
                    cols="40"
                    id="detail"
                    name="detail"
                    onChange={[Function]}
                    required="required"
                    type="text"
                    value=""
                  />,
                  <Input
                    className="white auth-submit-btn"
                    id="new-request-btn"
                    isRequired=""
                    type="submit"
                    value="Submit"
                  />,
                ],
                "className": "form request-form",
                "id": "new-request-form",
                "onSubmit": [Function],
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": <form
                class="form request-form"
                id="new-request-form"
              >
                <span
                  class="close-btn grey right"
                  id="sign-up-form-close-btn"
                >
                  x
                </span>
                <label
                  for="id"
                />
                <input
                  class=""
                  id=""
                  name="id"
                  type="hidden"
                  value=""
                />
                <label
                  class="left orange center"
                  id="title"
                >
                  Create a new request
                </label>
                <select
                  class="transparent-selector"
                  id="type"
                  name="type"
                  required=""
                >
                  <option
                    disabled=""
                    value=""
                  >
                    Select request type
                  </option>
                  <option
                    value="maintenance"
                  >
                    Maintenance
                  </option>
                  <option
                    value="repair"
                  >
                    Repair
                  </option>
                </select>
                <br />
                <label
                  for="item"
                >
                  Item:
                </label>
                <input
                  class=""
                  id="item"
                  name="item"
                  required=""
                  type="text"
                  value=""
                />
                <br />
                <label
                  for="model"
                >
                  Model:
                </label>
                <input
                  class=""
                  id="model"
                  name="model"
                  required=""
                  type="text"
                  value=""
                />
                <br />
                <label>
                  <span>
                    Description:
                  </span>
                </label>
                <textarea
                  cols="40"
                  id="detail"
                  name="detail"
                  required=""
                  type="text"
                />
                <label />
                <input
                  class="white auth-submit-btn"
                  id="new-request-btn"
                  type="submit"
                  value="Submit"
                />
              </form>,
              "tag": 7,
              "treeBaseDuration": 0,
              "type": "form",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "createRequest": undefined,
              "handleClose": undefined,
              "initialValues": undefined,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "updateRequest": undefined,
            },
            "memoizedState": Object {
              "detail": "",
              "id": undefined,
              "item": "",
              "model": "",
              "type": "",
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "createRequest": undefined,
              "handleClose": undefined,
              "initialValues": undefined,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "updateRequest": undefined,
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": RequestForm {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "handleChange": [Function],
              "handleSubmit": [Function],
              "props": Object {
                "createRequest": undefined,
                "handleClose": undefined,
                "initialValues": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "updateRequest": undefined,
              },
              "refs": Object {},
              "state": Object {
                "detail": "",
                "id": undefined,
                "item": "",
                "model": "",
                "type": "",
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "effectTag": 1,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "children": <RequestForm
              store={
                Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                }
              }
            />,
            "history": Object {
              "action": "POP",
              "block": [Function],
              "createHref": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            },
          },
          "memoizedState": Object {
            "match": Object {
              "isExact": true,
              "params": Object {},
              "path": "/",
              "url": "/",
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "children": <RequestForm
              store={
                Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                }
              }
            />,
            "history": Object {
              "action": "POP",
              "block": [Function],
              "createHref": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            },
          },
          "ref": null,
          "return": [Circular],
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": Router {
            "__reactInternalMemoizedMaskedChildContext": Object {
              "router": undefined,
            },
            "__reactInternalMemoizedMergedChildContext": Object {
              "router": Object {
                "history": Object {
                  "action": "POP",
                  "block": [Function],
                  "createHref": [Function],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                },
                "route": Object {
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "match": Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  },
                },
              },
            },
            "__reactInternalMemoizedUnmaskedChildContext": Object {},
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {
              "router": undefined,
            },
            "props": Object {
              "children": <RequestForm
                store={
                  Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  }
                }
              />,
              "history": Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              },
            },
            "refs": Object {},
            "state": Object {
              "match": Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              },
            },
            "unlisten": [Function],
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "childExpirationTime": 0,
        "effectTag": 1,
        "expirationTime": 0,
        "firstContextDependency": null,
        "firstEffect": null,
        "index": 0,
        "key": null,
        "lastEffect": null,
        "memoizedProps": Object {
          "children": <RequestForm
            store={
              Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              }
            }
          />,
        },
        "memoizedState": null,
        "mode": 0,
        "nextEffect": null,
        "pendingProps": Object {
          "children": <RequestForm
            store={
              Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              }
            }
          />,
        },
        "ref": null,
        "return": FiberNode {
          "_debugID": 49,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "effectTag": 1,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <RequestForm
                store={
                  Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  }
                }
              />,
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "children": <RequestForm
                store={
                  Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  }
                }
              />,
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <RequestForm
                store={
                  Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  }
                }
              />,
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 47,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 1,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <form
                    class="form request-form"
                    id="new-request-form"
                  >
                    <span
                      class="close-btn grey right"
                      id="sign-up-form-close-btn"
                    >
                      x
                    </span>
                    <label
                      for="id"
                    />
                    <input
                      class=""
                      id=""
                      name="id"
                      type="hidden"
                      value=""
                    />
                    <label
                      class="left orange center"
                      id="title"
                    >
                      Create a new request
                    </label>
                    <select
                      class="transparent-selector"
                      id="type"
                      name="type"
                      required=""
                    >
                      <option
                        disabled=""
                        value=""
                      >
                        Select request type
                      </option>
                      <option
                        value="maintenance"
                      >
                        Maintenance
                      </option>
                      <option
                        value="repair"
                      >
                        Repair
                      </option>
                    </select>
                    <br />
                    <label
                      for="item"
                    >
                      Item:
                    </label>
                    <input
                      class=""
                      id="item"
                      name="item"
                      required=""
                      type="text"
                      value=""
                    />
                    <br />
                    <label
                      for="model"
                    >
                      Model:
                    </label>
                    <input
                      class=""
                      id="model"
                      name="model"
                      required=""
                      type="text"
                      value=""
                    />
                    <br />
                    <label>
                      <span>
                        Description:
                      </span>
                    </label>
                    <textarea
                      cols="40"
                      id="detail"
                      name="detail"
                      required=""
                      type="text"
                    />
                    <label />
                    <input
                      class="white auth-submit-btn"
                      id="new-request-btn"
                      type="submit"
                      value="Submit"
                    />
                  </form>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "timeoutHandle": -1,
              },
              "tag": 5,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <RequestForm
                            store={
                              Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              }
                            }
                          />,
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <RequestForm
                            store={
                              Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              }
                            }
                          />,
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 32,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <form
                  class="form request-form"
                  id="new-request-form"
                >
                  <span
                    class="close-btn grey right"
                    id="sign-up-form-close-btn"
                  >
                    x
                  </span>
                  <label
                    for="id"
                  />
                  <input
                    class=""
                    id=""
                    name="id"
                    type="hidden"
                    value=""
                  />
                  <label
                    class="left orange center"
                    id="title"
                  >
                    Create a new request
                  </label>
                  <select
                    class="transparent-selector"
                    id="type"
                    name="type"
                    required=""
                  >
                    <option
                      disabled=""
                      value=""
                    >
                      Select request type
                    </option>
                    <option
                      value="maintenance"
                    >
                      Maintenance
                    </option>
                    <option
                      value="repair"
                    >
                      Repair
                    </option>
                  </select>
                  <br />
                  <label
                    for="item"
                  >
                    Item:
                  </label>
                  <input
                    class=""
                    id="item"
                    name="item"
                    required=""
                    type="text"
                    value=""
                  />
                  <br />
                  <label
                    for="model"
                  >
                    Model:
                  </label>
                  <input
                    class=""
                    id="model"
                    name="model"
                    required=""
                    type="text"
                    value=""
                  />
                  <br />
                  <label>
                    <span>
                      Description:
                    </span>
                  </label>
                  <textarea
                    cols="40"
                    id="detail"
                    name="detail"
                    required=""
                    type="text"
                  />
                  <label />
                  <input
                    class="white auth-submit-btn"
                    id="new-request-btn"
                    type="submit"
                    value="Submit"
                  />
                </form>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 12,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "timeoutHandle": -1,
            },
            "tag": 5,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    }
                  }
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <RequestForm
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                />,
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <RequestForm
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                />,
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "selfBaseDuration": 0,
        "sibling": null,
        "stateNode": [Circular],
        "tag": 2,
        "treeBaseDuration": 0,
        "type": [Function],
        "updateQueue": null,
      },
      "_reactInternalInstance": Object {},
      "context": Object {},
      "history": Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      },
      "props": Object {
        "children": <RequestForm
          store={
            Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            }
          }
        />,
      },
      "refs": Object {},
      "state": null,
      "updater": Object {
        "enqueueForceUpdate": [Function],
        "enqueueReplaceState": [Function],
        "enqueueSetState": [Function],
        "isMounted": [Function],
      },
    },
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <RequestForm
        store={
          Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
      />,
    },
    "ref": null,
    "rendered": Object {
      "instance": Router {
        "__reactInternalMemoizedMaskedChildContext": Object {
          "router": undefined,
        },
        "__reactInternalMemoizedMergedChildContext": Object {
          "router": Object {
            "history": Object {
              "action": "POP",
              "block": [Function],
              "createHref": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            },
            "route": Object {
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "match": Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              },
            },
          },
        },
        "__reactInternalMemoizedUnmaskedChildContext": Object {},
        "_reactInternalFiber": FiberNode {
          "_debugID": 51,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": FiberNode {
            "_debugID": 50,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": FiberNode {
              "_debugID": 49,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
              },
              "memoizedState": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": [Circular],
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 1,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": null,
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <form
                        class="form request-form"
                        id="new-request-form"
                      >
                        <span
                          class="close-btn grey right"
                          id="sign-up-form-close-btn"
                        >
                          x
                        </span>
                        <label
                          for="id"
                        />
                        <input
                          class=""
                          id=""
                          name="id"
                          type="hidden"
                          value=""
                        />
                        <label
                          class="left orange center"
                          id="title"
                        >
                          Create a new request
                        </label>
                        <select
                          class="transparent-selector"
                          id="type"
                          name="type"
                          required=""
                        >
                          <option
                            disabled=""
                            value=""
                          >
                            Select request type
                          </option>
                          <option
                            value="maintenance"
                          >
                            Maintenance
                          </option>
                          <option
                            value="repair"
                          >
                            Repair
                          </option>
                        </select>
                        <br />
                        <label
                          for="item"
                        >
                          Item:
                        </label>
                        <input
                          class=""
                          id="item"
                          name="item"
                          required=""
                          type="text"
                          value=""
                        />
                        <br />
                        <label
                          for="model"
                        >
                          Model:
                        </label>
                        <input
                          class=""
                          id="model"
                          name="model"
                          required=""
                          type="text"
                          value=""
                        />
                        <br />
                        <label>
                          <span>
                            Description:
                          </span>
                        </label>
                        <textarea
                          cols="40"
                          id="detail"
                          name="detail"
                          required=""
                          type="text"
                        />
                        <label />
                        <input
                          class="white auth-submit-btn"
                          id="new-request-btn"
                          type="submit"
                          value="Submit"
                        />
                      </form>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": null,
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": Object {
                      "callback": null,
                      "expirationTime": 1,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <RequestForm
                                store={
                                  Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  }
                                }
                              />,
                            }
                          }
                        />,
                      },
                      "tag": 0,
                    },
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": Object {
                      "callback": null,
                      "expirationTime": 1,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <RequestForm
                                store={
                                  Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  }
                                }
                              />,
                            }
                          }
                        />,
                      },
                      "tag": 0,
                    },
                  },
                },
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 32,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": null,
                "memoizedState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      }
                    }
                  />,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <form
                      class="form request-form"
                      id="new-request-form"
                    >
                      <span
                        class="close-btn grey right"
                        id="sign-up-form-close-btn"
                      >
                        x
                      </span>
                      <label
                        for="id"
                      />
                      <input
                        class=""
                        id=""
                        name="id"
                        type="hidden"
                        value=""
                      />
                      <label
                        class="left orange center"
                        id="title"
                      >
                        Create a new request
                      </label>
                      <select
                        class="transparent-selector"
                        id="type"
                        name="type"
                        required=""
                      >
                        <option
                          disabled=""
                          value=""
                        >
                          Select request type
                        </option>
                        <option
                          value="maintenance"
                        >
                          Maintenance
                        </option>
                        <option
                          value="repair"
                        >
                          Repair
                        </option>
                      </select>
                      <br />
                      <label
                        for="item"
                      >
                        Item:
                      </label>
                      <input
                        class=""
                        id="item"
                        name="item"
                        required=""
                        type="text"
                        value=""
                      />
                      <br />
                      <label
                        for="model"
                      >
                        Model:
                      </label>
                      <input
                        class=""
                        id="model"
                        name="model"
                        required=""
                        type="text"
                        value=""
                      />
                      <br />
                      <label>
                        <span>
                          Description:
                        </span>
                      </label>
                      <textarea
                        cols="40"
                        id="detail"
                        name="detail"
                        required=""
                        type="text"
                      />
                      <label />
                      <input
                        class="white auth-submit-btn"
                        id="new-request-btn"
                        type="submit"
                        value="Submit"
                      />
                    </form>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "timeoutHandle": -1,
                },
                "tag": 5,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <RequestForm
                            store={
                              Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              }
                            }
                          />,
                        }
                      }
                    />,
                  },
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": null,
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": null,
                },
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": WrapperComponent {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                },
                "refs": Object {},
                "state": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": <RequestForm
                store={
                  Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  }
                }
              />,
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": <RequestForm
                store={
                  Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  }
                }
              />,
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 49,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
              },
              "memoizedState": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": [Circular],
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 1,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": null,
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <form
                        class="form request-form"
                        id="new-request-form"
                      >
                        <span
                          class="close-btn grey right"
                          id="sign-up-form-close-btn"
                        >
                          x
                        </span>
                        <label
                          for="id"
                        />
                        <input
                          class=""
                          id=""
                          name="id"
                          type="hidden"
                          value=""
                        />
                        <label
                          class="left orange center"
                          id="title"
                        >
                          Create a new request
                        </label>
                        <select
                          class="transparent-selector"
                          id="type"
                          name="type"
                          required=""
                        >
                          <option
                            disabled=""
                            value=""
                          >
                            Select request type
                          </option>
                          <option
                            value="maintenance"
                          >
                            Maintenance
                          </option>
                          <option
                            value="repair"
                          >
                            Repair
                          </option>
                        </select>
                        <br />
                        <label
                          for="item"
                        >
                          Item:
                        </label>
                        <input
                          class=""
                          id="item"
                          name="item"
                          required=""
                          type="text"
                          value=""
                        />
                        <br />
                        <label
                          for="model"
                        >
                          Model:
                        </label>
                        <input
                          class=""
                          id="model"
                          name="model"
                          required=""
                          type="text"
                          value=""
                        />
                        <br />
                        <label>
                          <span>
                            Description:
                          </span>
                        </label>
                        <textarea
                          cols="40"
                          id="detail"
                          name="detail"
                          required=""
                          type="text"
                        />
                        <label />
                        <input
                          class="white auth-submit-btn"
                          id="new-request-btn"
                          type="submit"
                          value="Submit"
                        />
                      </form>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": null,
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": Object {
                      "callback": null,
                      "expirationTime": 1,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <RequestForm
                                store={
                                  Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  }
                                }
                              />,
                            }
                          }
                        />,
                      },
                      "tag": 0,
                    },
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": Object {
                      "callback": null,
                      "expirationTime": 1,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <RequestForm
                                store={
                                  Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  }
                                }
                              />,
                            }
                          }
                        />,
                      },
                      "tag": 0,
                    },
                  },
                },
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 32,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": null,
                "memoizedState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      }
                    }
                  />,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <form
                      class="form request-form"
                      id="new-request-form"
                    >
                      <span
                        class="close-btn grey right"
                        id="sign-up-form-close-btn"
                      >
                        x
                      </span>
                      <label
                        for="id"
                      />
                      <input
                        class=""
                        id=""
                        name="id"
                        type="hidden"
                        value=""
                      />
                      <label
                        class="left orange center"
                        id="title"
                      >
                        Create a new request
                      </label>
                      <select
                        class="transparent-selector"
                        id="type"
                        name="type"
                        required=""
                      >
                        <option
                          disabled=""
                          value=""
                        >
                          Select request type
                        </option>
                        <option
                          value="maintenance"
                        >
                          Maintenance
                        </option>
                        <option
                          value="repair"
                        >
                          Repair
                        </option>
                      </select>
                      <br />
                      <label
                        for="item"
                      >
                        Item:
                      </label>
                      <input
                        class=""
                        id="item"
                        name="item"
                        required=""
                        type="text"
                        value=""
                      />
                      <br />
                      <label
                        for="model"
                      >
                        Model:
                      </label>
                      <input
                        class=""
                        id="model"
                        name="model"
                        required=""
                        type="text"
                        value=""
                      />
                      <br />
                      <label>
                        <span>
                          Description:
                        </span>
                      </label>
                      <textarea
                        cols="40"
                        id="detail"
                        name="detail"
                        required=""
                        type="text"
                      />
                      <label />
                      <input
                        class="white auth-submit-btn"
                        id="new-request-btn"
                        type="submit"
                        value="Submit"
                      />
                    </form>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "timeoutHandle": -1,
                },
                "tag": 5,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <RequestForm
                            store={
                              Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              }
                            }
                          />,
                        }
                      }
                    />,
                  },
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": null,
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": null,
                },
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": WrapperComponent {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                },
                "refs": Object {},
                "state": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": BrowserRouter {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "history": Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              },
              "props": Object {
                "children": <RequestForm
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                />,
              },
              "refs": Object {},
              "state": null,
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 52,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 53,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 54,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": "x",
                  "className": "close-btn grey right",
                  "id": "sign-up-form-close-btn",
                  "onClick": undefined,
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": "x",
                  "className": "close-btn grey right",
                  "id": "sign-up-form-close-btn",
                  "onClick": undefined,
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugID": 55,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 66,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": undefined,
                      "htmlFor": "id",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": undefined,
                      "htmlFor": "id",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 67,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "className": "",
                        "id": "",
                        "name": "id",
                        "onChange": undefined,
                        "onClick": undefined,
                        "required": "",
                        "type": "hidden",
                        "value": undefined,
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "className": "",
                        "id": "",
                        "name": "id",
                        "onChange": undefined,
                        "onClick": undefined,
                        "required": "",
                        "type": "hidden",
                        "value": undefined,
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <input
                        class=""
                        id=""
                        name="id"
                        type="hidden"
                        value=""
                      />,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "input",
                      "updateQueue": null,
                    },
                    "stateNode": <label
                      for="id"
                    />,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "label",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "className": "",
                    "handleChange": undefined,
                    "handleClick": undefined,
                    "id": "",
                    "isRequired": "",
                    "label": undefined,
                    "name": "id",
                    "type": "hidden",
                    "value": undefined,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "className": "",
                    "handleChange": undefined,
                    "handleClick": undefined,
                    "id": "",
                    "isRequired": "",
                    "label": undefined,
                    "name": "id",
                    "type": "hidden",
                    "value": undefined,
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 2,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": "Create a new request",
                      "className": "left orange center",
                      "id": "title",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": "Create a new request",
                      "className": "left orange center",
                      "id": "title",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 57,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 68,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Select request type",
                          "disabled": true,
                          "value": "",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Select request type",
                          "disabled": true,
                          "value": "",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 69,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "Maintenance",
                            "value": "maintenance",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "Maintenance",
                            "value": "maintenance",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 70,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 2,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": "Repair",
                              "value": "repair",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": "Repair",
                              "value": "repair",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <option
                              value="repair"
                            >
                              Repair
                            </option>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "option",
                            "updateQueue": null,
                          },
                          "stateNode": <option
                            value="maintenance"
                          >
                            Maintenance
                          </option>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "option",
                          "updateQueue": null,
                        },
                        "stateNode": <option
                          disabled=""
                          value=""
                        >
                          Select request type
                        </option>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "option",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 3,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <option
                            disabled={true}
                            value=""
                          >
                            Select request type
                          </option>,
                          <option
                            value="maintenance"
                          >
                            Maintenance
                          </option>,
                          <option
                            value="repair"
                          >
                            Repair
                          </option>,
                        ],
                        "className": "transparent-selector",
                        "id": "type",
                        "name": "type",
                        "onChange": [Function],
                        "required": "required",
                        "value": "",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <option
                            disabled={true}
                            value=""
                          >
                            Select request type
                          </option>,
                          <option
                            value="maintenance"
                          >
                            Maintenance
                          </option>,
                          <option
                            value="repair"
                          >
                            Repair
                          </option>,
                        ],
                        "className": "transparent-selector",
                        "id": "type",
                        "name": "type",
                        "onChange": [Function],
                        "required": "required",
                        "value": "",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 4,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {},
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {},
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 59,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 71,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": "Item:",
                              "htmlFor": "item",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": "Item:",
                              "htmlFor": "item",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 72,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "className": "",
                                "id": "item",
                                "name": "item",
                                "onChange": [Function],
                                "onClick": undefined,
                                "required": "required",
                                "type": "text",
                                "value": "",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "className": "",
                                "id": "item",
                                "name": "item",
                                "onChange": [Function],
                                "onClick": undefined,
                                "required": "required",
                                "type": "text",
                                "value": "",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <input
                                class=""
                                id="item"
                                name="item"
                                required=""
                                type="text"
                                value=""
                              />,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "input",
                              "updateQueue": null,
                            },
                            "stateNode": <label
                              for="item"
                            >
                              Item:
                            </label>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "label",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "effectTag": 1,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 5,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "className": "",
                            "handleChange": [Function],
                            "handleClick": undefined,
                            "id": "item",
                            "isRequired": "required",
                            "label": "Item:",
                            "name": "item",
                            "type": "text",
                            "value": "",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "className": "",
                            "handleChange": [Function],
                            "handleClick": undefined,
                            "id": "item",
                            "isRequired": "required",
                            "label": "Item:",
                            "name": "item",
                            "type": "text",
                            "value": "",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 6,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {},
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {},
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 61,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugID": 73,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": "Model:",
                                  "htmlFor": "model",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": "Model:",
                                  "htmlFor": "model",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugID": 74,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 1,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "className": "",
                                    "id": "model",
                                    "name": "model",
                                    "onChange": [Function],
                                    "onClick": undefined,
                                    "required": "required",
                                    "type": "text",
                                    "value": "",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "className": "",
                                    "id": "model",
                                    "name": "model",
                                    "onChange": [Function],
                                    "onClick": undefined,
                                    "required": "required",
                                    "type": "text",
                                    "value": "",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode": <input
                                    class=""
                                    id="model"
                                    name="model"
                                    required=""
                                    type="text"
                                    value=""
                                  />,
                                  "tag": 7,
                                  "treeBaseDuration": 0,
                                  "type": "input",
                                  "updateQueue": null,
                                },
                                "stateNode": <label
                                  for="model"
                                >
                                  Model:
                                </label>,
                                "tag": 7,
                                "treeBaseDuration": 0,
                                "type": "label",
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "effectTag": 1,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 7,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "className": "",
                                "handleChange": [Function],
                                "handleClick": undefined,
                                "id": "model",
                                "isRequired": "required",
                                "label": "Model:",
                                "name": "model",
                                "type": "text",
                                "value": "",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "className": "",
                                "handleChange": [Function],
                                "handleClick": undefined,
                                "id": "model",
                                "isRequired": "required",
                                "label": "Model:",
                                "name": "model",
                                "type": "text",
                                "value": "",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 62,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 8,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {},
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {},
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugID": 63,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": FiberNode {
                                    "_debugID": 75,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": null,
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "effectTag": 0,
                                    "expirationTime": 0,
                                    "firstContextDependency": null,
                                    "firstEffect": null,
                                    "index": 0,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "children": "Description:",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "children": "Description:",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode": <span>
                                      Description:
                                    </span>,
                                    "tag": 7,
                                    "treeBaseDuration": 0,
                                    "type": "span",
                                    "updateQueue": null,
                                  },
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 9,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "children": <span>
                                      Description:
                                    </span>,
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "children": <span>
                                      Description:
                                    </span>,
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugID": 64,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": null,
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "effectTag": 0,
                                    "expirationTime": 0,
                                    "firstContextDependency": null,
                                    "firstEffect": null,
                                    "index": 10,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "cols": "40",
                                      "id": "detail",
                                      "name": "detail",
                                      "onChange": [Function],
                                      "required": "required",
                                      "type": "text",
                                      "value": "",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "cols": "40",
                                      "id": "detail",
                                      "name": "detail",
                                      "onChange": [Function],
                                      "required": "required",
                                      "type": "text",
                                      "value": "",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": FiberNode {
                                      "_debugID": 65,
                                      "_debugIsCurrentlyTiming": false,
                                      "_debugOwner": [Circular],
                                      "_debugSource": null,
                                      "actualDuration": 0,
                                      "actualStartTime": -1,
                                      "alternate": null,
                                      "child": FiberNode {
                                        "_debugID": 76,
                                        "_debugIsCurrentlyTiming": false,
                                        "_debugOwner": [Circular],
                                        "_debugSource": null,
                                        "actualDuration": 0,
                                        "actualStartTime": -1,
                                        "alternate": null,
                                        "child": null,
                                        "childExpirationTime": 0,
                                        "effectTag": 0,
                                        "expirationTime": 0,
                                        "firstContextDependency": null,
                                        "firstEffect": null,
                                        "index": 0,
                                        "key": null,
                                        "lastEffect": null,
                                        "memoizedProps": Object {
                                          "children": undefined,
                                          "htmlFor": undefined,
                                        },
                                        "memoizedState": null,
                                        "mode": 0,
                                        "nextEffect": null,
                                        "pendingProps": Object {
                                          "children": undefined,
                                          "htmlFor": undefined,
                                        },
                                        "ref": null,
                                        "return": [Circular],
                                        "selfBaseDuration": 0,
                                        "sibling": FiberNode {
                                          "_debugID": 77,
                                          "_debugIsCurrentlyTiming": false,
                                          "_debugOwner": [Circular],
                                          "_debugSource": null,
                                          "actualDuration": 0,
                                          "actualStartTime": -1,
                                          "alternate": null,
                                          "child": null,
                                          "childExpirationTime": 0,
                                          "effectTag": 0,
                                          "expirationTime": 0,
                                          "firstContextDependency": null,
                                          "firstEffect": null,
                                          "index": 1,
                                          "key": null,
                                          "lastEffect": null,
                                          "memoizedProps": Object {
                                            "className": "white auth-submit-btn",
                                            "id": "new-request-btn",
                                            "name": undefined,
                                            "onChange": undefined,
                                            "onClick": undefined,
                                            "required": "",
                                            "type": "submit",
                                            "value": "Submit",
                                          },
                                          "memoizedState": null,
                                          "mode": 0,
                                          "nextEffect": null,
                                          "pendingProps": Object {
                                            "className": "white auth-submit-btn",
                                            "id": "new-request-btn",
                                            "name": undefined,
                                            "onChange": undefined,
                                            "onClick": undefined,
                                            "required": "",
                                            "type": "submit",
                                            "value": "Submit",
                                          },
                                          "ref": null,
                                          "return": [Circular],
                                          "selfBaseDuration": 0,
                                          "sibling": null,
                                          "stateNode": <input
                                            class="white auth-submit-btn"
                                            id="new-request-btn"
                                            type="submit"
                                            value="Submit"
                                          />,
                                          "tag": 7,
                                          "treeBaseDuration": 0,
                                          "type": "input",
                                          "updateQueue": null,
                                        },
                                        "stateNode": <label />,
                                        "tag": 7,
                                        "treeBaseDuration": 0,
                                        "type": "label",
                                        "updateQueue": null,
                                      },
                                      "childExpirationTime": 0,
                                      "effectTag": 1,
                                      "expirationTime": 0,
                                      "firstContextDependency": null,
                                      "firstEffect": null,
                                      "index": 11,
                                      "key": null,
                                      "lastEffect": null,
                                      "memoizedProps": Object {
                                        "className": "white auth-submit-btn",
                                        "handleChange": undefined,
                                        "handleClick": undefined,
                                        "id": "new-request-btn",
                                        "isRequired": "",
                                        "label": undefined,
                                        "name": undefined,
                                        "type": "submit",
                                        "value": "Submit",
                                      },
                                      "memoizedState": null,
                                      "mode": 0,
                                      "nextEffect": null,
                                      "pendingProps": Object {
                                        "className": "white auth-submit-btn",
                                        "handleChange": undefined,
                                        "handleClick": undefined,
                                        "id": "new-request-btn",
                                        "isRequired": "",
                                        "label": undefined,
                                        "name": undefined,
                                        "type": "submit",
                                        "value": "Submit",
                                      },
                                      "ref": null,
                                      "return": [Circular],
                                      "selfBaseDuration": 0,
                                      "sibling": null,
                                      "stateNode": null,
                                      "tag": 0,
                                      "treeBaseDuration": 0,
                                      "type": [Function],
                                      "updateQueue": null,
                                    },
                                    "stateNode": <textarea
                                      cols="40"
                                      id="detail"
                                      name="detail"
                                      required=""
                                      type="text"
                                    />,
                                    "tag": 7,
                                    "treeBaseDuration": 0,
                                    "type": "textarea",
                                    "updateQueue": null,
                                  },
                                  "stateNode": <label>
                                    <span>
                                      Description:
                                    </span>
                                  </label>,
                                  "tag": 7,
                                  "treeBaseDuration": 0,
                                  "type": "label",
                                  "updateQueue": null,
                                },
                                "stateNode": <br />,
                                "tag": 7,
                                "treeBaseDuration": 0,
                                "type": "br",
                                "updateQueue": null,
                              },
                              "stateNode": null,
                              "tag": 0,
                              "treeBaseDuration": 0,
                              "type": [Function],
                              "updateQueue": null,
                            },
                            "stateNode": <br />,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "br",
                            "updateQueue": null,
                          },
                          "stateNode": null,
                          "tag": 0,
                          "treeBaseDuration": 0,
                          "type": [Function],
                          "updateQueue": null,
                        },
                        "stateNode": <br />,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "br",
                        "updateQueue": null,
                      },
                      "stateNode": <select
                        class="transparent-selector"
                        id="type"
                        name="type"
                        required=""
                      >
                        <option
                          disabled=""
                          value=""
                        >
                          Select request type
                        </option>
                        <option
                          value="maintenance"
                        >
                          Maintenance
                        </option>
                        <option
                          value="repair"
                        >
                          Repair
                        </option>
                      </select>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "select",
                      "updateQueue": null,
                    },
                    "stateNode": <label
                      class="left orange center"
                      id="title"
                    >
                      Create a new request
                    </label>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "label",
                    "updateQueue": null,
                  },
                  "stateNode": null,
                  "tag": 0,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "stateNode": <span
                  class="close-btn grey right"
                  id="sign-up-form-close-btn"
                >
                  x
                </span>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "span",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <span
                    className="close-btn grey right"
                    id="sign-up-form-close-btn"
                  >
                    x
                  </span>,
                  <Input
                    className=""
                    id=""
                    isRequired=""
                    name="id"
                    type="hidden"
                  />,
                  <label
                    className="left orange center"
                    id="title"
                  >
                    Create a new request
                  </label>,
                  <select
                    className="transparent-selector"
                    id="type"
                    name="type"
                    onChange={[Function]}
                    required="required"
                    value=""
                  >
                    <option
                      disabled={true}
                      value=""
                    >
                      Select request type
                    </option>
                    <option
                      value="maintenance"
                    >
                      Maintenance
                    </option>
                    <option
                      value="repair"
                    >
                      Repair
                    </option>
                  </select>,
                  <br />,
                  <Input
                    className=""
                    handleChange={[Function]}
                    id="item"
                    isRequired="required"
                    label="Item:"
                    name="item"
                    type="text"
                    value=""
                  />,
                  <br />,
                  <Input
                    className=""
                    handleChange={[Function]}
                    id="model"
                    isRequired="required"
                    label="Model:"
                    name="model"
                    type="text"
                    value=""
                  />,
                  <br />,
                  <label>
                    <span>
                      Description:
                    </span>
                  </label>,
                  <textarea
                    cols="40"
                    id="detail"
                    name="detail"
                    onChange={[Function]}
                    required="required"
                    type="text"
                    value=""
                  />,
                  <Input
                    className="white auth-submit-btn"
                    id="new-request-btn"
                    isRequired=""
                    type="submit"
                    value="Submit"
                  />,
                ],
                "className": "form request-form",
                "id": "new-request-form",
                "onSubmit": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <span
                    className="close-btn grey right"
                    id="sign-up-form-close-btn"
                  >
                    x
                  </span>,
                  <Input
                    className=""
                    id=""
                    isRequired=""
                    name="id"
                    type="hidden"
                  />,
                  <label
                    className="left orange center"
                    id="title"
                  >
                    Create a new request
                  </label>,
                  <select
                    className="transparent-selector"
                    id="type"
                    name="type"
                    onChange={[Function]}
                    required="required"
                    value=""
                  >
                    <option
                      disabled={true}
                      value=""
                    >
                      Select request type
                    </option>
                    <option
                      value="maintenance"
                    >
                      Maintenance
                    </option>
                    <option
                      value="repair"
                    >
                      Repair
                    </option>
                  </select>,
                  <br />,
                  <Input
                    className=""
                    handleChange={[Function]}
                    id="item"
                    isRequired="required"
                    label="Item:"
                    name="item"
                    type="text"
                    value=""
                  />,
                  <br />,
                  <Input
                    className=""
                    handleChange={[Function]}
                    id="model"
                    isRequired="required"
                    label="Model:"
                    name="model"
                    type="text"
                    value=""
                  />,
                  <br />,
                  <label>
                    <span>
                      Description:
                    </span>
                  </label>,
                  <textarea
                    cols="40"
                    id="detail"
                    name="detail"
                    onChange={[Function]}
                    required="required"
                    type="text"
                    value=""
                  />,
                  <Input
                    className="white auth-submit-btn"
                    id="new-request-btn"
                    isRequired=""
                    type="submit"
                    value="Submit"
                  />,
                ],
                "className": "form request-form",
                "id": "new-request-form",
                "onSubmit": [Function],
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": <form
                class="form request-form"
                id="new-request-form"
              >
                <span
                  class="close-btn grey right"
                  id="sign-up-form-close-btn"
                >
                  x
                </span>
                <label
                  for="id"
                />
                <input
                  class=""
                  id=""
                  name="id"
                  type="hidden"
                  value=""
                />
                <label
                  class="left orange center"
                  id="title"
                >
                  Create a new request
                </label>
                <select
                  class="transparent-selector"
                  id="type"
                  name="type"
                  required=""
                >
                  <option
                    disabled=""
                    value=""
                  >
                    Select request type
                  </option>
                  <option
                    value="maintenance"
                  >
                    Maintenance
                  </option>
                  <option
                    value="repair"
                  >
                    Repair
                  </option>
                </select>
                <br />
                <label
                  for="item"
                >
                  Item:
                </label>
                <input
                  class=""
                  id="item"
                  name="item"
                  required=""
                  type="text"
                  value=""
                />
                <br />
                <label
                  for="model"
                >
                  Model:
                </label>
                <input
                  class=""
                  id="model"
                  name="model"
                  required=""
                  type="text"
                  value=""
                />
                <br />
                <label>
                  <span>
                    Description:
                  </span>
                </label>
                <textarea
                  cols="40"
                  id="detail"
                  name="detail"
                  required=""
                  type="text"
                />
                <label />
                <input
                  class="white auth-submit-btn"
                  id="new-request-btn"
                  type="submit"
                  value="Submit"
                />
              </form>,
              "tag": 7,
              "treeBaseDuration": 0,
              "type": "form",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "createRequest": undefined,
              "handleClose": undefined,
              "initialValues": undefined,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "updateRequest": undefined,
            },
            "memoizedState": Object {
              "detail": "",
              "id": undefined,
              "item": "",
              "model": "",
              "type": "",
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "createRequest": undefined,
              "handleClose": undefined,
              "initialValues": undefined,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "updateRequest": undefined,
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": RequestForm {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "handleChange": [Function],
              "handleSubmit": [Function],
              "props": Object {
                "createRequest": undefined,
                "handleClose": undefined,
                "initialValues": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "updateRequest": undefined,
              },
              "refs": Object {},
              "state": Object {
                "detail": "",
                "id": undefined,
                "item": "",
                "model": "",
                "type": "",
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "effectTag": 1,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "children": <RequestForm
              store={
                Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                }
              }
            />,
            "history": Object {
              "action": "POP",
              "block": [Function],
              "createHref": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            },
          },
          "memoizedState": Object {
            "match": Object {
              "isExact": true,
              "params": Object {},
              "path": "/",
              "url": "/",
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "children": <RequestForm
              store={
                Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                }
              }
            />,
            "history": Object {
              "action": "POP",
              "block": [Function],
              "createHref": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 50,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": FiberNode {
              "_debugID": 49,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
              },
              "memoizedState": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": [Circular],
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 1,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": null,
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <form
                        class="form request-form"
                        id="new-request-form"
                      >
                        <span
                          class="close-btn grey right"
                          id="sign-up-form-close-btn"
                        >
                          x
                        </span>
                        <label
                          for="id"
                        />
                        <input
                          class=""
                          id=""
                          name="id"
                          type="hidden"
                          value=""
                        />
                        <label
                          class="left orange center"
                          id="title"
                        >
                          Create a new request
                        </label>
                        <select
                          class="transparent-selector"
                          id="type"
                          name="type"
                          required=""
                        >
                          <option
                            disabled=""
                            value=""
                          >
                            Select request type
                          </option>
                          <option
                            value="maintenance"
                          >
                            Maintenance
                          </option>
                          <option
                            value="repair"
                          >
                            Repair
                          </option>
                        </select>
                        <br />
                        <label
                          for="item"
                        >
                          Item:
                        </label>
                        <input
                          class=""
                          id="item"
                          name="item"
                          required=""
                          type="text"
                          value=""
                        />
                        <br />
                        <label
                          for="model"
                        >
                          Model:
                        </label>
                        <input
                          class=""
                          id="model"
                          name="model"
                          required=""
                          type="text"
                          value=""
                        />
                        <br />
                        <label>
                          <span>
                            Description:
                          </span>
                        </label>
                        <textarea
                          cols="40"
                          id="detail"
                          name="detail"
                          required=""
                          type="text"
                        />
                        <label />
                        <input
                          class="white auth-submit-btn"
                          id="new-request-btn"
                          type="submit"
                          value="Submit"
                        />
                      </form>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": null,
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": Object {
                      "callback": null,
                      "expirationTime": 1,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <RequestForm
                                store={
                                  Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  }
                                }
                              />,
                            }
                          }
                        />,
                      },
                      "tag": 0,
                    },
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": Object {
                      "callback": null,
                      "expirationTime": 1,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <RequestForm
                                store={
                                  Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  }
                                }
                              />,
                            }
                          }
                        />,
                      },
                      "tag": 0,
                    },
                  },
                },
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 32,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": null,
                "memoizedState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      }
                    }
                  />,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <form
                      class="form request-form"
                      id="new-request-form"
                    >
                      <span
                        class="close-btn grey right"
                        id="sign-up-form-close-btn"
                      >
                        x
                      </span>
                      <label
                        for="id"
                      />
                      <input
                        class=""
                        id=""
                        name="id"
                        type="hidden"
                        value=""
                      />
                      <label
                        class="left orange center"
                        id="title"
                      >
                        Create a new request
                      </label>
                      <select
                        class="transparent-selector"
                        id="type"
                        name="type"
                        required=""
                      >
                        <option
                          disabled=""
                          value=""
                        >
                          Select request type
                        </option>
                        <option
                          value="maintenance"
                        >
                          Maintenance
                        </option>
                        <option
                          value="repair"
                        >
                          Repair
                        </option>
                      </select>
                      <br />
                      <label
                        for="item"
                      >
                        Item:
                      </label>
                      <input
                        class=""
                        id="item"
                        name="item"
                        required=""
                        type="text"
                        value=""
                      />
                      <br />
                      <label
                        for="model"
                      >
                        Model:
                      </label>
                      <input
                        class=""
                        id="model"
                        name="model"
                        required=""
                        type="text"
                        value=""
                      />
                      <br />
                      <label>
                        <span>
                          Description:
                        </span>
                      </label>
                      <textarea
                        cols="40"
                        id="detail"
                        name="detail"
                        required=""
                        type="text"
                      />
                      <label />
                      <input
                        class="white auth-submit-btn"
                        id="new-request-btn"
                        type="submit"
                        value="Submit"
                      />
                    </form>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "timeoutHandle": -1,
                },
                "tag": 5,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <RequestForm
                            store={
                              Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              }
                            }
                          />,
                        }
                      }
                    />,
                  },
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": null,
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": null,
                },
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": WrapperComponent {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                },
                "refs": Object {},
                "state": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": <RequestForm
                store={
                  Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  }
                }
              />,
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": <RequestForm
                store={
                  Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  }
                }
              />,
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 49,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
              },
              "memoizedState": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": [Circular],
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 1,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": null,
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <form
                        class="form request-form"
                        id="new-request-form"
                      >
                        <span
                          class="close-btn grey right"
                          id="sign-up-form-close-btn"
                        >
                          x
                        </span>
                        <label
                          for="id"
                        />
                        <input
                          class=""
                          id=""
                          name="id"
                          type="hidden"
                          value=""
                        />
                        <label
                          class="left orange center"
                          id="title"
                        >
                          Create a new request
                        </label>
                        <select
                          class="transparent-selector"
                          id="type"
                          name="type"
                          required=""
                        >
                          <option
                            disabled=""
                            value=""
                          >
                            Select request type
                          </option>
                          <option
                            value="maintenance"
                          >
                            Maintenance
                          </option>
                          <option
                            value="repair"
                          >
                            Repair
                          </option>
                        </select>
                        <br />
                        <label
                          for="item"
                        >
                          Item:
                        </label>
                        <input
                          class=""
                          id="item"
                          name="item"
                          required=""
                          type="text"
                          value=""
                        />
                        <br />
                        <label
                          for="model"
                        >
                          Model:
                        </label>
                        <input
                          class=""
                          id="model"
                          name="model"
                          required=""
                          type="text"
                          value=""
                        />
                        <br />
                        <label>
                          <span>
                            Description:
                          </span>
                        </label>
                        <textarea
                          cols="40"
                          id="detail"
                          name="detail"
                          required=""
                          type="text"
                        />
                        <label />
                        <input
                          class="white auth-submit-btn"
                          id="new-request-btn"
                          type="submit"
                          value="Submit"
                        />
                      </form>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": null,
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": Object {
                      "callback": null,
                      "expirationTime": 1,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <RequestForm
                                store={
                                  Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  }
                                }
                              />,
                            }
                          }
                        />,
                      },
                      "tag": 0,
                    },
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": Object {
                      "callback": null,
                      "expirationTime": 1,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <RequestForm
                                store={
                                  Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  }
                                }
                              />,
                            }
                          }
                        />,
                      },
                      "tag": 0,
                    },
                  },
                },
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 32,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": null,
                "memoizedState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      }
                    }
                  />,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <form
                      class="form request-form"
                      id="new-request-form"
                    >
                      <span
                        class="close-btn grey right"
                        id="sign-up-form-close-btn"
                      >
                        x
                      </span>
                      <label
                        for="id"
                      />
                      <input
                        class=""
                        id=""
                        name="id"
                        type="hidden"
                        value=""
                      />
                      <label
                        class="left orange center"
                        id="title"
                      >
                        Create a new request
                      </label>
                      <select
                        class="transparent-selector"
                        id="type"
                        name="type"
                        required=""
                      >
                        <option
                          disabled=""
                          value=""
                        >
                          Select request type
                        </option>
                        <option
                          value="maintenance"
                        >
                          Maintenance
                        </option>
                        <option
                          value="repair"
                        >
                          Repair
                        </option>
                      </select>
                      <br />
                      <label
                        for="item"
                      >
                        Item:
                      </label>
                      <input
                        class=""
                        id="item"
                        name="item"
                        required=""
                        type="text"
                        value=""
                      />
                      <br />
                      <label
                        for="model"
                      >
                        Model:
                      </label>
                      <input
                        class=""
                        id="model"
                        name="model"
                        required=""
                        type="text"
                        value=""
                      />
                      <br />
                      <label>
                        <span>
                          Description:
                        </span>
                      </label>
                      <textarea
                        cols="40"
                        id="detail"
                        name="detail"
                        required=""
                        type="text"
                      />
                      <label />
                      <input
                        class="white auth-submit-btn"
                        id="new-request-btn"
                        type="submit"
                        value="Submit"
                      />
                    </form>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "timeoutHandle": -1,
                },
                "tag": 5,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <RequestForm
                            store={
                              Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              }
                            }
                          />,
                        }
                      }
                    />,
                  },
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": null,
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": null,
                },
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": WrapperComponent {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                },
                "refs": Object {},
                "state": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": BrowserRouter {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "history": Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              },
              "props": Object {
                "children": <RequestForm
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                />,
              },
              "refs": Object {},
              "state": null,
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": [Circular],
          "tag": 2,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {
          "router": undefined,
        },
        "props": Object {
          "children": <RequestForm
            store={
              Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              }
            }
          />,
          "history": Object {
            "action": "POP",
            "block": [Function],
            "createHref": [Function],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
            "push": [Function],
            "replace": [Function],
          },
        },
        "refs": Object {},
        "state": Object {
          "match": Object {
            "isExact": true,
            "params": Object {},
            "path": "/",
            "url": "/",
          },
        },
        "unlisten": [Function],
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <RequestForm
          store={
            Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            }
          }
        />,
        "history": Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": RequestForm {
          "_reactInternalFiber": FiberNode {
            "_debugID": 52,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 53,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 54,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": "x",
                  "className": "close-btn grey right",
                  "id": "sign-up-form-close-btn",
                  "onClick": undefined,
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": "x",
                  "className": "close-btn grey right",
                  "id": "sign-up-form-close-btn",
                  "onClick": undefined,
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugID": 55,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 66,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": undefined,
                      "htmlFor": "id",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": undefined,
                      "htmlFor": "id",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 67,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "className": "",
                        "id": "",
                        "name": "id",
                        "onChange": undefined,
                        "onClick": undefined,
                        "required": "",
                        "type": "hidden",
                        "value": undefined,
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "className": "",
                        "id": "",
                        "name": "id",
                        "onChange": undefined,
                        "onClick": undefined,
                        "required": "",
                        "type": "hidden",
                        "value": undefined,
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <input
                        class=""
                        id=""
                        name="id"
                        type="hidden"
                        value=""
                      />,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "input",
                      "updateQueue": null,
                    },
                    "stateNode": <label
                      for="id"
                    />,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "label",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "className": "",
                    "handleChange": undefined,
                    "handleClick": undefined,
                    "id": "",
                    "isRequired": "",
                    "label": undefined,
                    "name": "id",
                    "type": "hidden",
                    "value": undefined,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "className": "",
                    "handleChange": undefined,
                    "handleClick": undefined,
                    "id": "",
                    "isRequired": "",
                    "label": undefined,
                    "name": "id",
                    "type": "hidden",
                    "value": undefined,
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 2,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": "Create a new request",
                      "className": "left orange center",
                      "id": "title",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": "Create a new request",
                      "className": "left orange center",
                      "id": "title",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 57,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 68,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Select request type",
                          "disabled": true,
                          "value": "",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Select request type",
                          "disabled": true,
                          "value": "",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 69,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "Maintenance",
                            "value": "maintenance",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "Maintenance",
                            "value": "maintenance",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 70,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 2,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": "Repair",
                              "value": "repair",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": "Repair",
                              "value": "repair",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <option
                              value="repair"
                            >
                              Repair
                            </option>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "option",
                            "updateQueue": null,
                          },
                          "stateNode": <option
                            value="maintenance"
                          >
                            Maintenance
                          </option>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "option",
                          "updateQueue": null,
                        },
                        "stateNode": <option
                          disabled=""
                          value=""
                        >
                          Select request type
                        </option>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "option",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 3,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <option
                            disabled={true}
                            value=""
                          >
                            Select request type
                          </option>,
                          <option
                            value="maintenance"
                          >
                            Maintenance
                          </option>,
                          <option
                            value="repair"
                          >
                            Repair
                          </option>,
                        ],
                        "className": "transparent-selector",
                        "id": "type",
                        "name": "type",
                        "onChange": [Function],
                        "required": "required",
                        "value": "",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <option
                            disabled={true}
                            value=""
                          >
                            Select request type
                          </option>,
                          <option
                            value="maintenance"
                          >
                            Maintenance
                          </option>,
                          <option
                            value="repair"
                          >
                            Repair
                          </option>,
                        ],
                        "className": "transparent-selector",
                        "id": "type",
                        "name": "type",
                        "onChange": [Function],
                        "required": "required",
                        "value": "",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 4,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {},
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {},
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 59,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 71,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": "Item:",
                              "htmlFor": "item",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": "Item:",
                              "htmlFor": "item",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 72,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "className": "",
                                "id": "item",
                                "name": "item",
                                "onChange": [Function],
                                "onClick": undefined,
                                "required": "required",
                                "type": "text",
                                "value": "",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "className": "",
                                "id": "item",
                                "name": "item",
                                "onChange": [Function],
                                "onClick": undefined,
                                "required": "required",
                                "type": "text",
                                "value": "",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <input
                                class=""
                                id="item"
                                name="item"
                                required=""
                                type="text"
                                value=""
                              />,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "input",
                              "updateQueue": null,
                            },
                            "stateNode": <label
                              for="item"
                            >
                              Item:
                            </label>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "label",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "effectTag": 1,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 5,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "className": "",
                            "handleChange": [Function],
                            "handleClick": undefined,
                            "id": "item",
                            "isRequired": "required",
                            "label": "Item:",
                            "name": "item",
                            "type": "text",
                            "value": "",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "className": "",
                            "handleChange": [Function],
                            "handleClick": undefined,
                            "id": "item",
                            "isRequired": "required",
                            "label": "Item:",
                            "name": "item",
                            "type": "text",
                            "value": "",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 6,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {},
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {},
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 61,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugID": 73,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": "Model:",
                                  "htmlFor": "model",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": "Model:",
                                  "htmlFor": "model",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugID": 74,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 1,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "className": "",
                                    "id": "model",
                                    "name": "model",
                                    "onChange": [Function],
                                    "onClick": undefined,
                                    "required": "required",
                                    "type": "text",
                                    "value": "",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "className": "",
                                    "id": "model",
                                    "name": "model",
                                    "onChange": [Function],
                                    "onClick": undefined,
                                    "required": "required",
                                    "type": "text",
                                    "value": "",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode": <input
                                    class=""
                                    id="model"
                                    name="model"
                                    required=""
                                    type="text"
                                    value=""
                                  />,
                                  "tag": 7,
                                  "treeBaseDuration": 0,
                                  "type": "input",
                                  "updateQueue": null,
                                },
                                "stateNode": <label
                                  for="model"
                                >
                                  Model:
                                </label>,
                                "tag": 7,
                                "treeBaseDuration": 0,
                                "type": "label",
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "effectTag": 1,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 7,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "className": "",
                                "handleChange": [Function],
                                "handleClick": undefined,
                                "id": "model",
                                "isRequired": "required",
                                "label": "Model:",
                                "name": "model",
                                "type": "text",
                                "value": "",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "className": "",
                                "handleChange": [Function],
                                "handleClick": undefined,
                                "id": "model",
                                "isRequired": "required",
                                "label": "Model:",
                                "name": "model",
                                "type": "text",
                                "value": "",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 62,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 8,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {},
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {},
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugID": 63,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": FiberNode {
                                    "_debugID": 75,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": null,
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "effectTag": 0,
                                    "expirationTime": 0,
                                    "firstContextDependency": null,
                                    "firstEffect": null,
                                    "index": 0,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "children": "Description:",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "children": "Description:",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode": <span>
                                      Description:
                                    </span>,
                                    "tag": 7,
                                    "treeBaseDuration": 0,
                                    "type": "span",
                                    "updateQueue": null,
                                  },
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 9,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "children": <span>
                                      Description:
                                    </span>,
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "children": <span>
                                      Description:
                                    </span>,
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugID": 64,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": null,
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "effectTag": 0,
                                    "expirationTime": 0,
                                    "firstContextDependency": null,
                                    "firstEffect": null,
                                    "index": 10,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "cols": "40",
                                      "id": "detail",
                                      "name": "detail",
                                      "onChange": [Function],
                                      "required": "required",
                                      "type": "text",
                                      "value": "",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "cols": "40",
                                      "id": "detail",
                                      "name": "detail",
                                      "onChange": [Function],
                                      "required": "required",
                                      "type": "text",
                                      "value": "",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": FiberNode {
                                      "_debugID": 65,
                                      "_debugIsCurrentlyTiming": false,
                                      "_debugOwner": [Circular],
                                      "_debugSource": null,
                                      "actualDuration": 0,
                                      "actualStartTime": -1,
                                      "alternate": null,
                                      "child": FiberNode {
                                        "_debugID": 76,
                                        "_debugIsCurrentlyTiming": false,
                                        "_debugOwner": [Circular],
                                        "_debugSource": null,
                                        "actualDuration": 0,
                                        "actualStartTime": -1,
                                        "alternate": null,
                                        "child": null,
                                        "childExpirationTime": 0,
                                        "effectTag": 0,
                                        "expirationTime": 0,
                                        "firstContextDependency": null,
                                        "firstEffect": null,
                                        "index": 0,
                                        "key": null,
                                        "lastEffect": null,
                                        "memoizedProps": Object {
                                          "children": undefined,
                                          "htmlFor": undefined,
                                        },
                                        "memoizedState": null,
                                        "mode": 0,
                                        "nextEffect": null,
                                        "pendingProps": Object {
                                          "children": undefined,
                                          "htmlFor": undefined,
                                        },
                                        "ref": null,
                                        "return": [Circular],
                                        "selfBaseDuration": 0,
                                        "sibling": FiberNode {
                                          "_debugID": 77,
                                          "_debugIsCurrentlyTiming": false,
                                          "_debugOwner": [Circular],
                                          "_debugSource": null,
                                          "actualDuration": 0,
                                          "actualStartTime": -1,
                                          "alternate": null,
                                          "child": null,
                                          "childExpirationTime": 0,
                                          "effectTag": 0,
                                          "expirationTime": 0,
                                          "firstContextDependency": null,
                                          "firstEffect": null,
                                          "index": 1,
                                          "key": null,
                                          "lastEffect": null,
                                          "memoizedProps": Object {
                                            "className": "white auth-submit-btn",
                                            "id": "new-request-btn",
                                            "name": undefined,
                                            "onChange": undefined,
                                            "onClick": undefined,
                                            "required": "",
                                            "type": "submit",
                                            "value": "Submit",
                                          },
                                          "memoizedState": null,
                                          "mode": 0,
                                          "nextEffect": null,
                                          "pendingProps": Object {
                                            "className": "white auth-submit-btn",
                                            "id": "new-request-btn",
                                            "name": undefined,
                                            "onChange": undefined,
                                            "onClick": undefined,
                                            "required": "",
                                            "type": "submit",
                                            "value": "Submit",
                                          },
                                          "ref": null,
                                          "return": [Circular],
                                          "selfBaseDuration": 0,
                                          "sibling": null,
                                          "stateNode": <input
                                            class="white auth-submit-btn"
                                            id="new-request-btn"
                                            type="submit"
                                            value="Submit"
                                          />,
                                          "tag": 7,
                                          "treeBaseDuration": 0,
                                          "type": "input",
                                          "updateQueue": null,
                                        },
                                        "stateNode": <label />,
                                        "tag": 7,
                                        "treeBaseDuration": 0,
                                        "type": "label",
                                        "updateQueue": null,
                                      },
                                      "childExpirationTime": 0,
                                      "effectTag": 1,
                                      "expirationTime": 0,
                                      "firstContextDependency": null,
                                      "firstEffect": null,
                                      "index": 11,
                                      "key": null,
                                      "lastEffect": null,
                                      "memoizedProps": Object {
                                        "className": "white auth-submit-btn",
                                        "handleChange": undefined,
                                        "handleClick": undefined,
                                        "id": "new-request-btn",
                                        "isRequired": "",
                                        "label": undefined,
                                        "name": undefined,
                                        "type": "submit",
                                        "value": "Submit",
                                      },
                                      "memoizedState": null,
                                      "mode": 0,
                                      "nextEffect": null,
                                      "pendingProps": Object {
                                        "className": "white auth-submit-btn",
                                        "handleChange": undefined,
                                        "handleClick": undefined,
                                        "id": "new-request-btn",
                                        "isRequired": "",
                                        "label": undefined,
                                        "name": undefined,
                                        "type": "submit",
                                        "value": "Submit",
                                      },
                                      "ref": null,
                                      "return": [Circular],
                                      "selfBaseDuration": 0,
                                      "sibling": null,
                                      "stateNode": null,
                                      "tag": 0,
                                      "treeBaseDuration": 0,
                                      "type": [Function],
                                      "updateQueue": null,
                                    },
                                    "stateNode": <textarea
                                      cols="40"
                                      id="detail"
                                      name="detail"
                                      required=""
                                      type="text"
                                    />,
                                    "tag": 7,
                                    "treeBaseDuration": 0,
                                    "type": "textarea",
                                    "updateQueue": null,
                                  },
                                  "stateNode": <label>
                                    <span>
                                      Description:
                                    </span>
                                  </label>,
                                  "tag": 7,
                                  "treeBaseDuration": 0,
                                  "type": "label",
                                  "updateQueue": null,
                                },
                                "stateNode": <br />,
                                "tag": 7,
                                "treeBaseDuration": 0,
                                "type": "br",
                                "updateQueue": null,
                              },
                              "stateNode": null,
                              "tag": 0,
                              "treeBaseDuration": 0,
                              "type": [Function],
                              "updateQueue": null,
                            },
                            "stateNode": <br />,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "br",
                            "updateQueue": null,
                          },
                          "stateNode": null,
                          "tag": 0,
                          "treeBaseDuration": 0,
                          "type": [Function],
                          "updateQueue": null,
                        },
                        "stateNode": <br />,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "br",
                        "updateQueue": null,
                      },
                      "stateNode": <select
                        class="transparent-selector"
                        id="type"
                        name="type"
                        required=""
                      >
                        <option
                          disabled=""
                          value=""
                        >
                          Select request type
                        </option>
                        <option
                          value="maintenance"
                        >
                          Maintenance
                        </option>
                        <option
                          value="repair"
                        >
                          Repair
                        </option>
                      </select>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "select",
                      "updateQueue": null,
                    },
                    "stateNode": <label
                      class="left orange center"
                      id="title"
                    >
                      Create a new request
                    </label>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "label",
                    "updateQueue": null,
                  },
                  "stateNode": null,
                  "tag": 0,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "stateNode": <span
                  class="close-btn grey right"
                  id="sign-up-form-close-btn"
                >
                  x
                </span>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "span",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <span
                    className="close-btn grey right"
                    id="sign-up-form-close-btn"
                  >
                    x
                  </span>,
                  <Input
                    className=""
                    id=""
                    isRequired=""
                    name="id"
                    type="hidden"
                  />,
                  <label
                    className="left orange center"
                    id="title"
                  >
                    Create a new request
                  </label>,
                  <select
                    className="transparent-selector"
                    id="type"
                    name="type"
                    onChange={[Function]}
                    required="required"
                    value=""
                  >
                    <option
                      disabled={true}
                      value=""
                    >
                      Select request type
                    </option>
                    <option
                      value="maintenance"
                    >
                      Maintenance
                    </option>
                    <option
                      value="repair"
                    >
                      Repair
                    </option>
                  </select>,
                  <br />,
                  <Input
                    className=""
                    handleChange={[Function]}
                    id="item"
                    isRequired="required"
                    label="Item:"
                    name="item"
                    type="text"
                    value=""
                  />,
                  <br />,
                  <Input
                    className=""
                    handleChange={[Function]}
                    id="model"
                    isRequired="required"
                    label="Model:"
                    name="model"
                    type="text"
                    value=""
                  />,
                  <br />,
                  <label>
                    <span>
                      Description:
                    </span>
                  </label>,
                  <textarea
                    cols="40"
                    id="detail"
                    name="detail"
                    onChange={[Function]}
                    required="required"
                    type="text"
                    value=""
                  />,
                  <Input
                    className="white auth-submit-btn"
                    id="new-request-btn"
                    isRequired=""
                    type="submit"
                    value="Submit"
                  />,
                ],
                "className": "form request-form",
                "id": "new-request-form",
                "onSubmit": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <span
                    className="close-btn grey right"
                    id="sign-up-form-close-btn"
                  >
                    x
                  </span>,
                  <Input
                    className=""
                    id=""
                    isRequired=""
                    name="id"
                    type="hidden"
                  />,
                  <label
                    className="left orange center"
                    id="title"
                  >
                    Create a new request
                  </label>,
                  <select
                    className="transparent-selector"
                    id="type"
                    name="type"
                    onChange={[Function]}
                    required="required"
                    value=""
                  >
                    <option
                      disabled={true}
                      value=""
                    >
                      Select request type
                    </option>
                    <option
                      value="maintenance"
                    >
                      Maintenance
                    </option>
                    <option
                      value="repair"
                    >
                      Repair
                    </option>
                  </select>,
                  <br />,
                  <Input
                    className=""
                    handleChange={[Function]}
                    id="item"
                    isRequired="required"
                    label="Item:"
                    name="item"
                    type="text"
                    value=""
                  />,
                  <br />,
                  <Input
                    className=""
                    handleChange={[Function]}
                    id="model"
                    isRequired="required"
                    label="Model:"
                    name="model"
                    type="text"
                    value=""
                  />,
                  <br />,
                  <label>
                    <span>
                      Description:
                    </span>
                  </label>,
                  <textarea
                    cols="40"
                    id="detail"
                    name="detail"
                    onChange={[Function]}
                    required="required"
                    type="text"
                    value=""
                  />,
                  <Input
                    className="white auth-submit-btn"
                    id="new-request-btn"
                    isRequired=""
                    type="submit"
                    value="Submit"
                  />,
                ],
                "className": "form request-form",
                "id": "new-request-form",
                "onSubmit": [Function],
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": <form
                class="form request-form"
                id="new-request-form"
              >
                <span
                  class="close-btn grey right"
                  id="sign-up-form-close-btn"
                >
                  x
                </span>
                <label
                  for="id"
                />
                <input
                  class=""
                  id=""
                  name="id"
                  type="hidden"
                  value=""
                />
                <label
                  class="left orange center"
                  id="title"
                >
                  Create a new request
                </label>
                <select
                  class="transparent-selector"
                  id="type"
                  name="type"
                  required=""
                >
                  <option
                    disabled=""
                    value=""
                  >
                    Select request type
                  </option>
                  <option
                    value="maintenance"
                  >
                    Maintenance
                  </option>
                  <option
                    value="repair"
                  >
                    Repair
                  </option>
                </select>
                <br />
                <label
                  for="item"
                >
                  Item:
                </label>
                <input
                  class=""
                  id="item"
                  name="item"
                  required=""
                  type="text"
                  value=""
                />
                <br />
                <label
                  for="model"
                >
                  Model:
                </label>
                <input
                  class=""
                  id="model"
                  name="model"
                  required=""
                  type="text"
                  value=""
                />
                <br />
                <label>
                  <span>
                    Description:
                  </span>
                </label>
                <textarea
                  cols="40"
                  id="detail"
                  name="detail"
                  required=""
                  type="text"
                />
                <label />
                <input
                  class="white auth-submit-btn"
                  id="new-request-btn"
                  type="submit"
                  value="Submit"
                />
              </form>,
              "tag": 7,
              "treeBaseDuration": 0,
              "type": "form",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "createRequest": undefined,
              "handleClose": undefined,
              "initialValues": undefined,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "updateRequest": undefined,
            },
            "memoizedState": Object {
              "detail": "",
              "id": undefined,
              "item": "",
              "model": "",
              "type": "",
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "createRequest": undefined,
              "handleClose": undefined,
              "initialValues": undefined,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "updateRequest": undefined,
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 51,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugID": 50,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": FiberNode {
                  "_debugID": 49,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 1,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <form
                            class="form request-form"
                            id="new-request-form"
                          >
                            <span
                              class="close-btn grey right"
                              id="sign-up-form-close-btn"
                            >
                              x
                            </span>
                            <label
                              for="id"
                            />
                            <input
                              class=""
                              id=""
                              name="id"
                              type="hidden"
                              value=""
                            />
                            <label
                              class="left orange center"
                              id="title"
                            >
                              Create a new request
                            </label>
                            <select
                              class="transparent-selector"
                              id="type"
                              name="type"
                              required=""
                            >
                              <option
                                disabled=""
                                value=""
                              >
                                Select request type
                              </option>
                              <option
                                value="maintenance"
                              >
                                Maintenance
                              </option>
                              <option
                                value="repair"
                              >
                                Repair
                              </option>
                            </select>
                            <br />
                            <label
                              for="item"
                            >
                              Item:
                            </label>
                            <input
                              class=""
                              id="item"
                              name="item"
                              required=""
                              type="text"
                              value=""
                            />
                            <br />
                            <label
                              for="model"
                            >
                              Model:
                            </label>
                            <input
                              class=""
                              id="model"
                              name="model"
                              required=""
                              type="text"
                              value=""
                            />
                            <br />
                            <label>
                              <span>
                                Description:
                              </span>
                            </label>
                            <textarea
                              cols="40"
                              id="detail"
                              name="detail"
                              required=""
                              type="text"
                            />
                            <label />
                            <input
                              class="white auth-submit-btn"
                              id="new-request-btn"
                              type="submit"
                              value="Submit"
                            />
                          </form>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <RequestForm
                                    store={
                                      Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      }
                                    }
                                  />,
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <RequestForm
                                    store={
                                      Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      }
                                    }
                                  />,
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 32,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <RequestForm
                              store={
                                Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                }
                              }
                            />,
                          }
                        }
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <form
                          class="form request-form"
                          id="new-request-form"
                        >
                          <span
                            class="close-btn grey right"
                            id="sign-up-form-close-btn"
                          >
                            x
                          </span>
                          <label
                            for="id"
                          />
                          <input
                            class=""
                            id=""
                            name="id"
                            type="hidden"
                            value=""
                          />
                          <label
                            class="left orange center"
                            id="title"
                          >
                            Create a new request
                          </label>
                          <select
                            class="transparent-selector"
                            id="type"
                            name="type"
                            required=""
                          >
                            <option
                              disabled=""
                              value=""
                            >
                              Select request type
                            </option>
                            <option
                              value="maintenance"
                            >
                              Maintenance
                            </option>
                            <option
                              value="repair"
                            >
                              Repair
                            </option>
                          </select>
                          <br />
                          <label
                            for="item"
                          >
                            Item:
                          </label>
                          <input
                            class=""
                            id="item"
                            name="item"
                            required=""
                            type="text"
                            value=""
                          />
                          <br />
                          <label
                            for="model"
                          >
                            Model:
                          </label>
                          <input
                            class=""
                            id="model"
                            name="model"
                            required=""
                            type="text"
                            value=""
                          />
                          <br />
                          <label>
                            <span>
                              Description:
                            </span>
                          </label>
                          <textarea
                            cols="40"
                            id="detail"
                            name="detail"
                            required=""
                            type="text"
                          />
                          <label />
                          <input
                            class="white auth-submit-btn"
                            id="new-request-btn"
                            type="submit"
                            value="Submit"
                          />
                        </form>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <RequestForm
                                store={
                                  Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  }
                                }
                              />,
                            }
                          }
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 49,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 1,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <form
                            class="form request-form"
                            id="new-request-form"
                          >
                            <span
                              class="close-btn grey right"
                              id="sign-up-form-close-btn"
                            >
                              x
                            </span>
                            <label
                              for="id"
                            />
                            <input
                              class=""
                              id=""
                              name="id"
                              type="hidden"
                              value=""
                            />
                            <label
                              class="left orange center"
                              id="title"
                            >
                              Create a new request
                            </label>
                            <select
                              class="transparent-selector"
                              id="type"
                              name="type"
                              required=""
                            >
                              <option
                                disabled=""
                                value=""
                              >
                                Select request type
                              </option>
                              <option
                                value="maintenance"
                              >
                                Maintenance
                              </option>
                              <option
                                value="repair"
                              >
                                Repair
                              </option>
                            </select>
                            <br />
                            <label
                              for="item"
                            >
                              Item:
                            </label>
                            <input
                              class=""
                              id="item"
                              name="item"
                              required=""
                              type="text"
                              value=""
                            />
                            <br />
                            <label
                              for="model"
                            >
                              Model:
                            </label>
                            <input
                              class=""
                              id="model"
                              name="model"
                              required=""
                              type="text"
                              value=""
                            />
                            <br />
                            <label>
                              <span>
                                Description:
                              </span>
                            </label>
                            <textarea
                              cols="40"
                              id="detail"
                              name="detail"
                              required=""
                              type="text"
                            />
                            <label />
                            <input
                              class="white auth-submit-btn"
                              id="new-request-btn"
                              type="submit"
                              value="Submit"
                            />
                          </form>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <RequestForm
                                    store={
                                      Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      }
                                    }
                                  />,
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <RequestForm
                                    store={
                                      Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      }
                                    }
                                  />,
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 32,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <RequestForm
                              store={
                                Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                }
                              }
                            />,
                          }
                        }
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <form
                          class="form request-form"
                          id="new-request-form"
                        >
                          <span
                            class="close-btn grey right"
                            id="sign-up-form-close-btn"
                          >
                            x
                          </span>
                          <label
                            for="id"
                          />
                          <input
                            class=""
                            id=""
                            name="id"
                            type="hidden"
                            value=""
                          />
                          <label
                            class="left orange center"
                            id="title"
                          >
                            Create a new request
                          </label>
                          <select
                            class="transparent-selector"
                            id="type"
                            name="type"
                            required=""
                          >
                            <option
                              disabled=""
                              value=""
                            >
                              Select request type
                            </option>
                            <option
                              value="maintenance"
                            >
                              Maintenance
                            </option>
                            <option
                              value="repair"
                            >
                              Repair
                            </option>
                          </select>
                          <br />
                          <label
                            for="item"
                          >
                            Item:
                          </label>
                          <input
                            class=""
                            id="item"
                            name="item"
                            required=""
                            type="text"
                            value=""
                          />
                          <br />
                          <label
                            for="model"
                          >
                            Model:
                          </label>
                          <input
                            class=""
                            id="model"
                            name="model"
                            required=""
                            type="text"
                            value=""
                          />
                          <br />
                          <label>
                            <span>
                              Description:
                            </span>
                          </label>
                          <textarea
                            cols="40"
                            id="detail"
                            name="detail"
                            required=""
                            type="text"
                          />
                          <label />
                          <input
                            class="white auth-submit-btn"
                            id="new-request-btn"
                            type="submit"
                            value="Submit"
                          />
                        </form>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <RequestForm
                                store={
                                  Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  }
                                }
                              />,
                            }
                          }
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": BrowserRouter {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "history": Object {
                    "action": "POP",
                    "block": [Function],
                    "createHref": [Function],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  },
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                  "refs": Object {},
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": <RequestForm
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                />,
                "history": Object {
                  "action": "POP",
                  "block": [Function],
                  "createHref": [Function],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                },
              },
              "memoizedState": Object {
                "match": Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                },
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": <RequestForm
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                />,
                "history": Object {
                  "action": "POP",
                  "block": [Function],
                  "createHref": [Function],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 50,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": FiberNode {
                  "_debugID": 49,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 1,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <form
                            class="form request-form"
                            id="new-request-form"
                          >
                            <span
                              class="close-btn grey right"
                              id="sign-up-form-close-btn"
                            >
                              x
                            </span>
                            <label
                              for="id"
                            />
                            <input
                              class=""
                              id=""
                              name="id"
                              type="hidden"
                              value=""
                            />
                            <label
                              class="left orange center"
                              id="title"
                            >
                              Create a new request
                            </label>
                            <select
                              class="transparent-selector"
                              id="type"
                              name="type"
                              required=""
                            >
                              <option
                                disabled=""
                                value=""
                              >
                                Select request type
                              </option>
                              <option
                                value="maintenance"
                              >
                                Maintenance
                              </option>
                              <option
                                value="repair"
                              >
                                Repair
                              </option>
                            </select>
                            <br />
                            <label
                              for="item"
                            >
                              Item:
                            </label>
                            <input
                              class=""
                              id="item"
                              name="item"
                              required=""
                              type="text"
                              value=""
                            />
                            <br />
                            <label
                              for="model"
                            >
                              Model:
                            </label>
                            <input
                              class=""
                              id="model"
                              name="model"
                              required=""
                              type="text"
                              value=""
                            />
                            <br />
                            <label>
                              <span>
                                Description:
                              </span>
                            </label>
                            <textarea
                              cols="40"
                              id="detail"
                              name="detail"
                              required=""
                              type="text"
                            />
                            <label />
                            <input
                              class="white auth-submit-btn"
                              id="new-request-btn"
                              type="submit"
                              value="Submit"
                            />
                          </form>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <RequestForm
                                    store={
                                      Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      }
                                    }
                                  />,
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <RequestForm
                                    store={
                                      Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      }
                                    }
                                  />,
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 32,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <RequestForm
                              store={
                                Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                }
                              }
                            />,
                          }
                        }
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <form
                          class="form request-form"
                          id="new-request-form"
                        >
                          <span
                            class="close-btn grey right"
                            id="sign-up-form-close-btn"
                          >
                            x
                          </span>
                          <label
                            for="id"
                          />
                          <input
                            class=""
                            id=""
                            name="id"
                            type="hidden"
                            value=""
                          />
                          <label
                            class="left orange center"
                            id="title"
                          >
                            Create a new request
                          </label>
                          <select
                            class="transparent-selector"
                            id="type"
                            name="type"
                            required=""
                          >
                            <option
                              disabled=""
                              value=""
                            >
                              Select request type
                            </option>
                            <option
                              value="maintenance"
                            >
                              Maintenance
                            </option>
                            <option
                              value="repair"
                            >
                              Repair
                            </option>
                          </select>
                          <br />
                          <label
                            for="item"
                          >
                            Item:
                          </label>
                          <input
                            class=""
                            id="item"
                            name="item"
                            required=""
                            type="text"
                            value=""
                          />
                          <br />
                          <label
                            for="model"
                          >
                            Model:
                          </label>
                          <input
                            class=""
                            id="model"
                            name="model"
                            required=""
                            type="text"
                            value=""
                          />
                          <br />
                          <label>
                            <span>
                              Description:
                            </span>
                          </label>
                          <textarea
                            cols="40"
                            id="detail"
                            name="detail"
                            required=""
                            type="text"
                          />
                          <label />
                          <input
                            class="white auth-submit-btn"
                            id="new-request-btn"
                            type="submit"
                            value="Submit"
                          />
                        </form>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <RequestForm
                                store={
                                  Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  }
                                }
                              />,
                            }
                          }
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 49,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 1,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <form
                            class="form request-form"
                            id="new-request-form"
                          >
                            <span
                              class="close-btn grey right"
                              id="sign-up-form-close-btn"
                            >
                              x
                            </span>
                            <label
                              for="id"
                            />
                            <input
                              class=""
                              id=""
                              name="id"
                              type="hidden"
                              value=""
                            />
                            <label
                              class="left orange center"
                              id="title"
                            >
                              Create a new request
                            </label>
                            <select
                              class="transparent-selector"
                              id="type"
                              name="type"
                              required=""
                            >
                              <option
                                disabled=""
                                value=""
                              >
                                Select request type
                              </option>
                              <option
                                value="maintenance"
                              >
                                Maintenance
                              </option>
                              <option
                                value="repair"
                              >
                                Repair
                              </option>
                            </select>
                            <br />
                            <label
                              for="item"
                            >
                              Item:
                            </label>
                            <input
                              class=""
                              id="item"
                              name="item"
                              required=""
                              type="text"
                              value=""
                            />
                            <br />
                            <label
                              for="model"
                            >
                              Model:
                            </label>
                            <input
                              class=""
                              id="model"
                              name="model"
                              required=""
                              type="text"
                              value=""
                            />
                            <br />
                            <label>
                              <span>
                                Description:
                              </span>
                            </label>
                            <textarea
                              cols="40"
                              id="detail"
                              name="detail"
                              required=""
                              type="text"
                            />
                            <label />
                            <input
                              class="white auth-submit-btn"
                              id="new-request-btn"
                              type="submit"
                              value="Submit"
                            />
                          </form>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <RequestForm
                                    store={
                                      Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      }
                                    }
                                  />,
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <RequestForm
                                    store={
                                      Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      }
                                    }
                                  />,
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 32,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <RequestForm
                              store={
                                Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                }
                              }
                            />,
                          }
                        }
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <form
                          class="form request-form"
                          id="new-request-form"
                        >
                          <span
                            class="close-btn grey right"
                            id="sign-up-form-close-btn"
                          >
                            x
                          </span>
                          <label
                            for="id"
                          />
                          <input
                            class=""
                            id=""
                            name="id"
                            type="hidden"
                            value=""
                          />
                          <label
                            class="left orange center"
                            id="title"
                          >
                            Create a new request
                          </label>
                          <select
                            class="transparent-selector"
                            id="type"
                            name="type"
                            required=""
                          >
                            <option
                              disabled=""
                              value=""
                            >
                              Select request type
                            </option>
                            <option
                              value="maintenance"
                            >
                              Maintenance
                            </option>
                            <option
                              value="repair"
                            >
                              Repair
                            </option>
                          </select>
                          <br />
                          <label
                            for="item"
                          >
                            Item:
                          </label>
                          <input
                            class=""
                            id="item"
                            name="item"
                            required=""
                            type="text"
                            value=""
                          />
                          <br />
                          <label
                            for="model"
                          >
                            Model:
                          </label>
                          <input
                            class=""
                            id="model"
                            name="model"
                            required=""
                            type="text"
                            value=""
                          />
                          <br />
                          <label>
                            <span>
                              Description:
                            </span>
                          </label>
                          <textarea
                            cols="40"
                            id="detail"
                            name="detail"
                            required=""
                            type="text"
                          />
                          <label />
                          <input
                            class="white auth-submit-btn"
                            id="new-request-btn"
                            type="submit"
                            value="Submit"
                          />
                        </form>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <RequestForm
                                store={
                                  Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  }
                                }
                              />,
                            }
                          }
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": BrowserRouter {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "history": Object {
                    "action": "POP",
                    "block": [Function],
                    "createHref": [Function],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  },
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                  "refs": Object {},
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Router {
                "__reactInternalMemoizedMaskedChildContext": Object {
                  "router": undefined,
                },
                "__reactInternalMemoizedMergedChildContext": Object {
                  "router": Object {
                    "history": Object {
                      "action": "POP",
                      "block": [Function],
                      "createHref": [Function],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    },
                    "route": Object {
                      "location": Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                      "match": Object {
                        "isExact": true,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      },
                    },
                  },
                },
                "__reactInternalMemoizedUnmaskedChildContext": Object {},
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {
                  "router": undefined,
                },
                "props": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                  "history": Object {
                    "action": "POP",
                    "block": [Function],
                    "createHref": [Function],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  },
                },
                "refs": Object {},
                "state": Object {
                  "match": Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  },
                },
                "unlisten": [Function],
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": [Circular],
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_reactInternalInstance": Object {},
          "context": Object {},
          "handleChange": [Function],
          "handleSubmit": [Function],
          "props": Object {
            "createRequest": undefined,
            "handleClose": undefined,
            "initialValues": undefined,
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "updateRequest": undefined,
          },
          "refs": Object {},
          "state": Object {
            "detail": "",
            "id": undefined,
            "item": "",
            "model": "",
            "type": "",
          },
          "updater": Object {
            "enqueueForceUpdate": [Function],
            "enqueueReplaceState": [Function],
            "enqueueSetState": [Function],
            "isMounted": [Function],
          },
        },
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "createRequest": undefined,
          "handleClose": undefined,
          "initialValues": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "updateRequest": undefined,
        },
        "ref": null,
        "rendered": Object {
          "instance": <form
            class="form request-form"
            id="new-request-form"
          >
            <span
              class="close-btn grey right"
              id="sign-up-form-close-btn"
            >
              x
            </span>
            <label
              for="id"
            />
            <input
              class=""
              id=""
              name="id"
              type="hidden"
              value=""
            />
            <label
              class="left orange center"
              id="title"
            >
              Create a new request
            </label>
            <select
              class="transparent-selector"
              id="type"
              name="type"
              required=""
            >
              <option
                disabled=""
                value=""
              >
                Select request type
              </option>
              <option
                value="maintenance"
              >
                Maintenance
              </option>
              <option
                value="repair"
              >
                Repair
              </option>
            </select>
            <br />
            <label
              for="item"
            >
              Item:
            </label>
            <input
              class=""
              id="item"
              name="item"
              required=""
              type="text"
              value=""
            />
            <br />
            <label
              for="model"
            >
              Model:
            </label>
            <input
              class=""
              id="model"
              name="model"
              required=""
              type="text"
              value=""
            />
            <br />
            <label>
              <span>
                Description:
              </span>
            </label>
            <textarea
              cols="40"
              id="detail"
              name="detail"
              required=""
              type="text"
            />
            <label />
            <input
              class="white auth-submit-btn"
              id="new-request-btn"
              type="submit"
              value="Submit"
            />
          </form>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <span
                className="close-btn grey right"
                id="sign-up-form-close-btn"
              >
                x
              </span>,
              <Input
                className=""
                id=""
                isRequired=""
                name="id"
                type="hidden"
              />,
              <label
                className="left orange center"
                id="title"
              >
                Create a new request
              </label>,
              <select
                className="transparent-selector"
                id="type"
                name="type"
                onChange={[Function]}
                required="required"
                value=""
              >
                <option
                  disabled={true}
                  value=""
                >
                  Select request type
                </option>
                <option
                  value="maintenance"
                >
                  Maintenance
                </option>
                <option
                  value="repair"
                >
                  Repair
                </option>
              </select>,
              <br />,
              <Input
                className=""
                handleChange={[Function]}
                id="item"
                isRequired="required"
                label="Item:"
                name="item"
                type="text"
                value=""
              />,
              <br />,
              <Input
                className=""
                handleChange={[Function]}
                id="model"
                isRequired="required"
                label="Model:"
                name="model"
                type="text"
                value=""
              />,
              <br />,
              <label>
                <span>
                  Description:
                </span>
              </label>,
              <textarea
                cols="40"
                id="detail"
                name="detail"
                onChange={[Function]}
                required="required"
                type="text"
                value=""
              />,
              <Input
                className="white auth-submit-btn"
                id="new-request-btn"
                isRequired=""
                type="submit"
                value="Submit"
              />,
            ],
            "className": "form request-form",
            "id": "new-request-form",
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": <span
                class="close-btn grey right"
                id="sign-up-form-close-btn"
              >
                x
              </span>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "x",
                "className": "close-btn grey right",
                "id": "sign-up-form-close-btn",
                "onClick": undefined,
              },
              "ref": null,
              "rendered": Array [
                "x",
              ],
              "type": "span",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "className": "",
                "handleChange": undefined,
                "handleClick": undefined,
                "id": "",
                "isRequired": "",
                "label": undefined,
                "name": "id",
                "type": "hidden",
                "value": undefined,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <label
                    for="id"
                  />,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": undefined,
                    "htmlFor": "id",
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                  ],
                  "type": "label",
                },
                Object {
                  "instance": <input
                    class=""
                    id=""
                    name="id"
                    type="hidden"
                    value=""
                  />,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "",
                    "id": "",
                    "name": "id",
                    "onChange": undefined,
                    "onClick": undefined,
                    "required": "",
                    "type": "hidden",
                    "value": undefined,
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                  ],
                  "type": "input",
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": <label
                class="left orange center"
                id="title"
              >
                Create a new request
              </label>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Create a new request",
                "className": "left orange center",
                "id": "title",
              },
              "ref": null,
              "rendered": Array [
                "Create a new request",
              ],
              "type": "label",
            },
            Object {
              "instance": <select
                class="transparent-selector"
                id="type"
                name="type"
                required=""
              >
                <option
                  disabled=""
                  value=""
                >
                  Select request type
                </option>
                <option
                  value="maintenance"
                >
                  Maintenance
                </option>
                <option
                  value="repair"
                >
                  Repair
                </option>
              </select>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <option
                    disabled={true}
                    value=""
                  >
                    Select request type
                  </option>,
                  <option
                    value="maintenance"
                  >
                    Maintenance
                  </option>,
                  <option
                    value="repair"
                  >
                    Repair
                  </option>,
                ],
                "className": "transparent-selector",
                "id": "type",
                "name": "type",
                "onChange": [Function],
                "required": "required",
                "value": "",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <option
                    disabled=""
                    value=""
                  >
                    Select request type
                  </option>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Select request type",
                    "disabled": true,
                    "value": "",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Select request type",
                  ],
                  "type": "option",
                },
                Object {
                  "instance": <option
                    value="maintenance"
                  >
                    Maintenance
                  </option>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Maintenance",
                    "value": "maintenance",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Maintenance",
                  ],
                  "type": "option",
                },
                Object {
                  "instance": <option
                    value="repair"
                  >
                    Repair
                  </option>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Repair",
                    "value": "repair",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Repair",
                  ],
                  "type": "option",
                },
              ],
              "type": "select",
            },
            Object {
              "instance": <br />,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": Array [
                undefined,
              ],
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "className": "",
                "handleChange": [Function],
                "handleClick": undefined,
                "id": "item",
                "isRequired": "required",
                "label": "Item:",
                "name": "item",
                "type": "text",
                "value": "",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <label
                    for="item"
                  >
                    Item:
                  </label>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Item:",
                    "htmlFor": "item",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Item:",
                  ],
                  "type": "label",
                },
                Object {
                  "instance": <input
                    class=""
                    id="item"
                    name="item"
                    required=""
                    type="text"
                    value=""
                  />,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "",
                    "id": "item",
                    "name": "item",
                    "onChange": [Function],
                    "onClick": undefined,
                    "required": "required",
                    "type": "text",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                  ],
                  "type": "input",
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": <br />,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": Array [
                undefined,
              ],
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "className": "",
                "handleChange": [Function],
                "handleClick": undefined,
                "id": "model",
                "isRequired": "required",
                "label": "Model:",
                "name": "model",
                "type": "text",
                "value": "",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <label
                    for="model"
                  >
                    Model:
                  </label>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Model:",
                    "htmlFor": "model",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Model:",
                  ],
                  "type": "label",
                },
                Object {
                  "instance": <input
                    class=""
                    id="model"
                    name="model"
                    required=""
                    type="text"
                    value=""
                  />,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "",
                    "id": "model",
                    "name": "model",
                    "onChange": [Function],
                    "onClick": undefined,
                    "required": "required",
                    "type": "text",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                  ],
                  "type": "input",
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": <br />,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": Array [
                undefined,
              ],
              "type": "br",
            },
            Object {
              "instance": <label>
                <span>
                  Description:
                </span>
              </label>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <span>
                  Description:
                </span>,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <span>
                    Description:
                  </span>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Description:",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Description:",
                  ],
                  "type": "span",
                },
              ],
              "type": "label",
            },
            Object {
              "instance": <textarea
                cols="40"
                id="detail"
                name="detail"
                required=""
                type="text"
              />,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "cols": "40",
                "id": "detail",
                "name": "detail",
                "onChange": [Function],
                "required": "required",
                "type": "text",
                "value": "",
              },
              "ref": null,
              "rendered": Array [
                undefined,
              ],
              "type": "textarea",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "className": "white auth-submit-btn",
                "handleChange": undefined,
                "handleClick": undefined,
                "id": "new-request-btn",
                "isRequired": "",
                "label": undefined,
                "name": undefined,
                "type": "submit",
                "value": "Submit",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <label />,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": undefined,
                    "htmlFor": undefined,
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                  ],
                  "type": "label",
                },
                Object {
                  "instance": <input
                    class="white auth-submit-btn"
                    id="new-request-btn"
                    type="submit"
                    value="Submit"
                  />,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "white auth-submit-btn",
                    "id": "new-request-btn",
                    "name": undefined,
                    "onChange": undefined,
                    "onClick": undefined,
                    "required": "",
                    "type": "submit",
                    "value": "Submit",
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                  ],
                  "type": "input",
                },
              ],
              "type": [Function],
            },
          ],
          "type": "form",
        },
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": BrowserRouter {
        "_reactInternalFiber": FiberNode {
          "_debugID": 50,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": FiberNode {
            "_debugID": 49,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <RequestForm
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                />,
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <RequestForm
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                />,
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <RequestForm
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                />,
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 1,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <form
                      class="form request-form"
                      id="new-request-form"
                    >
                      <span
                        class="close-btn grey right"
                        id="sign-up-form-close-btn"
                      >
                        x
                      </span>
                      <label
                        for="id"
                      />
                      <input
                        class=""
                        id=""
                        name="id"
                        type="hidden"
                        value=""
                      />
                      <label
                        class="left orange center"
                        id="title"
                      >
                        Create a new request
                      </label>
                      <select
                        class="transparent-selector"
                        id="type"
                        name="type"
                        required=""
                      >
                        <option
                          disabled=""
                          value=""
                        >
                          Select request type
                        </option>
                        <option
                          value="maintenance"
                        >
                          Maintenance
                        </option>
                        <option
                          value="repair"
                        >
                          Repair
                        </option>
                      </select>
                      <br />
                      <label
                        for="item"
                      >
                        Item:
                      </label>
                      <input
                        class=""
                        id="item"
                        name="item"
                        required=""
                        type="text"
                        value=""
                      />
                      <br />
                      <label
                        for="model"
                      >
                        Model:
                      </label>
                      <input
                        class=""
                        id="model"
                        name="model"
                        required=""
                        type="text"
                        value=""
                      />
                      <br />
                      <label>
                        <span>
                          Description:
                        </span>
                      </label>
                      <textarea
                        cols="40"
                        id="detail"
                        name="detail"
                        required=""
                        type="text"
                      />
                      <label />
                      <input
                        class="white auth-submit-btn"
                        id="new-request-btn"
                        type="submit"
                        value="Submit"
                      />
                    </form>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "timeoutHandle": -1,
                },
                "tag": 5,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <RequestForm
                              store={
                                Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                }
                              }
                            />,
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <RequestForm
                              store={
                                Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                }
                              }
                            />,
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 32,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <form
                    class="form request-form"
                    id="new-request-form"
                  >
                    <span
                      class="close-btn grey right"
                      id="sign-up-form-close-btn"
                    >
                      x
                    </span>
                    <label
                      for="id"
                    />
                    <input
                      class=""
                      id=""
                      name="id"
                      type="hidden"
                      value=""
                    />
                    <label
                      class="left orange center"
                      id="title"
                    >
                      Create a new request
                    </label>
                    <select
                      class="transparent-selector"
                      id="type"
                      name="type"
                      required=""
                    >
                      <option
                        disabled=""
                        value=""
                      >
                        Select request type
                      </option>
                      <option
                        value="maintenance"
                      >
                        Maintenance
                      </option>
                      <option
                        value="repair"
                      >
                        Repair
                      </option>
                    </select>
                    <br />
                    <label
                      for="item"
                    >
                      Item:
                    </label>
                    <input
                      class=""
                      id="item"
                      name="item"
                      required=""
                      type="text"
                      value=""
                    />
                    <br />
                    <label
                      for="model"
                    >
                      Model:
                    </label>
                    <input
                      class=""
                      id="model"
                      name="model"
                      required=""
                      type="text"
                      value=""
                    />
                    <br />
                    <label>
                      <span>
                        Description:
                      </span>
                    </label>
                    <textarea
                      cols="40"
                      id="detail"
                      name="detail"
                      required=""
                      type="text"
                    />
                    <label />
                    <input
                      class="white auth-submit-btn"
                      id="new-request-btn"
                      type="submit"
                      value="Submit"
                    />
                  </form>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "timeoutHandle": -1,
              },
              "tag": 5,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      }
                    }
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 51,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 52,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 53,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 54,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": "x",
                    "className": "close-btn grey right",
                    "id": "sign-up-form-close-btn",
                    "onClick": undefined,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": "x",
                    "className": "close-btn grey right",
                    "id": "sign-up-form-close-btn",
                    "onClick": undefined,
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 55,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 66,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": undefined,
                        "htmlFor": "id",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": undefined,
                        "htmlFor": "id",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 67,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "className": "",
                          "id": "",
                          "name": "id",
                          "onChange": undefined,
                          "onClick": undefined,
                          "required": "",
                          "type": "hidden",
                          "value": undefined,
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "className": "",
                          "id": "",
                          "name": "id",
                          "onChange": undefined,
                          "onClick": undefined,
                          "required": "",
                          "type": "hidden",
                          "value": undefined,
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <input
                          class=""
                          id=""
                          name="id"
                          type="hidden"
                          value=""
                        />,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "stateNode": <label
                        for="id"
                      />,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 1,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "className": "",
                      "handleChange": undefined,
                      "handleClick": undefined,
                      "id": "",
                      "isRequired": "",
                      "label": undefined,
                      "name": "id",
                      "type": "hidden",
                      "value": undefined,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "className": "",
                      "handleChange": undefined,
                      "handleClick": undefined,
                      "id": "",
                      "isRequired": "",
                      "label": undefined,
                      "name": "id",
                      "type": "hidden",
                      "value": undefined,
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 56,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Create a new request",
                        "className": "left orange center",
                        "id": "title",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Create a new request",
                        "className": "left orange center",
                        "id": "title",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 57,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 68,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "Select request type",
                            "disabled": true,
                            "value": "",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "Select request type",
                            "disabled": true,
                            "value": "",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 69,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": "Maintenance",
                              "value": "maintenance",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": "Maintenance",
                              "value": "maintenance",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 70,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 2,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": "Repair",
                                "value": "repair",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": "Repair",
                                "value": "repair",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <option
                                value="repair"
                              >
                                Repair
                              </option>,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "option",
                              "updateQueue": null,
                            },
                            "stateNode": <option
                              value="maintenance"
                            >
                              Maintenance
                            </option>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "option",
                            "updateQueue": null,
                          },
                          "stateNode": <option
                            disabled=""
                            value=""
                          >
                            Select request type
                          </option>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "option",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 3,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <option
                              disabled={true}
                              value=""
                            >
                              Select request type
                            </option>,
                            <option
                              value="maintenance"
                            >
                              Maintenance
                            </option>,
                            <option
                              value="repair"
                            >
                              Repair
                            </option>,
                          ],
                          "className": "transparent-selector",
                          "id": "type",
                          "name": "type",
                          "onChange": [Function],
                          "required": "required",
                          "value": "",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <option
                              disabled={true}
                              value=""
                            >
                              Select request type
                            </option>,
                            <option
                              value="maintenance"
                            >
                              Maintenance
                            </option>,
                            <option
                              value="repair"
                            >
                              Repair
                            </option>,
                          ],
                          "className": "transparent-selector",
                          "id": "type",
                          "name": "type",
                          "onChange": [Function],
                          "required": "required",
                          "value": "",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 58,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 4,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {},
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {},
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 59,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 71,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": "Item:",
                                "htmlFor": "item",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": "Item:",
                                "htmlFor": "item",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 72,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 1,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "className": "",
                                  "id": "item",
                                  "name": "item",
                                  "onChange": [Function],
                                  "onClick": undefined,
                                  "required": "required",
                                  "type": "text",
                                  "value": "",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "className": "",
                                  "id": "item",
                                  "name": "item",
                                  "onChange": [Function],
                                  "onClick": undefined,
                                  "required": "required",
                                  "type": "text",
                                  "value": "",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <input
                                  class=""
                                  id="item"
                                  name="item"
                                  required=""
                                  type="text"
                                  value=""
                                />,
                                "tag": 7,
                                "treeBaseDuration": 0,
                                "type": "input",
                                "updateQueue": null,
                              },
                              "stateNode": <label
                                for="item"
                              >
                                Item:
                              </label>,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "label",
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "effectTag": 1,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 5,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "className": "",
                              "handleChange": [Function],
                              "handleClick": undefined,
                              "id": "item",
                              "isRequired": "required",
                              "label": "Item:",
                              "name": "item",
                              "type": "text",
                              "value": "",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "className": "",
                              "handleChange": [Function],
                              "handleClick": undefined,
                              "id": "item",
                              "isRequired": "required",
                              "label": "Item:",
                              "name": "item",
                              "type": "text",
                              "value": "",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 60,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 6,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {},
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {},
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 61,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": FiberNode {
                                  "_debugID": 73,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 0,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "children": "Model:",
                                    "htmlFor": "model",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "children": "Model:",
                                    "htmlFor": "model",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugID": 74,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": null,
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "effectTag": 0,
                                    "expirationTime": 0,
                                    "firstContextDependency": null,
                                    "firstEffect": null,
                                    "index": 1,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "className": "",
                                      "id": "model",
                                      "name": "model",
                                      "onChange": [Function],
                                      "onClick": undefined,
                                      "required": "required",
                                      "type": "text",
                                      "value": "",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "className": "",
                                      "id": "model",
                                      "name": "model",
                                      "onChange": [Function],
                                      "onClick": undefined,
                                      "required": "required",
                                      "type": "text",
                                      "value": "",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode": <input
                                      class=""
                                      id="model"
                                      name="model"
                                      required=""
                                      type="text"
                                      value=""
                                    />,
                                    "tag": 7,
                                    "treeBaseDuration": 0,
                                    "type": "input",
                                    "updateQueue": null,
                                  },
                                  "stateNode": <label
                                    for="model"
                                  >
                                    Model:
                                  </label>,
                                  "tag": 7,
                                  "treeBaseDuration": 0,
                                  "type": "label",
                                  "updateQueue": null,
                                },
                                "childExpirationTime": 0,
                                "effectTag": 1,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 7,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "className": "",
                                  "handleChange": [Function],
                                  "handleClick": undefined,
                                  "id": "model",
                                  "isRequired": "required",
                                  "label": "Model:",
                                  "name": "model",
                                  "type": "text",
                                  "value": "",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "className": "",
                                  "handleChange": [Function],
                                  "handleClick": undefined,
                                  "id": "model",
                                  "isRequired": "required",
                                  "label": "Model:",
                                  "name": "model",
                                  "type": "text",
                                  "value": "",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugID": 62,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 8,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {},
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {},
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugID": 63,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": null,
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": FiberNode {
                                      "_debugID": 75,
                                      "_debugIsCurrentlyTiming": false,
                                      "_debugOwner": [Circular],
                                      "_debugSource": null,
                                      "actualDuration": 0,
                                      "actualStartTime": -1,
                                      "alternate": null,
                                      "child": null,
                                      "childExpirationTime": 0,
                                      "effectTag": 0,
                                      "expirationTime": 0,
                                      "firstContextDependency": null,
                                      "firstEffect": null,
                                      "index": 0,
                                      "key": null,
                                      "lastEffect": null,
                                      "memoizedProps": Object {
                                        "children": "Description:",
                                      },
                                      "memoizedState": null,
                                      "mode": 0,
                                      "nextEffect": null,
                                      "pendingProps": Object {
                                        "children": "Description:",
                                      },
                                      "ref": null,
                                      "return": [Circular],
                                      "selfBaseDuration": 0,
                                      "sibling": null,
                                      "stateNode": <span>
                                        Description:
                                      </span>,
                                      "tag": 7,
                                      "treeBaseDuration": 0,
                                      "type": "span",
                                      "updateQueue": null,
                                    },
                                    "childExpirationTime": 0,
                                    "effectTag": 0,
                                    "expirationTime": 0,
                                    "firstContextDependency": null,
                                    "firstEffect": null,
                                    "index": 9,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "children": <span>
                                        Description:
                                      </span>,
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "children": <span>
                                        Description:
                                      </span>,
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": FiberNode {
                                      "_debugID": 64,
                                      "_debugIsCurrentlyTiming": false,
                                      "_debugOwner": [Circular],
                                      "_debugSource": null,
                                      "actualDuration": 0,
                                      "actualStartTime": -1,
                                      "alternate": null,
                                      "child": null,
                                      "childExpirationTime": 0,
                                      "effectTag": 0,
                                      "expirationTime": 0,
                                      "firstContextDependency": null,
                                      "firstEffect": null,
                                      "index": 10,
                                      "key": null,
                                      "lastEffect": null,
                                      "memoizedProps": Object {
                                        "cols": "40",
                                        "id": "detail",
                                        "name": "detail",
                                        "onChange": [Function],
                                        "required": "required",
                                        "type": "text",
                                        "value": "",
                                      },
                                      "memoizedState": null,
                                      "mode": 0,
                                      "nextEffect": null,
                                      "pendingProps": Object {
                                        "cols": "40",
                                        "id": "detail",
                                        "name": "detail",
                                        "onChange": [Function],
                                        "required": "required",
                                        "type": "text",
                                        "value": "",
                                      },
                                      "ref": null,
                                      "return": [Circular],
                                      "selfBaseDuration": 0,
                                      "sibling": FiberNode {
                                        "_debugID": 65,
                                        "_debugIsCurrentlyTiming": false,
                                        "_debugOwner": [Circular],
                                        "_debugSource": null,
                                        "actualDuration": 0,
                                        "actualStartTime": -1,
                                        "alternate": null,
                                        "child": FiberNode {
                                          "_debugID": 76,
                                          "_debugIsCurrentlyTiming": false,
                                          "_debugOwner": [Circular],
                                          "_debugSource": null,
                                          "actualDuration": 0,
                                          "actualStartTime": -1,
                                          "alternate": null,
                                          "child": null,
                                          "childExpirationTime": 0,
                                          "effectTag": 0,
                                          "expirationTime": 0,
                                          "firstContextDependency": null,
                                          "firstEffect": null,
                                          "index": 0,
                                          "key": null,
                                          "lastEffect": null,
                                          "memoizedProps": Object {
                                            "children": undefined,
                                            "htmlFor": undefined,
                                          },
                                          "memoizedState": null,
                                          "mode": 0,
                                          "nextEffect": null,
                                          "pendingProps": Object {
                                            "children": undefined,
                                            "htmlFor": undefined,
                                          },
                                          "ref": null,
                                          "return": [Circular],
                                          "selfBaseDuration": 0,
                                          "sibling": FiberNode {
                                            "_debugID": 77,
                                            "_debugIsCurrentlyTiming": false,
                                            "_debugOwner": [Circular],
                                            "_debugSource": null,
                                            "actualDuration": 0,
                                            "actualStartTime": -1,
                                            "alternate": null,
                                            "child": null,
                                            "childExpirationTime": 0,
                                            "effectTag": 0,
                                            "expirationTime": 0,
                                            "firstContextDependency": null,
                                            "firstEffect": null,
                                            "index": 1,
                                            "key": null,
                                            "lastEffect": null,
                                            "memoizedProps": Object {
                                              "className": "white auth-submit-btn",
                                              "id": "new-request-btn",
                                              "name": undefined,
                                              "onChange": undefined,
                                              "onClick": undefined,
                                              "required": "",
                                              "type": "submit",
                                              "value": "Submit",
                                            },
                                            "memoizedState": null,
                                            "mode": 0,
                                            "nextEffect": null,
                                            "pendingProps": Object {
                                              "className": "white auth-submit-btn",
                                              "id": "new-request-btn",
                                              "name": undefined,
                                              "onChange": undefined,
                                              "onClick": undefined,
                                              "required": "",
                                              "type": "submit",
                                              "value": "Submit",
                                            },
                                            "ref": null,
                                            "return": [Circular],
                                            "selfBaseDuration": 0,
                                            "sibling": null,
                                            "stateNode": <input
                                              class="white auth-submit-btn"
                                              id="new-request-btn"
                                              type="submit"
                                              value="Submit"
                                            />,
                                            "tag": 7,
                                            "treeBaseDuration": 0,
                                            "type": "input",
                                            "updateQueue": null,
                                          },
                                          "stateNode": <label />,
                                          "tag": 7,
                                          "treeBaseDuration": 0,
                                          "type": "label",
                                          "updateQueue": null,
                                        },
                                        "childExpirationTime": 0,
                                        "effectTag": 1,
                                        "expirationTime": 0,
                                        "firstContextDependency": null,
                                        "firstEffect": null,
                                        "index": 11,
                                        "key": null,
                                        "lastEffect": null,
                                        "memoizedProps": Object {
                                          "className": "white auth-submit-btn",
                                          "handleChange": undefined,
                                          "handleClick": undefined,
                                          "id": "new-request-btn",
                                          "isRequired": "",
                                          "label": undefined,
                                          "name": undefined,
                                          "type": "submit",
                                          "value": "Submit",
                                        },
                                        "memoizedState": null,
                                        "mode": 0,
                                        "nextEffect": null,
                                        "pendingProps": Object {
                                          "className": "white auth-submit-btn",
                                          "handleChange": undefined,
                                          "handleClick": undefined,
                                          "id": "new-request-btn",
                                          "isRequired": "",
                                          "label": undefined,
                                          "name": undefined,
                                          "type": "submit",
                                          "value": "Submit",
                                        },
                                        "ref": null,
                                        "return": [Circular],
                                        "selfBaseDuration": 0,
                                        "sibling": null,
                                        "stateNode": null,
                                        "tag": 0,
                                        "treeBaseDuration": 0,
                                        "type": [Function],
                                        "updateQueue": null,
                                      },
                                      "stateNode": <textarea
                                        cols="40"
                                        id="detail"
                                        name="detail"
                                        required=""
                                        type="text"
                                      />,
                                      "tag": 7,
                                      "treeBaseDuration": 0,
                                      "type": "textarea",
                                      "updateQueue": null,
                                    },
                                    "stateNode": <label>
                                      <span>
                                        Description:
                                      </span>
                                    </label>,
                                    "tag": 7,
                                    "treeBaseDuration": 0,
                                    "type": "label",
                                    "updateQueue": null,
                                  },
                                  "stateNode": <br />,
                                  "tag": 7,
                                  "treeBaseDuration": 0,
                                  "type": "br",
                                  "updateQueue": null,
                                },
                                "stateNode": null,
                                "tag": 0,
                                "treeBaseDuration": 0,
                                "type": [Function],
                                "updateQueue": null,
                              },
                              "stateNode": <br />,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "br",
                              "updateQueue": null,
                            },
                            "stateNode": null,
                            "tag": 0,
                            "treeBaseDuration": 0,
                            "type": [Function],
                            "updateQueue": null,
                          },
                          "stateNode": <br />,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "br",
                          "updateQueue": null,
                        },
                        "stateNode": <select
                          class="transparent-selector"
                          id="type"
                          name="type"
                          required=""
                        >
                          <option
                            disabled=""
                            value=""
                          >
                            Select request type
                          </option>
                          <option
                            value="maintenance"
                          >
                            Maintenance
                          </option>
                          <option
                            value="repair"
                          >
                            Repair
                          </option>
                        </select>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "select",
                        "updateQueue": null,
                      },
                      "stateNode": <label
                        class="left orange center"
                        id="title"
                      >
                        Create a new request
                      </label>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "stateNode": null,
                    "tag": 0,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "stateNode": <span
                    class="close-btn grey right"
                    id="sign-up-form-close-btn"
                  >
                    x
                  </span>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "span",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <span
                      className="close-btn grey right"
                      id="sign-up-form-close-btn"
                    >
                      x
                    </span>,
                    <Input
                      className=""
                      id=""
                      isRequired=""
                      name="id"
                      type="hidden"
                    />,
                    <label
                      className="left orange center"
                      id="title"
                    >
                      Create a new request
                    </label>,
                    <select
                      className="transparent-selector"
                      id="type"
                      name="type"
                      onChange={[Function]}
                      required="required"
                      value=""
                    >
                      <option
                        disabled={true}
                        value=""
                      >
                        Select request type
                      </option>
                      <option
                        value="maintenance"
                      >
                        Maintenance
                      </option>
                      <option
                        value="repair"
                      >
                        Repair
                      </option>
                    </select>,
                    <br />,
                    <Input
                      className=""
                      handleChange={[Function]}
                      id="item"
                      isRequired="required"
                      label="Item:"
                      name="item"
                      type="text"
                      value=""
                    />,
                    <br />,
                    <Input
                      className=""
                      handleChange={[Function]}
                      id="model"
                      isRequired="required"
                      label="Model:"
                      name="model"
                      type="text"
                      value=""
                    />,
                    <br />,
                    <label>
                      <span>
                        Description:
                      </span>
                    </label>,
                    <textarea
                      cols="40"
                      id="detail"
                      name="detail"
                      onChange={[Function]}
                      required="required"
                      type="text"
                      value=""
                    />,
                    <Input
                      className="white auth-submit-btn"
                      id="new-request-btn"
                      isRequired=""
                      type="submit"
                      value="Submit"
                    />,
                  ],
                  "className": "form request-form",
                  "id": "new-request-form",
                  "onSubmit": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <span
                      className="close-btn grey right"
                      id="sign-up-form-close-btn"
                    >
                      x
                    </span>,
                    <Input
                      className=""
                      id=""
                      isRequired=""
                      name="id"
                      type="hidden"
                    />,
                    <label
                      className="left orange center"
                      id="title"
                    >
                      Create a new request
                    </label>,
                    <select
                      className="transparent-selector"
                      id="type"
                      name="type"
                      onChange={[Function]}
                      required="required"
                      value=""
                    >
                      <option
                        disabled={true}
                        value=""
                      >
                        Select request type
                      </option>
                      <option
                        value="maintenance"
                      >
                        Maintenance
                      </option>
                      <option
                        value="repair"
                      >
                        Repair
                      </option>
                    </select>,
                    <br />,
                    <Input
                      className=""
                      handleChange={[Function]}
                      id="item"
                      isRequired="required"
                      label="Item:"
                      name="item"
                      type="text"
                      value=""
                    />,
                    <br />,
                    <Input
                      className=""
                      handleChange={[Function]}
                      id="model"
                      isRequired="required"
                      label="Model:"
                      name="model"
                      type="text"
                      value=""
                    />,
                    <br />,
                    <label>
                      <span>
                        Description:
                      </span>
                    </label>,
                    <textarea
                      cols="40"
                      id="detail"
                      name="detail"
                      onChange={[Function]}
                      required="required"
                      type="text"
                      value=""
                    />,
                    <Input
                      className="white auth-submit-btn"
                      id="new-request-btn"
                      isRequired=""
                      type="submit"
                      value="Submit"
                    />,
                  ],
                  "className": "form request-form",
                  "id": "new-request-form",
                  "onSubmit": [Function],
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <form
                  class="form request-form"
                  id="new-request-form"
                >
                  <span
                    class="close-btn grey right"
                    id="sign-up-form-close-btn"
                  >
                    x
                  </span>
                  <label
                    for="id"
                  />
                  <input
                    class=""
                    id=""
                    name="id"
                    type="hidden"
                    value=""
                  />
                  <label
                    class="left orange center"
                    id="title"
                  >
                    Create a new request
                  </label>
                  <select
                    class="transparent-selector"
                    id="type"
                    name="type"
                    required=""
                  >
                    <option
                      disabled=""
                      value=""
                    >
                      Select request type
                    </option>
                    <option
                      value="maintenance"
                    >
                      Maintenance
                    </option>
                    <option
                      value="repair"
                    >
                      Repair
                    </option>
                  </select>
                  <br />
                  <label
                    for="item"
                  >
                    Item:
                  </label>
                  <input
                    class=""
                    id="item"
                    name="item"
                    required=""
                    type="text"
                    value=""
                  />
                  <br />
                  <label
                    for="model"
                  >
                    Model:
                  </label>
                  <input
                    class=""
                    id="model"
                    name="model"
                    required=""
                    type="text"
                    value=""
                  />
                  <br />
                  <label>
                    <span>
                      Description:
                    </span>
                  </label>
                  <textarea
                    cols="40"
                    id="detail"
                    name="detail"
                    required=""
                    type="text"
                  />
                  <label />
                  <input
                    class="white auth-submit-btn"
                    id="new-request-btn"
                    type="submit"
                    value="Submit"
                  />
                </form>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "form",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "createRequest": undefined,
                "handleClose": undefined,
                "initialValues": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "updateRequest": undefined,
              },
              "memoizedState": Object {
                "detail": "",
                "id": undefined,
                "item": "",
                "model": "",
                "type": "",
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "createRequest": undefined,
                "handleClose": undefined,
                "initialValues": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "updateRequest": undefined,
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": RequestForm {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "handleChange": [Function],
                "handleSubmit": [Function],
                "props": Object {
                  "createRequest": undefined,
                  "handleClose": undefined,
                  "initialValues": undefined,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "updateRequest": undefined,
                },
                "refs": Object {},
                "state": Object {
                  "detail": "",
                  "id": undefined,
                  "item": "",
                  "model": "",
                  "type": "",
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": <RequestForm
                store={
                  Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  }
                }
              />,
              "history": Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              },
            },
            "memoizedState": Object {
              "match": Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": <RequestForm
                store={
                  Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  }
                }
              />,
              "history": Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              },
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Router {
              "__reactInternalMemoizedMaskedChildContext": Object {
                "router": undefined,
              },
              "__reactInternalMemoizedMergedChildContext": Object {
                "router": Object {
                  "history": Object {
                    "action": "POP",
                    "block": [Function],
                    "createHref": [Function],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  },
                  "route": Object {
                    "location": Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                    "match": Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    },
                  },
                },
              },
              "__reactInternalMemoizedUnmaskedChildContext": Object {},
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {
                "router": undefined,
              },
              "props": Object {
                "children": <RequestForm
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                />,
                "history": Object {
                  "action": "POP",
                  "block": [Function],
                  "createHref": [Function],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                },
              },
              "refs": Object {},
              "state": Object {
                "match": Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                },
              },
              "unlisten": [Function],
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "effectTag": 1,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "children": <RequestForm
              store={
                Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                }
              }
            />,
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "children": <RequestForm
              store={
                Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                }
              }
            />,
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 49,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <RequestForm
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                />,
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <RequestForm
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                />,
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <RequestForm
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                />,
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 1,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <form
                      class="form request-form"
                      id="new-request-form"
                    >
                      <span
                        class="close-btn grey right"
                        id="sign-up-form-close-btn"
                      >
                        x
                      </span>
                      <label
                        for="id"
                      />
                      <input
                        class=""
                        id=""
                        name="id"
                        type="hidden"
                        value=""
                      />
                      <label
                        class="left orange center"
                        id="title"
                      >
                        Create a new request
                      </label>
                      <select
                        class="transparent-selector"
                        id="type"
                        name="type"
                        required=""
                      >
                        <option
                          disabled=""
                          value=""
                        >
                          Select request type
                        </option>
                        <option
                          value="maintenance"
                        >
                          Maintenance
                        </option>
                        <option
                          value="repair"
                        >
                          Repair
                        </option>
                      </select>
                      <br />
                      <label
                        for="item"
                      >
                        Item:
                      </label>
                      <input
                        class=""
                        id="item"
                        name="item"
                        required=""
                        type="text"
                        value=""
                      />
                      <br />
                      <label
                        for="model"
                      >
                        Model:
                      </label>
                      <input
                        class=""
                        id="model"
                        name="model"
                        required=""
                        type="text"
                        value=""
                      />
                      <br />
                      <label>
                        <span>
                          Description:
                        </span>
                      </label>
                      <textarea
                        cols="40"
                        id="detail"
                        name="detail"
                        required=""
                        type="text"
                      />
                      <label />
                      <input
                        class="white auth-submit-btn"
                        id="new-request-btn"
                        type="submit"
                        value="Submit"
                      />
                    </form>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "timeoutHandle": -1,
                },
                "tag": 5,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <RequestForm
                              store={
                                Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                }
                              }
                            />,
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <RequestForm
                              store={
                                Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                }
                              }
                            />,
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 32,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <form
                    class="form request-form"
                    id="new-request-form"
                  >
                    <span
                      class="close-btn grey right"
                      id="sign-up-form-close-btn"
                    >
                      x
                    </span>
                    <label
                      for="id"
                    />
                    <input
                      class=""
                      id=""
                      name="id"
                      type="hidden"
                      value=""
                    />
                    <label
                      class="left orange center"
                      id="title"
                    >
                      Create a new request
                    </label>
                    <select
                      class="transparent-selector"
                      id="type"
                      name="type"
                      required=""
                    >
                      <option
                        disabled=""
                        value=""
                      >
                        Select request type
                      </option>
                      <option
                        value="maintenance"
                      >
                        Maintenance
                      </option>
                      <option
                        value="repair"
                      >
                        Repair
                      </option>
                    </select>
                    <br />
                    <label
                      for="item"
                    >
                      Item:
                    </label>
                    <input
                      class=""
                      id="item"
                      name="item"
                      required=""
                      type="text"
                      value=""
                    />
                    <br />
                    <label
                      for="model"
                    >
                      Model:
                    </label>
                    <input
                      class=""
                      id="model"
                      name="model"
                      required=""
                      type="text"
                      value=""
                    />
                    <br />
                    <label>
                      <span>
                        Description:
                      </span>
                    </label>
                    <textarea
                      cols="40"
                      id="detail"
                      name="detail"
                      required=""
                      type="text"
                    />
                    <label />
                    <input
                      class="white auth-submit-btn"
                      id="new-request-btn"
                      type="submit"
                      value="Submit"
                    />
                  </form>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "timeoutHandle": -1,
              },
              "tag": 5,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      }
                    }
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": [Circular],
          "tag": 2,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {},
        "history": Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        },
        "props": Object {
          "children": <RequestForm
            store={
              Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              }
            }
          />,
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <RequestForm
          store={
            Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            }
          }
        />,
      },
      "ref": null,
      "rendered": Object {
        "instance": Router {
          "__reactInternalMemoizedMaskedChildContext": Object {
            "router": undefined,
          },
          "__reactInternalMemoizedMergedChildContext": Object {
            "router": Object {
              "history": Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              },
              "route": Object {
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "match": Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                },
              },
            },
          },
          "__reactInternalMemoizedUnmaskedChildContext": Object {},
          "_reactInternalFiber": FiberNode {
            "_debugID": 51,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": FiberNode {
              "_debugID": 50,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugID": 49,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 1,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <form
                          class="form request-form"
                          id="new-request-form"
                        >
                          <span
                            class="close-btn grey right"
                            id="sign-up-form-close-btn"
                          >
                            x
                          </span>
                          <label
                            for="id"
                          />
                          <input
                            class=""
                            id=""
                            name="id"
                            type="hidden"
                            value=""
                          />
                          <label
                            class="left orange center"
                            id="title"
                          >
                            Create a new request
                          </label>
                          <select
                            class="transparent-selector"
                            id="type"
                            name="type"
                            required=""
                          >
                            <option
                              disabled=""
                              value=""
                            >
                              Select request type
                            </option>
                            <option
                              value="maintenance"
                            >
                              Maintenance
                            </option>
                            <option
                              value="repair"
                            >
                              Repair
                            </option>
                          </select>
                          <br />
                          <label
                            for="item"
                          >
                            Item:
                          </label>
                          <input
                            class=""
                            id="item"
                            name="item"
                            required=""
                            type="text"
                            value=""
                          />
                          <br />
                          <label
                            for="model"
                          >
                            Model:
                          </label>
                          <input
                            class=""
                            id="model"
                            name="model"
                            required=""
                            type="text"
                            value=""
                          />
                          <br />
                          <label>
                            <span>
                              Description:
                            </span>
                          </label>
                          <textarea
                            cols="40"
                            id="detail"
                            name="detail"
                            required=""
                            type="text"
                          />
                          <label />
                          <input
                            class="white auth-submit-btn"
                            id="new-request-btn"
                            type="submit"
                            value="Submit"
                          />
                        </form>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <RequestForm
                                  store={
                                    Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    }
                                  }
                                />,
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <RequestForm
                                  store={
                                    Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    }
                                  }
                                />,
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 32,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <RequestForm
                            store={
                              Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              }
                            }
                          />,
                        }
                      }
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <form
                        class="form request-form"
                        id="new-request-form"
                      >
                        <span
                          class="close-btn grey right"
                          id="sign-up-form-close-btn"
                        >
                          x
                        </span>
                        <label
                          for="id"
                        />
                        <input
                          class=""
                          id=""
                          name="id"
                          type="hidden"
                          value=""
                        />
                        <label
                          class="left orange center"
                          id="title"
                        >
                          Create a new request
                        </label>
                        <select
                          class="transparent-selector"
                          id="type"
                          name="type"
                          required=""
                        >
                          <option
                            disabled=""
                            value=""
                          >
                            Select request type
                          </option>
                          <option
                            value="maintenance"
                          >
                            Maintenance
                          </option>
                          <option
                            value="repair"
                          >
                            Repair
                          </option>
                        </select>
                        <br />
                        <label
                          for="item"
                        >
                          Item:
                        </label>
                        <input
                          class=""
                          id="item"
                          name="item"
                          required=""
                          type="text"
                          value=""
                        />
                        <br />
                        <label
                          for="model"
                        >
                          Model:
                        </label>
                        <input
                          class=""
                          id="model"
                          name="model"
                          required=""
                          type="text"
                          value=""
                        />
                        <br />
                        <label>
                          <span>
                            Description:
                          </span>
                        </label>
                        <textarea
                          cols="40"
                          id="detail"
                          name="detail"
                          required=""
                          type="text"
                        />
                        <label />
                        <input
                          class="white auth-submit-btn"
                          id="new-request-btn"
                          type="submit"
                          value="Submit"
                        />
                      </form>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <RequestForm
                              store={
                                Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                }
                              }
                            />,
                          }
                        }
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": <RequestForm
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                />,
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": <RequestForm
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                />,
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 49,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 1,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <form
                          class="form request-form"
                          id="new-request-form"
                        >
                          <span
                            class="close-btn grey right"
                            id="sign-up-form-close-btn"
                          >
                            x
                          </span>
                          <label
                            for="id"
                          />
                          <input
                            class=""
                            id=""
                            name="id"
                            type="hidden"
                            value=""
                          />
                          <label
                            class="left orange center"
                            id="title"
                          >
                            Create a new request
                          </label>
                          <select
                            class="transparent-selector"
                            id="type"
                            name="type"
                            required=""
                          >
                            <option
                              disabled=""
                              value=""
                            >
                              Select request type
                            </option>
                            <option
                              value="maintenance"
                            >
                              Maintenance
                            </option>
                            <option
                              value="repair"
                            >
                              Repair
                            </option>
                          </select>
                          <br />
                          <label
                            for="item"
                          >
                            Item:
                          </label>
                          <input
                            class=""
                            id="item"
                            name="item"
                            required=""
                            type="text"
                            value=""
                          />
                          <br />
                          <label
                            for="model"
                          >
                            Model:
                          </label>
                          <input
                            class=""
                            id="model"
                            name="model"
                            required=""
                            type="text"
                            value=""
                          />
                          <br />
                          <label>
                            <span>
                              Description:
                            </span>
                          </label>
                          <textarea
                            cols="40"
                            id="detail"
                            name="detail"
                            required=""
                            type="text"
                          />
                          <label />
                          <input
                            class="white auth-submit-btn"
                            id="new-request-btn"
                            type="submit"
                            value="Submit"
                          />
                        </form>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <RequestForm
                                  store={
                                    Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    }
                                  }
                                />,
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <RequestForm
                                  store={
                                    Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    }
                                  }
                                />,
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 32,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <RequestForm
                            store={
                              Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              }
                            }
                          />,
                        }
                      }
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <form
                        class="form request-form"
                        id="new-request-form"
                      >
                        <span
                          class="close-btn grey right"
                          id="sign-up-form-close-btn"
                        >
                          x
                        </span>
                        <label
                          for="id"
                        />
                        <input
                          class=""
                          id=""
                          name="id"
                          type="hidden"
                          value=""
                        />
                        <label
                          class="left orange center"
                          id="title"
                        >
                          Create a new request
                        </label>
                        <select
                          class="transparent-selector"
                          id="type"
                          name="type"
                          required=""
                        >
                          <option
                            disabled=""
                            value=""
                          >
                            Select request type
                          </option>
                          <option
                            value="maintenance"
                          >
                            Maintenance
                          </option>
                          <option
                            value="repair"
                          >
                            Repair
                          </option>
                        </select>
                        <br />
                        <label
                          for="item"
                        >
                          Item:
                        </label>
                        <input
                          class=""
                          id="item"
                          name="item"
                          required=""
                          type="text"
                          value=""
                        />
                        <br />
                        <label
                          for="model"
                        >
                          Model:
                        </label>
                        <input
                          class=""
                          id="model"
                          name="model"
                          required=""
                          type="text"
                          value=""
                        />
                        <br />
                        <label>
                          <span>
                            Description:
                          </span>
                        </label>
                        <textarea
                          cols="40"
                          id="detail"
                          name="detail"
                          required=""
                          type="text"
                        />
                        <label />
                        <input
                          class="white auth-submit-btn"
                          id="new-request-btn"
                          type="submit"
                          value="Submit"
                        />
                      </form>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <RequestForm
                              store={
                                Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                }
                              }
                            />,
                          }
                        }
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": BrowserRouter {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "history": Object {
                  "action": "POP",
                  "block": [Function],
                  "createHref": [Function],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                },
                "props": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
                "refs": Object {},
                "state": null,
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 52,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 53,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 54,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": "x",
                    "className": "close-btn grey right",
                    "id": "sign-up-form-close-btn",
                    "onClick": undefined,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": "x",
                    "className": "close-btn grey right",
                    "id": "sign-up-form-close-btn",
                    "onClick": undefined,
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 55,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 66,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": undefined,
                        "htmlFor": "id",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": undefined,
                        "htmlFor": "id",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 67,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "className": "",
                          "id": "",
                          "name": "id",
                          "onChange": undefined,
                          "onClick": undefined,
                          "required": "",
                          "type": "hidden",
                          "value": undefined,
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "className": "",
                          "id": "",
                          "name": "id",
                          "onChange": undefined,
                          "onClick": undefined,
                          "required": "",
                          "type": "hidden",
                          "value": undefined,
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <input
                          class=""
                          id=""
                          name="id"
                          type="hidden"
                          value=""
                        />,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "stateNode": <label
                        for="id"
                      />,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 1,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "className": "",
                      "handleChange": undefined,
                      "handleClick": undefined,
                      "id": "",
                      "isRequired": "",
                      "label": undefined,
                      "name": "id",
                      "type": "hidden",
                      "value": undefined,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "className": "",
                      "handleChange": undefined,
                      "handleClick": undefined,
                      "id": "",
                      "isRequired": "",
                      "label": undefined,
                      "name": "id",
                      "type": "hidden",
                      "value": undefined,
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 56,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Create a new request",
                        "className": "left orange center",
                        "id": "title",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Create a new request",
                        "className": "left orange center",
                        "id": "title",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 57,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 68,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "Select request type",
                            "disabled": true,
                            "value": "",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "Select request type",
                            "disabled": true,
                            "value": "",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 69,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": "Maintenance",
                              "value": "maintenance",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": "Maintenance",
                              "value": "maintenance",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 70,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 2,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": "Repair",
                                "value": "repair",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": "Repair",
                                "value": "repair",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <option
                                value="repair"
                              >
                                Repair
                              </option>,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "option",
                              "updateQueue": null,
                            },
                            "stateNode": <option
                              value="maintenance"
                            >
                              Maintenance
                            </option>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "option",
                            "updateQueue": null,
                          },
                          "stateNode": <option
                            disabled=""
                            value=""
                          >
                            Select request type
                          </option>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "option",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 3,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <option
                              disabled={true}
                              value=""
                            >
                              Select request type
                            </option>,
                            <option
                              value="maintenance"
                            >
                              Maintenance
                            </option>,
                            <option
                              value="repair"
                            >
                              Repair
                            </option>,
                          ],
                          "className": "transparent-selector",
                          "id": "type",
                          "name": "type",
                          "onChange": [Function],
                          "required": "required",
                          "value": "",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <option
                              disabled={true}
                              value=""
                            >
                              Select request type
                            </option>,
                            <option
                              value="maintenance"
                            >
                              Maintenance
                            </option>,
                            <option
                              value="repair"
                            >
                              Repair
                            </option>,
                          ],
                          "className": "transparent-selector",
                          "id": "type",
                          "name": "type",
                          "onChange": [Function],
                          "required": "required",
                          "value": "",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 58,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 4,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {},
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {},
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 59,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 71,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": "Item:",
                                "htmlFor": "item",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": "Item:",
                                "htmlFor": "item",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 72,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 1,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "className": "",
                                  "id": "item",
                                  "name": "item",
                                  "onChange": [Function],
                                  "onClick": undefined,
                                  "required": "required",
                                  "type": "text",
                                  "value": "",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "className": "",
                                  "id": "item",
                                  "name": "item",
                                  "onChange": [Function],
                                  "onClick": undefined,
                                  "required": "required",
                                  "type": "text",
                                  "value": "",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <input
                                  class=""
                                  id="item"
                                  name="item"
                                  required=""
                                  type="text"
                                  value=""
                                />,
                                "tag": 7,
                                "treeBaseDuration": 0,
                                "type": "input",
                                "updateQueue": null,
                              },
                              "stateNode": <label
                                for="item"
                              >
                                Item:
                              </label>,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "label",
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "effectTag": 1,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 5,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "className": "",
                              "handleChange": [Function],
                              "handleClick": undefined,
                              "id": "item",
                              "isRequired": "required",
                              "label": "Item:",
                              "name": "item",
                              "type": "text",
                              "value": "",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "className": "",
                              "handleChange": [Function],
                              "handleClick": undefined,
                              "id": "item",
                              "isRequired": "required",
                              "label": "Item:",
                              "name": "item",
                              "type": "text",
                              "value": "",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 60,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 6,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {},
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {},
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 61,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": FiberNode {
                                  "_debugID": 73,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 0,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "children": "Model:",
                                    "htmlFor": "model",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "children": "Model:",
                                    "htmlFor": "model",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugID": 74,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": null,
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "effectTag": 0,
                                    "expirationTime": 0,
                                    "firstContextDependency": null,
                                    "firstEffect": null,
                                    "index": 1,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "className": "",
                                      "id": "model",
                                      "name": "model",
                                      "onChange": [Function],
                                      "onClick": undefined,
                                      "required": "required",
                                      "type": "text",
                                      "value": "",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "className": "",
                                      "id": "model",
                                      "name": "model",
                                      "onChange": [Function],
                                      "onClick": undefined,
                                      "required": "required",
                                      "type": "text",
                                      "value": "",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode": <input
                                      class=""
                                      id="model"
                                      name="model"
                                      required=""
                                      type="text"
                                      value=""
                                    />,
                                    "tag": 7,
                                    "treeBaseDuration": 0,
                                    "type": "input",
                                    "updateQueue": null,
                                  },
                                  "stateNode": <label
                                    for="model"
                                  >
                                    Model:
                                  </label>,
                                  "tag": 7,
                                  "treeBaseDuration": 0,
                                  "type": "label",
                                  "updateQueue": null,
                                },
                                "childExpirationTime": 0,
                                "effectTag": 1,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 7,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "className": "",
                                  "handleChange": [Function],
                                  "handleClick": undefined,
                                  "id": "model",
                                  "isRequired": "required",
                                  "label": "Model:",
                                  "name": "model",
                                  "type": "text",
                                  "value": "",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "className": "",
                                  "handleChange": [Function],
                                  "handleClick": undefined,
                                  "id": "model",
                                  "isRequired": "required",
                                  "label": "Model:",
                                  "name": "model",
                                  "type": "text",
                                  "value": "",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugID": 62,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 8,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {},
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {},
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugID": 63,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": null,
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": FiberNode {
                                      "_debugID": 75,
                                      "_debugIsCurrentlyTiming": false,
                                      "_debugOwner": [Circular],
                                      "_debugSource": null,
                                      "actualDuration": 0,
                                      "actualStartTime": -1,
                                      "alternate": null,
                                      "child": null,
                                      "childExpirationTime": 0,
                                      "effectTag": 0,
                                      "expirationTime": 0,
                                      "firstContextDependency": null,
                                      "firstEffect": null,
                                      "index": 0,
                                      "key": null,
                                      "lastEffect": null,
                                      "memoizedProps": Object {
                                        "children": "Description:",
                                      },
                                      "memoizedState": null,
                                      "mode": 0,
                                      "nextEffect": null,
                                      "pendingProps": Object {
                                        "children": "Description:",
                                      },
                                      "ref": null,
                                      "return": [Circular],
                                      "selfBaseDuration": 0,
                                      "sibling": null,
                                      "stateNode": <span>
                                        Description:
                                      </span>,
                                      "tag": 7,
                                      "treeBaseDuration": 0,
                                      "type": "span",
                                      "updateQueue": null,
                                    },
                                    "childExpirationTime": 0,
                                    "effectTag": 0,
                                    "expirationTime": 0,
                                    "firstContextDependency": null,
                                    "firstEffect": null,
                                    "index": 9,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "children": <span>
                                        Description:
                                      </span>,
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "children": <span>
                                        Description:
                                      </span>,
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": FiberNode {
                                      "_debugID": 64,
                                      "_debugIsCurrentlyTiming": false,
                                      "_debugOwner": [Circular],
                                      "_debugSource": null,
                                      "actualDuration": 0,
                                      "actualStartTime": -1,
                                      "alternate": null,
                                      "child": null,
                                      "childExpirationTime": 0,
                                      "effectTag": 0,
                                      "expirationTime": 0,
                                      "firstContextDependency": null,
                                      "firstEffect": null,
                                      "index": 10,
                                      "key": null,
                                      "lastEffect": null,
                                      "memoizedProps": Object {
                                        "cols": "40",
                                        "id": "detail",
                                        "name": "detail",
                                        "onChange": [Function],
                                        "required": "required",
                                        "type": "text",
                                        "value": "",
                                      },
                                      "memoizedState": null,
                                      "mode": 0,
                                      "nextEffect": null,
                                      "pendingProps": Object {
                                        "cols": "40",
                                        "id": "detail",
                                        "name": "detail",
                                        "onChange": [Function],
                                        "required": "required",
                                        "type": "text",
                                        "value": "",
                                      },
                                      "ref": null,
                                      "return": [Circular],
                                      "selfBaseDuration": 0,
                                      "sibling": FiberNode {
                                        "_debugID": 65,
                                        "_debugIsCurrentlyTiming": false,
                                        "_debugOwner": [Circular],
                                        "_debugSource": null,
                                        "actualDuration": 0,
                                        "actualStartTime": -1,
                                        "alternate": null,
                                        "child": FiberNode {
                                          "_debugID": 76,
                                          "_debugIsCurrentlyTiming": false,
                                          "_debugOwner": [Circular],
                                          "_debugSource": null,
                                          "actualDuration": 0,
                                          "actualStartTime": -1,
                                          "alternate": null,
                                          "child": null,
                                          "childExpirationTime": 0,
                                          "effectTag": 0,
                                          "expirationTime": 0,
                                          "firstContextDependency": null,
                                          "firstEffect": null,
                                          "index": 0,
                                          "key": null,
                                          "lastEffect": null,
                                          "memoizedProps": Object {
                                            "children": undefined,
                                            "htmlFor": undefined,
                                          },
                                          "memoizedState": null,
                                          "mode": 0,
                                          "nextEffect": null,
                                          "pendingProps": Object {
                                            "children": undefined,
                                            "htmlFor": undefined,
                                          },
                                          "ref": null,
                                          "return": [Circular],
                                          "selfBaseDuration": 0,
                                          "sibling": FiberNode {
                                            "_debugID": 77,
                                            "_debugIsCurrentlyTiming": false,
                                            "_debugOwner": [Circular],
                                            "_debugSource": null,
                                            "actualDuration": 0,
                                            "actualStartTime": -1,
                                            "alternate": null,
                                            "child": null,
                                            "childExpirationTime": 0,
                                            "effectTag": 0,
                                            "expirationTime": 0,
                                            "firstContextDependency": null,
                                            "firstEffect": null,
                                            "index": 1,
                                            "key": null,
                                            "lastEffect": null,
                                            "memoizedProps": Object {
                                              "className": "white auth-submit-btn",
                                              "id": "new-request-btn",
                                              "name": undefined,
                                              "onChange": undefined,
                                              "onClick": undefined,
                                              "required": "",
                                              "type": "submit",
                                              "value": "Submit",
                                            },
                                            "memoizedState": null,
                                            "mode": 0,
                                            "nextEffect": null,
                                            "pendingProps": Object {
                                              "className": "white auth-submit-btn",
                                              "id": "new-request-btn",
                                              "name": undefined,
                                              "onChange": undefined,
                                              "onClick": undefined,
                                              "required": "",
                                              "type": "submit",
                                              "value": "Submit",
                                            },
                                            "ref": null,
                                            "return": [Circular],
                                            "selfBaseDuration": 0,
                                            "sibling": null,
                                            "stateNode": <input
                                              class="white auth-submit-btn"
                                              id="new-request-btn"
                                              type="submit"
                                              value="Submit"
                                            />,
                                            "tag": 7,
                                            "treeBaseDuration": 0,
                                            "type": "input",
                                            "updateQueue": null,
                                          },
                                          "stateNode": <label />,
                                          "tag": 7,
                                          "treeBaseDuration": 0,
                                          "type": "label",
                                          "updateQueue": null,
                                        },
                                        "childExpirationTime": 0,
                                        "effectTag": 1,
                                        "expirationTime": 0,
                                        "firstContextDependency": null,
                                        "firstEffect": null,
                                        "index": 11,
                                        "key": null,
                                        "lastEffect": null,
                                        "memoizedProps": Object {
                                          "className": "white auth-submit-btn",
                                          "handleChange": undefined,
                                          "handleClick": undefined,
                                          "id": "new-request-btn",
                                          "isRequired": "",
                                          "label": undefined,
                                          "name": undefined,
                                          "type": "submit",
                                          "value": "Submit",
                                        },
                                        "memoizedState": null,
                                        "mode": 0,
                                        "nextEffect": null,
                                        "pendingProps": Object {
                                          "className": "white auth-submit-btn",
                                          "handleChange": undefined,
                                          "handleClick": undefined,
                                          "id": "new-request-btn",
                                          "isRequired": "",
                                          "label": undefined,
                                          "name": undefined,
                                          "type": "submit",
                                          "value": "Submit",
                                        },
                                        "ref": null,
                                        "return": [Circular],
                                        "selfBaseDuration": 0,
                                        "sibling": null,
                                        "stateNode": null,
                                        "tag": 0,
                                        "treeBaseDuration": 0,
                                        "type": [Function],
                                        "updateQueue": null,
                                      },
                                      "stateNode": <textarea
                                        cols="40"
                                        id="detail"
                                        name="detail"
                                        required=""
                                        type="text"
                                      />,
                                      "tag": 7,
                                      "treeBaseDuration": 0,
                                      "type": "textarea",
                                      "updateQueue": null,
                                    },
                                    "stateNode": <label>
                                      <span>
                                        Description:
                                      </span>
                                    </label>,
                                    "tag": 7,
                                    "treeBaseDuration": 0,
                                    "type": "label",
                                    "updateQueue": null,
                                  },
                                  "stateNode": <br />,
                                  "tag": 7,
                                  "treeBaseDuration": 0,
                                  "type": "br",
                                  "updateQueue": null,
                                },
                                "stateNode": null,
                                "tag": 0,
                                "treeBaseDuration": 0,
                                "type": [Function],
                                "updateQueue": null,
                              },
                              "stateNode": <br />,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "br",
                              "updateQueue": null,
                            },
                            "stateNode": null,
                            "tag": 0,
                            "treeBaseDuration": 0,
                            "type": [Function],
                            "updateQueue": null,
                          },
                          "stateNode": <br />,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "br",
                          "updateQueue": null,
                        },
                        "stateNode": <select
                          class="transparent-selector"
                          id="type"
                          name="type"
                          required=""
                        >
                          <option
                            disabled=""
                            value=""
                          >
                            Select request type
                          </option>
                          <option
                            value="maintenance"
                          >
                            Maintenance
                          </option>
                          <option
                            value="repair"
                          >
                            Repair
                          </option>
                        </select>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "select",
                        "updateQueue": null,
                      },
                      "stateNode": <label
                        class="left orange center"
                        id="title"
                      >
                        Create a new request
                      </label>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "stateNode": null,
                    "tag": 0,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "stateNode": <span
                    class="close-btn grey right"
                    id="sign-up-form-close-btn"
                  >
                    x
                  </span>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "span",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <span
                      className="close-btn grey right"
                      id="sign-up-form-close-btn"
                    >
                      x
                    </span>,
                    <Input
                      className=""
                      id=""
                      isRequired=""
                      name="id"
                      type="hidden"
                    />,
                    <label
                      className="left orange center"
                      id="title"
                    >
                      Create a new request
                    </label>,
                    <select
                      className="transparent-selector"
                      id="type"
                      name="type"
                      onChange={[Function]}
                      required="required"
                      value=""
                    >
                      <option
                        disabled={true}
                        value=""
                      >
                        Select request type
                      </option>
                      <option
                        value="maintenance"
                      >
                        Maintenance
                      </option>
                      <option
                        value="repair"
                      >
                        Repair
                      </option>
                    </select>,
                    <br />,
                    <Input
                      className=""
                      handleChange={[Function]}
                      id="item"
                      isRequired="required"
                      label="Item:"
                      name="item"
                      type="text"
                      value=""
                    />,
                    <br />,
                    <Input
                      className=""
                      handleChange={[Function]}
                      id="model"
                      isRequired="required"
                      label="Model:"
                      name="model"
                      type="text"
                      value=""
                    />,
                    <br />,
                    <label>
                      <span>
                        Description:
                      </span>
                    </label>,
                    <textarea
                      cols="40"
                      id="detail"
                      name="detail"
                      onChange={[Function]}
                      required="required"
                      type="text"
                      value=""
                    />,
                    <Input
                      className="white auth-submit-btn"
                      id="new-request-btn"
                      isRequired=""
                      type="submit"
                      value="Submit"
                    />,
                  ],
                  "className": "form request-form",
                  "id": "new-request-form",
                  "onSubmit": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <span
                      className="close-btn grey right"
                      id="sign-up-form-close-btn"
                    >
                      x
                    </span>,
                    <Input
                      className=""
                      id=""
                      isRequired=""
                      name="id"
                      type="hidden"
                    />,
                    <label
                      className="left orange center"
                      id="title"
                    >
                      Create a new request
                    </label>,
                    <select
                      className="transparent-selector"
                      id="type"
                      name="type"
                      onChange={[Function]}
                      required="required"
                      value=""
                    >
                      <option
                        disabled={true}
                        value=""
                      >
                        Select request type
                      </option>
                      <option
                        value="maintenance"
                      >
                        Maintenance
                      </option>
                      <option
                        value="repair"
                      >
                        Repair
                      </option>
                    </select>,
                    <br />,
                    <Input
                      className=""
                      handleChange={[Function]}
                      id="item"
                      isRequired="required"
                      label="Item:"
                      name="item"
                      type="text"
                      value=""
                    />,
                    <br />,
                    <Input
                      className=""
                      handleChange={[Function]}
                      id="model"
                      isRequired="required"
                      label="Model:"
                      name="model"
                      type="text"
                      value=""
                    />,
                    <br />,
                    <label>
                      <span>
                        Description:
                      </span>
                    </label>,
                    <textarea
                      cols="40"
                      id="detail"
                      name="detail"
                      onChange={[Function]}
                      required="required"
                      type="text"
                      value=""
                    />,
                    <Input
                      className="white auth-submit-btn"
                      id="new-request-btn"
                      isRequired=""
                      type="submit"
                      value="Submit"
                    />,
                  ],
                  "className": "form request-form",
                  "id": "new-request-form",
                  "onSubmit": [Function],
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <form
                  class="form request-form"
                  id="new-request-form"
                >
                  <span
                    class="close-btn grey right"
                    id="sign-up-form-close-btn"
                  >
                    x
                  </span>
                  <label
                    for="id"
                  />
                  <input
                    class=""
                    id=""
                    name="id"
                    type="hidden"
                    value=""
                  />
                  <label
                    class="left orange center"
                    id="title"
                  >
                    Create a new request
                  </label>
                  <select
                    class="transparent-selector"
                    id="type"
                    name="type"
                    required=""
                  >
                    <option
                      disabled=""
                      value=""
                    >
                      Select request type
                    </option>
                    <option
                      value="maintenance"
                    >
                      Maintenance
                    </option>
                    <option
                      value="repair"
                    >
                      Repair
                    </option>
                  </select>
                  <br />
                  <label
                    for="item"
                  >
                    Item:
                  </label>
                  <input
                    class=""
                    id="item"
                    name="item"
                    required=""
                    type="text"
                    value=""
                  />
                  <br />
                  <label
                    for="model"
                  >
                    Model:
                  </label>
                  <input
                    class=""
                    id="model"
                    name="model"
                    required=""
                    type="text"
                    value=""
                  />
                  <br />
                  <label>
                    <span>
                      Description:
                    </span>
                  </label>
                  <textarea
                    cols="40"
                    id="detail"
                    name="detail"
                    required=""
                    type="text"
                  />
                  <label />
                  <input
                    class="white auth-submit-btn"
                    id="new-request-btn"
                    type="submit"
                    value="Submit"
                  />
                </form>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "form",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "createRequest": undefined,
                "handleClose": undefined,
                "initialValues": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "updateRequest": undefined,
              },
              "memoizedState": Object {
                "detail": "",
                "id": undefined,
                "item": "",
                "model": "",
                "type": "",
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "createRequest": undefined,
                "handleClose": undefined,
                "initialValues": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "updateRequest": undefined,
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": RequestForm {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "handleChange": [Function],
                "handleSubmit": [Function],
                "props": Object {
                  "createRequest": undefined,
                  "handleClose": undefined,
                  "initialValues": undefined,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "updateRequest": undefined,
                },
                "refs": Object {},
                "state": Object {
                  "detail": "",
                  "id": undefined,
                  "item": "",
                  "model": "",
                  "type": "",
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": <RequestForm
                store={
                  Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  }
                }
              />,
              "history": Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              },
            },
            "memoizedState": Object {
              "match": Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": <RequestForm
                store={
                  Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  }
                }
              />,
              "history": Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 50,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugID": 49,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 1,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <form
                          class="form request-form"
                          id="new-request-form"
                        >
                          <span
                            class="close-btn grey right"
                            id="sign-up-form-close-btn"
                          >
                            x
                          </span>
                          <label
                            for="id"
                          />
                          <input
                            class=""
                            id=""
                            name="id"
                            type="hidden"
                            value=""
                          />
                          <label
                            class="left orange center"
                            id="title"
                          >
                            Create a new request
                          </label>
                          <select
                            class="transparent-selector"
                            id="type"
                            name="type"
                            required=""
                          >
                            <option
                              disabled=""
                              value=""
                            >
                              Select request type
                            </option>
                            <option
                              value="maintenance"
                            >
                              Maintenance
                            </option>
                            <option
                              value="repair"
                            >
                              Repair
                            </option>
                          </select>
                          <br />
                          <label
                            for="item"
                          >
                            Item:
                          </label>
                          <input
                            class=""
                            id="item"
                            name="item"
                            required=""
                            type="text"
                            value=""
                          />
                          <br />
                          <label
                            for="model"
                          >
                            Model:
                          </label>
                          <input
                            class=""
                            id="model"
                            name="model"
                            required=""
                            type="text"
                            value=""
                          />
                          <br />
                          <label>
                            <span>
                              Description:
                            </span>
                          </label>
                          <textarea
                            cols="40"
                            id="detail"
                            name="detail"
                            required=""
                            type="text"
                          />
                          <label />
                          <input
                            class="white auth-submit-btn"
                            id="new-request-btn"
                            type="submit"
                            value="Submit"
                          />
                        </form>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <RequestForm
                                  store={
                                    Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    }
                                  }
                                />,
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <RequestForm
                                  store={
                                    Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    }
                                  }
                                />,
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 32,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <RequestForm
                            store={
                              Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              }
                            }
                          />,
                        }
                      }
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <form
                        class="form request-form"
                        id="new-request-form"
                      >
                        <span
                          class="close-btn grey right"
                          id="sign-up-form-close-btn"
                        >
                          x
                        </span>
                        <label
                          for="id"
                        />
                        <input
                          class=""
                          id=""
                          name="id"
                          type="hidden"
                          value=""
                        />
                        <label
                          class="left orange center"
                          id="title"
                        >
                          Create a new request
                        </label>
                        <select
                          class="transparent-selector"
                          id="type"
                          name="type"
                          required=""
                        >
                          <option
                            disabled=""
                            value=""
                          >
                            Select request type
                          </option>
                          <option
                            value="maintenance"
                          >
                            Maintenance
                          </option>
                          <option
                            value="repair"
                          >
                            Repair
                          </option>
                        </select>
                        <br />
                        <label
                          for="item"
                        >
                          Item:
                        </label>
                        <input
                          class=""
                          id="item"
                          name="item"
                          required=""
                          type="text"
                          value=""
                        />
                        <br />
                        <label
                          for="model"
                        >
                          Model:
                        </label>
                        <input
                          class=""
                          id="model"
                          name="model"
                          required=""
                          type="text"
                          value=""
                        />
                        <br />
                        <label>
                          <span>
                            Description:
                          </span>
                        </label>
                        <textarea
                          cols="40"
                          id="detail"
                          name="detail"
                          required=""
                          type="text"
                        />
                        <label />
                        <input
                          class="white auth-submit-btn"
                          id="new-request-btn"
                          type="submit"
                          value="Submit"
                        />
                      </form>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <RequestForm
                              store={
                                Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                }
                              }
                            />,
                          }
                        }
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": <RequestForm
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                />,
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": <RequestForm
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                />,
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 49,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 1,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <form
                          class="form request-form"
                          id="new-request-form"
                        >
                          <span
                            class="close-btn grey right"
                            id="sign-up-form-close-btn"
                          >
                            x
                          </span>
                          <label
                            for="id"
                          />
                          <input
                            class=""
                            id=""
                            name="id"
                            type="hidden"
                            value=""
                          />
                          <label
                            class="left orange center"
                            id="title"
                          >
                            Create a new request
                          </label>
                          <select
                            class="transparent-selector"
                            id="type"
                            name="type"
                            required=""
                          >
                            <option
                              disabled=""
                              value=""
                            >
                              Select request type
                            </option>
                            <option
                              value="maintenance"
                            >
                              Maintenance
                            </option>
                            <option
                              value="repair"
                            >
                              Repair
                            </option>
                          </select>
                          <br />
                          <label
                            for="item"
                          >
                            Item:
                          </label>
                          <input
                            class=""
                            id="item"
                            name="item"
                            required=""
                            type="text"
                            value=""
                          />
                          <br />
                          <label
                            for="model"
                          >
                            Model:
                          </label>
                          <input
                            class=""
                            id="model"
                            name="model"
                            required=""
                            type="text"
                            value=""
                          />
                          <br />
                          <label>
                            <span>
                              Description:
                            </span>
                          </label>
                          <textarea
                            cols="40"
                            id="detail"
                            name="detail"
                            required=""
                            type="text"
                          />
                          <label />
                          <input
                            class="white auth-submit-btn"
                            id="new-request-btn"
                            type="submit"
                            value="Submit"
                          />
                        </form>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <RequestForm
                                  store={
                                    Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    }
                                  }
                                />,
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <RequestForm
                                  store={
                                    Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    }
                                  }
                                />,
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 32,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <RequestForm
                            store={
                              Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              }
                            }
                          />,
                        }
                      }
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <form
                        class="form request-form"
                        id="new-request-form"
                      >
                        <span
                          class="close-btn grey right"
                          id="sign-up-form-close-btn"
                        >
                          x
                        </span>
                        <label
                          for="id"
                        />
                        <input
                          class=""
                          id=""
                          name="id"
                          type="hidden"
                          value=""
                        />
                        <label
                          class="left orange center"
                          id="title"
                        >
                          Create a new request
                        </label>
                        <select
                          class="transparent-selector"
                          id="type"
                          name="type"
                          required=""
                        >
                          <option
                            disabled=""
                            value=""
                          >
                            Select request type
                          </option>
                          <option
                            value="maintenance"
                          >
                            Maintenance
                          </option>
                          <option
                            value="repair"
                          >
                            Repair
                          </option>
                        </select>
                        <br />
                        <label
                          for="item"
                        >
                          Item:
                        </label>
                        <input
                          class=""
                          id="item"
                          name="item"
                          required=""
                          type="text"
                          value=""
                        />
                        <br />
                        <label
                          for="model"
                        >
                          Model:
                        </label>
                        <input
                          class=""
                          id="model"
                          name="model"
                          required=""
                          type="text"
                          value=""
                        />
                        <br />
                        <label>
                          <span>
                            Description:
                          </span>
                        </label>
                        <textarea
                          cols="40"
                          id="detail"
                          name="detail"
                          required=""
                          type="text"
                        />
                        <label />
                        <input
                          class="white auth-submit-btn"
                          id="new-request-btn"
                          type="submit"
                          value="Submit"
                        />
                      </form>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <RequestForm
                              store={
                                Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                }
                              }
                            />,
                          }
                        }
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": BrowserRouter {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "history": Object {
                  "action": "POP",
                  "block": [Function],
                  "createHref": [Function],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                },
                "props": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                },
                "refs": Object {},
                "state": null,
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": [Circular],
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_reactInternalInstance": Object {},
          "context": Object {
            "router": undefined,
          },
          "props": Object {
            "children": <RequestForm
              store={
                Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                }
              }
            />,
            "history": Object {
              "action": "POP",
              "block": [Function],
              "createHref": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            },
          },
          "refs": Object {},
          "state": Object {
            "match": Object {
              "isExact": true,
              "params": Object {},
              "path": "/",
              "url": "/",
            },
          },
          "unlisten": [Function],
          "updater": Object {
            "enqueueForceUpdate": [Function],
            "enqueueReplaceState": [Function],
            "enqueueSetState": [Function],
            "isMounted": [Function],
          },
        },
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <RequestForm
            store={
              Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              }
            }
          />,
          "history": Object {
            "action": "POP",
            "block": [Function],
            "createHref": [Function],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
            "push": [Function],
            "replace": [Function],
          },
        },
        "ref": null,
        "rendered": Object {
          "instance": RequestForm {
            "_reactInternalFiber": FiberNode {
              "_debugID": 52,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 53,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 54,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": "x",
                    "className": "close-btn grey right",
                    "id": "sign-up-form-close-btn",
                    "onClick": undefined,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": "x",
                    "className": "close-btn grey right",
                    "id": "sign-up-form-close-btn",
                    "onClick": undefined,
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 55,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 66,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": undefined,
                        "htmlFor": "id",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": undefined,
                        "htmlFor": "id",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 67,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "className": "",
                          "id": "",
                          "name": "id",
                          "onChange": undefined,
                          "onClick": undefined,
                          "required": "",
                          "type": "hidden",
                          "value": undefined,
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "className": "",
                          "id": "",
                          "name": "id",
                          "onChange": undefined,
                          "onClick": undefined,
                          "required": "",
                          "type": "hidden",
                          "value": undefined,
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <input
                          class=""
                          id=""
                          name="id"
                          type="hidden"
                          value=""
                        />,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "stateNode": <label
                        for="id"
                      />,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 1,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "className": "",
                      "handleChange": undefined,
                      "handleClick": undefined,
                      "id": "",
                      "isRequired": "",
                      "label": undefined,
                      "name": "id",
                      "type": "hidden",
                      "value": undefined,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "className": "",
                      "handleChange": undefined,
                      "handleClick": undefined,
                      "id": "",
                      "isRequired": "",
                      "label": undefined,
                      "name": "id",
                      "type": "hidden",
                      "value": undefined,
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 56,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Create a new request",
                        "className": "left orange center",
                        "id": "title",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Create a new request",
                        "className": "left orange center",
                        "id": "title",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 57,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 68,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "Select request type",
                            "disabled": true,
                            "value": "",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "Select request type",
                            "disabled": true,
                            "value": "",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 69,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": "Maintenance",
                              "value": "maintenance",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": "Maintenance",
                              "value": "maintenance",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 70,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 2,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": "Repair",
                                "value": "repair",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": "Repair",
                                "value": "repair",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <option
                                value="repair"
                              >
                                Repair
                              </option>,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "option",
                              "updateQueue": null,
                            },
                            "stateNode": <option
                              value="maintenance"
                            >
                              Maintenance
                            </option>,
                            "tag": 7,
                            "treeBaseDuration": 0,
                            "type": "option",
                            "updateQueue": null,
                          },
                          "stateNode": <option
                            disabled=""
                            value=""
                          >
                            Select request type
                          </option>,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "option",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 3,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <option
                              disabled={true}
                              value=""
                            >
                              Select request type
                            </option>,
                            <option
                              value="maintenance"
                            >
                              Maintenance
                            </option>,
                            <option
                              value="repair"
                            >
                              Repair
                            </option>,
                          ],
                          "className": "transparent-selector",
                          "id": "type",
                          "name": "type",
                          "onChange": [Function],
                          "required": "required",
                          "value": "",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <option
                              disabled={true}
                              value=""
                            >
                              Select request type
                            </option>,
                            <option
                              value="maintenance"
                            >
                              Maintenance
                            </option>,
                            <option
                              value="repair"
                            >
                              Repair
                            </option>,
                          ],
                          "className": "transparent-selector",
                          "id": "type",
                          "name": "type",
                          "onChange": [Function],
                          "required": "required",
                          "value": "",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 58,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 4,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {},
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {},
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 59,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 71,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": "Item:",
                                "htmlFor": "item",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": "Item:",
                                "htmlFor": "item",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 72,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 1,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "className": "",
                                  "id": "item",
                                  "name": "item",
                                  "onChange": [Function],
                                  "onClick": undefined,
                                  "required": "required",
                                  "type": "text",
                                  "value": "",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "className": "",
                                  "id": "item",
                                  "name": "item",
                                  "onChange": [Function],
                                  "onClick": undefined,
                                  "required": "required",
                                  "type": "text",
                                  "value": "",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <input
                                  class=""
                                  id="item"
                                  name="item"
                                  required=""
                                  type="text"
                                  value=""
                                />,
                                "tag": 7,
                                "treeBaseDuration": 0,
                                "type": "input",
                                "updateQueue": null,
                              },
                              "stateNode": <label
                                for="item"
                              >
                                Item:
                              </label>,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "label",
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "effectTag": 1,
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 5,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "className": "",
                              "handleChange": [Function],
                              "handleClick": undefined,
                              "id": "item",
                              "isRequired": "required",
                              "label": "Item:",
                              "name": "item",
                              "type": "text",
                              "value": "",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "className": "",
                              "handleChange": [Function],
                              "handleClick": undefined,
                              "id": "item",
                              "isRequired": "required",
                              "label": "Item:",
                              "name": "item",
                              "type": "text",
                              "value": "",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 60,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": null,
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstContextDependency": null,
                              "firstEffect": null,
                              "index": 6,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {},
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {},
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 61,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": null,
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": FiberNode {
                                  "_debugID": 73,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 0,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "children": "Model:",
                                    "htmlFor": "model",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "children": "Model:",
                                    "htmlFor": "model",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugID": 74,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": null,
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "effectTag": 0,
                                    "expirationTime": 0,
                                    "firstContextDependency": null,
                                    "firstEffect": null,
                                    "index": 1,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "className": "",
                                      "id": "model",
                                      "name": "model",
                                      "onChange": [Function],
                                      "onClick": undefined,
                                      "required": "required",
                                      "type": "text",
                                      "value": "",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "className": "",
                                      "id": "model",
                                      "name": "model",
                                      "onChange": [Function],
                                      "onClick": undefined,
                                      "required": "required",
                                      "type": "text",
                                      "value": "",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode": <input
                                      class=""
                                      id="model"
                                      name="model"
                                      required=""
                                      type="text"
                                      value=""
                                    />,
                                    "tag": 7,
                                    "treeBaseDuration": 0,
                                    "type": "input",
                                    "updateQueue": null,
                                  },
                                  "stateNode": <label
                                    for="model"
                                  >
                                    Model:
                                  </label>,
                                  "tag": 7,
                                  "treeBaseDuration": 0,
                                  "type": "label",
                                  "updateQueue": null,
                                },
                                "childExpirationTime": 0,
                                "effectTag": 1,
                                "expirationTime": 0,
                                "firstContextDependency": null,
                                "firstEffect": null,
                                "index": 7,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "className": "",
                                  "handleChange": [Function],
                                  "handleClick": undefined,
                                  "id": "model",
                                  "isRequired": "required",
                                  "label": "Model:",
                                  "name": "model",
                                  "type": "text",
                                  "value": "",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "className": "",
                                  "handleChange": [Function],
                                  "handleClick": undefined,
                                  "id": "model",
                                  "isRequired": "required",
                                  "label": "Model:",
                                  "name": "model",
                                  "type": "text",
                                  "value": "",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugID": 62,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": null,
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "effectTag": 0,
                                  "expirationTime": 0,
                                  "firstContextDependency": null,
                                  "firstEffect": null,
                                  "index": 8,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {},
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {},
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugID": 63,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": null,
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": FiberNode {
                                      "_debugID": 75,
                                      "_debugIsCurrentlyTiming": false,
                                      "_debugOwner": [Circular],
                                      "_debugSource": null,
                                      "actualDuration": 0,
                                      "actualStartTime": -1,
                                      "alternate": null,
                                      "child": null,
                                      "childExpirationTime": 0,
                                      "effectTag": 0,
                                      "expirationTime": 0,
                                      "firstContextDependency": null,
                                      "firstEffect": null,
                                      "index": 0,
                                      "key": null,
                                      "lastEffect": null,
                                      "memoizedProps": Object {
                                        "children": "Description:",
                                      },
                                      "memoizedState": null,
                                      "mode": 0,
                                      "nextEffect": null,
                                      "pendingProps": Object {
                                        "children": "Description:",
                                      },
                                      "ref": null,
                                      "return": [Circular],
                                      "selfBaseDuration": 0,
                                      "sibling": null,
                                      "stateNode": <span>
                                        Description:
                                      </span>,
                                      "tag": 7,
                                      "treeBaseDuration": 0,
                                      "type": "span",
                                      "updateQueue": null,
                                    },
                                    "childExpirationTime": 0,
                                    "effectTag": 0,
                                    "expirationTime": 0,
                                    "firstContextDependency": null,
                                    "firstEffect": null,
                                    "index": 9,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "children": <span>
                                        Description:
                                      </span>,
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "children": <span>
                                        Description:
                                      </span>,
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": FiberNode {
                                      "_debugID": 64,
                                      "_debugIsCurrentlyTiming": false,
                                      "_debugOwner": [Circular],
                                      "_debugSource": null,
                                      "actualDuration": 0,
                                      "actualStartTime": -1,
                                      "alternate": null,
                                      "child": null,
                                      "childExpirationTime": 0,
                                      "effectTag": 0,
                                      "expirationTime": 0,
                                      "firstContextDependency": null,
                                      "firstEffect": null,
                                      "index": 10,
                                      "key": null,
                                      "lastEffect": null,
                                      "memoizedProps": Object {
                                        "cols": "40",
                                        "id": "detail",
                                        "name": "detail",
                                        "onChange": [Function],
                                        "required": "required",
                                        "type": "text",
                                        "value": "",
                                      },
                                      "memoizedState": null,
                                      "mode": 0,
                                      "nextEffect": null,
                                      "pendingProps": Object {
                                        "cols": "40",
                                        "id": "detail",
                                        "name": "detail",
                                        "onChange": [Function],
                                        "required": "required",
                                        "type": "text",
                                        "value": "",
                                      },
                                      "ref": null,
                                      "return": [Circular],
                                      "selfBaseDuration": 0,
                                      "sibling": FiberNode {
                                        "_debugID": 65,
                                        "_debugIsCurrentlyTiming": false,
                                        "_debugOwner": [Circular],
                                        "_debugSource": null,
                                        "actualDuration": 0,
                                        "actualStartTime": -1,
                                        "alternate": null,
                                        "child": FiberNode {
                                          "_debugID": 76,
                                          "_debugIsCurrentlyTiming": false,
                                          "_debugOwner": [Circular],
                                          "_debugSource": null,
                                          "actualDuration": 0,
                                          "actualStartTime": -1,
                                          "alternate": null,
                                          "child": null,
                                          "childExpirationTime": 0,
                                          "effectTag": 0,
                                          "expirationTime": 0,
                                          "firstContextDependency": null,
                                          "firstEffect": null,
                                          "index": 0,
                                          "key": null,
                                          "lastEffect": null,
                                          "memoizedProps": Object {
                                            "children": undefined,
                                            "htmlFor": undefined,
                                          },
                                          "memoizedState": null,
                                          "mode": 0,
                                          "nextEffect": null,
                                          "pendingProps": Object {
                                            "children": undefined,
                                            "htmlFor": undefined,
                                          },
                                          "ref": null,
                                          "return": [Circular],
                                          "selfBaseDuration": 0,
                                          "sibling": FiberNode {
                                            "_debugID": 77,
                                            "_debugIsCurrentlyTiming": false,
                                            "_debugOwner": [Circular],
                                            "_debugSource": null,
                                            "actualDuration": 0,
                                            "actualStartTime": -1,
                                            "alternate": null,
                                            "child": null,
                                            "childExpirationTime": 0,
                                            "effectTag": 0,
                                            "expirationTime": 0,
                                            "firstContextDependency": null,
                                            "firstEffect": null,
                                            "index": 1,
                                            "key": null,
                                            "lastEffect": null,
                                            "memoizedProps": Object {
                                              "className": "white auth-submit-btn",
                                              "id": "new-request-btn",
                                              "name": undefined,
                                              "onChange": undefined,
                                              "onClick": undefined,
                                              "required": "",
                                              "type": "submit",
                                              "value": "Submit",
                                            },
                                            "memoizedState": null,
                                            "mode": 0,
                                            "nextEffect": null,
                                            "pendingProps": Object {
                                              "className": "white auth-submit-btn",
                                              "id": "new-request-btn",
                                              "name": undefined,
                                              "onChange": undefined,
                                              "onClick": undefined,
                                              "required": "",
                                              "type": "submit",
                                              "value": "Submit",
                                            },
                                            "ref": null,
                                            "return": [Circular],
                                            "selfBaseDuration": 0,
                                            "sibling": null,
                                            "stateNode": <input
                                              class="white auth-submit-btn"
                                              id="new-request-btn"
                                              type="submit"
                                              value="Submit"
                                            />,
                                            "tag": 7,
                                            "treeBaseDuration": 0,
                                            "type": "input",
                                            "updateQueue": null,
                                          },
                                          "stateNode": <label />,
                                          "tag": 7,
                                          "treeBaseDuration": 0,
                                          "type": "label",
                                          "updateQueue": null,
                                        },
                                        "childExpirationTime": 0,
                                        "effectTag": 1,
                                        "expirationTime": 0,
                                        "firstContextDependency": null,
                                        "firstEffect": null,
                                        "index": 11,
                                        "key": null,
                                        "lastEffect": null,
                                        "memoizedProps": Object {
                                          "className": "white auth-submit-btn",
                                          "handleChange": undefined,
                                          "handleClick": undefined,
                                          "id": "new-request-btn",
                                          "isRequired": "",
                                          "label": undefined,
                                          "name": undefined,
                                          "type": "submit",
                                          "value": "Submit",
                                        },
                                        "memoizedState": null,
                                        "mode": 0,
                                        "nextEffect": null,
                                        "pendingProps": Object {
                                          "className": "white auth-submit-btn",
                                          "handleChange": undefined,
                                          "handleClick": undefined,
                                          "id": "new-request-btn",
                                          "isRequired": "",
                                          "label": undefined,
                                          "name": undefined,
                                          "type": "submit",
                                          "value": "Submit",
                                        },
                                        "ref": null,
                                        "return": [Circular],
                                        "selfBaseDuration": 0,
                                        "sibling": null,
                                        "stateNode": null,
                                        "tag": 0,
                                        "treeBaseDuration": 0,
                                        "type": [Function],
                                        "updateQueue": null,
                                      },
                                      "stateNode": <textarea
                                        cols="40"
                                        id="detail"
                                        name="detail"
                                        required=""
                                        type="text"
                                      />,
                                      "tag": 7,
                                      "treeBaseDuration": 0,
                                      "type": "textarea",
                                      "updateQueue": null,
                                    },
                                    "stateNode": <label>
                                      <span>
                                        Description:
                                      </span>
                                    </label>,
                                    "tag": 7,
                                    "treeBaseDuration": 0,
                                    "type": "label",
                                    "updateQueue": null,
                                  },
                                  "stateNode": <br />,
                                  "tag": 7,
                                  "treeBaseDuration": 0,
                                  "type": "br",
                                  "updateQueue": null,
                                },
                                "stateNode": null,
                                "tag": 0,
                                "treeBaseDuration": 0,
                                "type": [Function],
                                "updateQueue": null,
                              },
                              "stateNode": <br />,
                              "tag": 7,
                              "treeBaseDuration": 0,
                              "type": "br",
                              "updateQueue": null,
                            },
                            "stateNode": null,
                            "tag": 0,
                            "treeBaseDuration": 0,
                            "type": [Function],
                            "updateQueue": null,
                          },
                          "stateNode": <br />,
                          "tag": 7,
                          "treeBaseDuration": 0,
                          "type": "br",
                          "updateQueue": null,
                        },
                        "stateNode": <select
                          class="transparent-selector"
                          id="type"
                          name="type"
                          required=""
                        >
                          <option
                            disabled=""
                            value=""
                          >
                            Select request type
                          </option>
                          <option
                            value="maintenance"
                          >
                            Maintenance
                          </option>
                          <option
                            value="repair"
                          >
                            Repair
                          </option>
                        </select>,
                        "tag": 7,
                        "treeBaseDuration": 0,
                        "type": "select",
                        "updateQueue": null,
                      },
                      "stateNode": <label
                        class="left orange center"
                        id="title"
                      >
                        Create a new request
                      </label>,
                      "tag": 7,
                      "treeBaseDuration": 0,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "stateNode": null,
                    "tag": 0,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "stateNode": <span
                    class="close-btn grey right"
                    id="sign-up-form-close-btn"
                  >
                    x
                  </span>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "span",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <span
                      className="close-btn grey right"
                      id="sign-up-form-close-btn"
                    >
                      x
                    </span>,
                    <Input
                      className=""
                      id=""
                      isRequired=""
                      name="id"
                      type="hidden"
                    />,
                    <label
                      className="left orange center"
                      id="title"
                    >
                      Create a new request
                    </label>,
                    <select
                      className="transparent-selector"
                      id="type"
                      name="type"
                      onChange={[Function]}
                      required="required"
                      value=""
                    >
                      <option
                        disabled={true}
                        value=""
                      >
                        Select request type
                      </option>
                      <option
                        value="maintenance"
                      >
                        Maintenance
                      </option>
                      <option
                        value="repair"
                      >
                        Repair
                      </option>
                    </select>,
                    <br />,
                    <Input
                      className=""
                      handleChange={[Function]}
                      id="item"
                      isRequired="required"
                      label="Item:"
                      name="item"
                      type="text"
                      value=""
                    />,
                    <br />,
                    <Input
                      className=""
                      handleChange={[Function]}
                      id="model"
                      isRequired="required"
                      label="Model:"
                      name="model"
                      type="text"
                      value=""
                    />,
                    <br />,
                    <label>
                      <span>
                        Description:
                      </span>
                    </label>,
                    <textarea
                      cols="40"
                      id="detail"
                      name="detail"
                      onChange={[Function]}
                      required="required"
                      type="text"
                      value=""
                    />,
                    <Input
                      className="white auth-submit-btn"
                      id="new-request-btn"
                      isRequired=""
                      type="submit"
                      value="Submit"
                    />,
                  ],
                  "className": "form request-form",
                  "id": "new-request-form",
                  "onSubmit": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <span
                      className="close-btn grey right"
                      id="sign-up-form-close-btn"
                    >
                      x
                    </span>,
                    <Input
                      className=""
                      id=""
                      isRequired=""
                      name="id"
                      type="hidden"
                    />,
                    <label
                      className="left orange center"
                      id="title"
                    >
                      Create a new request
                    </label>,
                    <select
                      className="transparent-selector"
                      id="type"
                      name="type"
                      onChange={[Function]}
                      required="required"
                      value=""
                    >
                      <option
                        disabled={true}
                        value=""
                      >
                        Select request type
                      </option>
                      <option
                        value="maintenance"
                      >
                        Maintenance
                      </option>
                      <option
                        value="repair"
                      >
                        Repair
                      </option>
                    </select>,
                    <br />,
                    <Input
                      className=""
                      handleChange={[Function]}
                      id="item"
                      isRequired="required"
                      label="Item:"
                      name="item"
                      type="text"
                      value=""
                    />,
                    <br />,
                    <Input
                      className=""
                      handleChange={[Function]}
                      id="model"
                      isRequired="required"
                      label="Model:"
                      name="model"
                      type="text"
                      value=""
                    />,
                    <br />,
                    <label>
                      <span>
                        Description:
                      </span>
                    </label>,
                    <textarea
                      cols="40"
                      id="detail"
                      name="detail"
                      onChange={[Function]}
                      required="required"
                      type="text"
                      value=""
                    />,
                    <Input
                      className="white auth-submit-btn"
                      id="new-request-btn"
                      isRequired=""
                      type="submit"
                      value="Submit"
                    />,
                  ],
                  "className": "form request-form",
                  "id": "new-request-form",
                  "onSubmit": [Function],
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <form
                  class="form request-form"
                  id="new-request-form"
                >
                  <span
                    class="close-btn grey right"
                    id="sign-up-form-close-btn"
                  >
                    x
                  </span>
                  <label
                    for="id"
                  />
                  <input
                    class=""
                    id=""
                    name="id"
                    type="hidden"
                    value=""
                  />
                  <label
                    class="left orange center"
                    id="title"
                  >
                    Create a new request
                  </label>
                  <select
                    class="transparent-selector"
                    id="type"
                    name="type"
                    required=""
                  >
                    <option
                      disabled=""
                      value=""
                    >
                      Select request type
                    </option>
                    <option
                      value="maintenance"
                    >
                      Maintenance
                    </option>
                    <option
                      value="repair"
                    >
                      Repair
                    </option>
                  </select>
                  <br />
                  <label
                    for="item"
                  >
                    Item:
                  </label>
                  <input
                    class=""
                    id="item"
                    name="item"
                    required=""
                    type="text"
                    value=""
                  />
                  <br />
                  <label
                    for="model"
                  >
                    Model:
                  </label>
                  <input
                    class=""
                    id="model"
                    name="model"
                    required=""
                    type="text"
                    value=""
                  />
                  <br />
                  <label>
                    <span>
                      Description:
                    </span>
                  </label>
                  <textarea
                    cols="40"
                    id="detail"
                    name="detail"
                    required=""
                    type="text"
                  />
                  <label />
                  <input
                    class="white auth-submit-btn"
                    id="new-request-btn"
                    type="submit"
                    value="Submit"
                  />
                </form>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "form",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "createRequest": undefined,
                "handleClose": undefined,
                "initialValues": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "updateRequest": undefined,
              },
              "memoizedState": Object {
                "detail": "",
                "id": undefined,
                "item": "",
                "model": "",
                "type": "",
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "createRequest": undefined,
                "handleClose": undefined,
                "initialValues": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "updateRequest": undefined,
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 51,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": FiberNode {
                  "_debugID": 50,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": FiberNode {
                    "_debugID": 49,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 1,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      },
                    },
                    "memoizedState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      },
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": FiberNode {
                        "_debugID": 47,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": [Circular],
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 1,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": null,
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <form
                              class="form request-form"
                              id="new-request-form"
                            >
                              <span
                                class="close-btn grey right"
                                id="sign-up-form-close-btn"
                              >
                                x
                              </span>
                              <label
                                for="id"
                              />
                              <input
                                class=""
                                id=""
                                name="id"
                                type="hidden"
                                value=""
                              />
                              <label
                                class="left orange center"
                                id="title"
                              >
                                Create a new request
                              </label>
                              <select
                                class="transparent-selector"
                                id="type"
                                name="type"
                                required=""
                              >
                                <option
                                  disabled=""
                                  value=""
                                >
                                  Select request type
                                </option>
                                <option
                                  value="maintenance"
                                >
                                  Maintenance
                                </option>
                                <option
                                  value="repair"
                                >
                                  Repair
                                </option>
                              </select>
                              <br />
                              <label
                                for="item"
                              >
                                Item:
                              </label>
                              <input
                                class=""
                                id="item"
                                name="item"
                                required=""
                                type="text"
                                value=""
                              />
                              <br />
                              <label
                                for="model"
                              >
                                Model:
                              </label>
                              <input
                                class=""
                                id="model"
                                name="model"
                                required=""
                                type="text"
                                value=""
                              />
                              <br />
                              <label>
                                <span>
                                  Description:
                                </span>
                              </label>
                              <textarea
                                cols="40"
                                id="detail"
                                name="detail"
                                required=""
                                type="text"
                              />
                              <label />
                              <input
                                class="white auth-submit-btn"
                                id="new-request-btn"
                                type="submit"
                                value="Submit"
                              />
                            </form>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 12,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "timeoutHandle": -1,
                        },
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": null,
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": Object {
                            "callback": null,
                            "expirationTime": 1,
                            "next": null,
                            "nextEffect": null,
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <RequestForm
                                      store={
                                        Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        }
                                      }
                                    />,
                                  }
                                }
                              />,
                            },
                            "tag": 0,
                          },
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": Object {
                            "callback": null,
                            "expirationTime": 1,
                            "next": null,
                            "nextEffect": null,
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <RequestForm
                                      store={
                                        Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        }
                                      }
                                    />,
                                  }
                                }
                              />,
                            },
                            "tag": 0,
                          },
                        },
                      },
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "effectTag": 32,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": null,
                      "memoizedState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <RequestForm
                                store={
                                  Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  }
                                }
                              />,
                            }
                          }
                        />,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <form
                            class="form request-form"
                            id="new-request-form"
                          >
                            <span
                              class="close-btn grey right"
                              id="sign-up-form-close-btn"
                            >
                              x
                            </span>
                            <label
                              for="id"
                            />
                            <input
                              class=""
                              id=""
                              name="id"
                              type="hidden"
                              value=""
                            />
                            <label
                              class="left orange center"
                              id="title"
                            >
                              Create a new request
                            </label>
                            <select
                              class="transparent-selector"
                              id="type"
                              name="type"
                              required=""
                            >
                              <option
                                disabled=""
                                value=""
                              >
                                Select request type
                              </option>
                              <option
                                value="maintenance"
                              >
                                Maintenance
                              </option>
                              <option
                                value="repair"
                              >
                                Repair
                              </option>
                            </select>
                            <br />
                            <label
                              for="item"
                            >
                              Item:
                            </label>
                            <input
                              class=""
                              id="item"
                              name="item"
                              required=""
                              type="text"
                              value=""
                            />
                            <br />
                            <label
                              for="model"
                            >
                              Model:
                            </label>
                            <input
                              class=""
                              id="model"
                              name="model"
                              required=""
                              type="text"
                              value=""
                            />
                            <br />
                            <label>
                              <span>
                                Description:
                              </span>
                            </label>
                            <textarea
                              cols="40"
                              id="detail"
                              name="detail"
                              required=""
                              type="text"
                            />
                            <label />
                            <input
                              class="white auth-submit-btn"
                              id="new-request-btn"
                              type="submit"
                              value="Submit"
                            />
                          </form>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <RequestForm
                                  store={
                                    Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    }
                                  }
                                />,
                              }
                            }
                          />,
                        },
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": null,
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": null,
                      },
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": WrapperComponent {
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <RequestForm
                            store={
                              Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              }
                            }
                          />,
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <RequestForm
                            store={
                              Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              }
                            }
                          />,
                        },
                      },
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 2,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 49,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 1,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      },
                    },
                    "memoizedState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      },
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": FiberNode {
                        "_debugID": 47,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": [Circular],
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 1,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": null,
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <form
                              class="form request-form"
                              id="new-request-form"
                            >
                              <span
                                class="close-btn grey right"
                                id="sign-up-form-close-btn"
                              >
                                x
                              </span>
                              <label
                                for="id"
                              />
                              <input
                                class=""
                                id=""
                                name="id"
                                type="hidden"
                                value=""
                              />
                              <label
                                class="left orange center"
                                id="title"
                              >
                                Create a new request
                              </label>
                              <select
                                class="transparent-selector"
                                id="type"
                                name="type"
                                required=""
                              >
                                <option
                                  disabled=""
                                  value=""
                                >
                                  Select request type
                                </option>
                                <option
                                  value="maintenance"
                                >
                                  Maintenance
                                </option>
                                <option
                                  value="repair"
                                >
                                  Repair
                                </option>
                              </select>
                              <br />
                              <label
                                for="item"
                              >
                                Item:
                              </label>
                              <input
                                class=""
                                id="item"
                                name="item"
                                required=""
                                type="text"
                                value=""
                              />
                              <br />
                              <label
                                for="model"
                              >
                                Model:
                              </label>
                              <input
                                class=""
                                id="model"
                                name="model"
                                required=""
                                type="text"
                                value=""
                              />
                              <br />
                              <label>
                                <span>
                                  Description:
                                </span>
                              </label>
                              <textarea
                                cols="40"
                                id="detail"
                                name="detail"
                                required=""
                                type="text"
                              />
                              <label />
                              <input
                                class="white auth-submit-btn"
                                id="new-request-btn"
                                type="submit"
                                value="Submit"
                              />
                            </form>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 12,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "timeoutHandle": -1,
                        },
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": null,
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": Object {
                            "callback": null,
                            "expirationTime": 1,
                            "next": null,
                            "nextEffect": null,
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <RequestForm
                                      store={
                                        Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        }
                                      }
                                    />,
                                  }
                                }
                              />,
                            },
                            "tag": 0,
                          },
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": Object {
                            "callback": null,
                            "expirationTime": 1,
                            "next": null,
                            "nextEffect": null,
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <RequestForm
                                      store={
                                        Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        }
                                      }
                                    />,
                                  }
                                }
                              />,
                            },
                            "tag": 0,
                          },
                        },
                      },
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "effectTag": 32,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": null,
                      "memoizedState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <RequestForm
                                store={
                                  Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  }
                                }
                              />,
                            }
                          }
                        />,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <form
                            class="form request-form"
                            id="new-request-form"
                          >
                            <span
                              class="close-btn grey right"
                              id="sign-up-form-close-btn"
                            >
                              x
                            </span>
                            <label
                              for="id"
                            />
                            <input
                              class=""
                              id=""
                              name="id"
                              type="hidden"
                              value=""
                            />
                            <label
                              class="left orange center"
                              id="title"
                            >
                              Create a new request
                            </label>
                            <select
                              class="transparent-selector"
                              id="type"
                              name="type"
                              required=""
                            >
                              <option
                                disabled=""
                                value=""
                              >
                                Select request type
                              </option>
                              <option
                                value="maintenance"
                              >
                                Maintenance
                              </option>
                              <option
                                value="repair"
                              >
                                Repair
                              </option>
                            </select>
                            <br />
                            <label
                              for="item"
                            >
                              Item:
                            </label>
                            <input
                              class=""
                              id="item"
                              name="item"
                              required=""
                              type="text"
                              value=""
                            />
                            <br />
                            <label
                              for="model"
                            >
                              Model:
                            </label>
                            <input
                              class=""
                              id="model"
                              name="model"
                              required=""
                              type="text"
                              value=""
                            />
                            <br />
                            <label>
                              <span>
                                Description:
                              </span>
                            </label>
                            <textarea
                              cols="40"
                              id="detail"
                              name="detail"
                              required=""
                              type="text"
                            />
                            <label />
                            <input
                              class="white auth-submit-btn"
                              id="new-request-btn"
                              type="submit"
                              value="Submit"
                            />
                          </form>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <RequestForm
                                  store={
                                    Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    }
                                  }
                                />,
                              }
                            }
                          />,
                        },
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": null,
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": null,
                      },
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": WrapperComponent {
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <RequestForm
                            store={
                              Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              }
                            }
                          />,
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <RequestForm
                            store={
                              Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              }
                            }
                          />,
                        },
                      },
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 2,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": BrowserRouter {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "history": Object {
                      "action": "POP",
                      "block": [Function],
                      "createHref": [Function],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    },
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                    "refs": Object {},
                    "state": null,
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                  "history": Object {
                    "action": "POP",
                    "block": [Function],
                    "createHref": [Function],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  },
                },
                "memoizedState": Object {
                  "match": Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  },
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <RequestForm
                    store={
                      Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      }
                    }
                  />,
                  "history": Object {
                    "action": "POP",
                    "block": [Function],
                    "createHref": [Function],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 50,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": FiberNode {
                    "_debugID": 49,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 1,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      },
                    },
                    "memoizedState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      },
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": FiberNode {
                        "_debugID": 47,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": [Circular],
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 1,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": null,
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <form
                              class="form request-form"
                              id="new-request-form"
                            >
                              <span
                                class="close-btn grey right"
                                id="sign-up-form-close-btn"
                              >
                                x
                              </span>
                              <label
                                for="id"
                              />
                              <input
                                class=""
                                id=""
                                name="id"
                                type="hidden"
                                value=""
                              />
                              <label
                                class="left orange center"
                                id="title"
                              >
                                Create a new request
                              </label>
                              <select
                                class="transparent-selector"
                                id="type"
                                name="type"
                                required=""
                              >
                                <option
                                  disabled=""
                                  value=""
                                >
                                  Select request type
                                </option>
                                <option
                                  value="maintenance"
                                >
                                  Maintenance
                                </option>
                                <option
                                  value="repair"
                                >
                                  Repair
                                </option>
                              </select>
                              <br />
                              <label
                                for="item"
                              >
                                Item:
                              </label>
                              <input
                                class=""
                                id="item"
                                name="item"
                                required=""
                                type="text"
                                value=""
                              />
                              <br />
                              <label
                                for="model"
                              >
                                Model:
                              </label>
                              <input
                                class=""
                                id="model"
                                name="model"
                                required=""
                                type="text"
                                value=""
                              />
                              <br />
                              <label>
                                <span>
                                  Description:
                                </span>
                              </label>
                              <textarea
                                cols="40"
                                id="detail"
                                name="detail"
                                required=""
                                type="text"
                              />
                              <label />
                              <input
                                class="white auth-submit-btn"
                                id="new-request-btn"
                                type="submit"
                                value="Submit"
                              />
                            </form>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 12,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "timeoutHandle": -1,
                        },
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": null,
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": Object {
                            "callback": null,
                            "expirationTime": 1,
                            "next": null,
                            "nextEffect": null,
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <RequestForm
                                      store={
                                        Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        }
                                      }
                                    />,
                                  }
                                }
                              />,
                            },
                            "tag": 0,
                          },
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": Object {
                            "callback": null,
                            "expirationTime": 1,
                            "next": null,
                            "nextEffect": null,
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <RequestForm
                                      store={
                                        Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        }
                                      }
                                    />,
                                  }
                                }
                              />,
                            },
                            "tag": 0,
                          },
                        },
                      },
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "effectTag": 32,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": null,
                      "memoizedState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <RequestForm
                                store={
                                  Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  }
                                }
                              />,
                            }
                          }
                        />,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <form
                            class="form request-form"
                            id="new-request-form"
                          >
                            <span
                              class="close-btn grey right"
                              id="sign-up-form-close-btn"
                            >
                              x
                            </span>
                            <label
                              for="id"
                            />
                            <input
                              class=""
                              id=""
                              name="id"
                              type="hidden"
                              value=""
                            />
                            <label
                              class="left orange center"
                              id="title"
                            >
                              Create a new request
                            </label>
                            <select
                              class="transparent-selector"
                              id="type"
                              name="type"
                              required=""
                            >
                              <option
                                disabled=""
                                value=""
                              >
                                Select request type
                              </option>
                              <option
                                value="maintenance"
                              >
                                Maintenance
                              </option>
                              <option
                                value="repair"
                              >
                                Repair
                              </option>
                            </select>
                            <br />
                            <label
                              for="item"
                            >
                              Item:
                            </label>
                            <input
                              class=""
                              id="item"
                              name="item"
                              required=""
                              type="text"
                              value=""
                            />
                            <br />
                            <label
                              for="model"
                            >
                              Model:
                            </label>
                            <input
                              class=""
                              id="model"
                              name="model"
                              required=""
                              type="text"
                              value=""
                            />
                            <br />
                            <label>
                              <span>
                                Description:
                              </span>
                            </label>
                            <textarea
                              cols="40"
                              id="detail"
                              name="detail"
                              required=""
                              type="text"
                            />
                            <label />
                            <input
                              class="white auth-submit-btn"
                              id="new-request-btn"
                              type="submit"
                              value="Submit"
                            />
                          </form>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <RequestForm
                                  store={
                                    Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    }
                                  }
                                />,
                              }
                            }
                          />,
                        },
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": null,
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": null,
                      },
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": WrapperComponent {
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <RequestForm
                            store={
                              Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              }
                            }
                          />,
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <RequestForm
                            store={
                              Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              }
                            }
                          />,
                        },
                      },
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 2,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 49,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "effectTag": 1,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      },
                    },
                    "memoizedState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      },
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <RequestForm
                          store={
                            Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        />,
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 47,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": FiberNode {
                        "_debugID": 47,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": [Circular],
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "expirationTime": 1,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": null,
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <form
                              class="form request-form"
                              id="new-request-form"
                            >
                              <span
                                class="close-btn grey right"
                                id="sign-up-form-close-btn"
                              >
                                x
                              </span>
                              <label
                                for="id"
                              />
                              <input
                                class=""
                                id=""
                                name="id"
                                type="hidden"
                                value=""
                              />
                              <label
                                class="left orange center"
                                id="title"
                              >
                                Create a new request
                              </label>
                              <select
                                class="transparent-selector"
                                id="type"
                                name="type"
                                required=""
                              >
                                <option
                                  disabled=""
                                  value=""
                                >
                                  Select request type
                                </option>
                                <option
                                  value="maintenance"
                                >
                                  Maintenance
                                </option>
                                <option
                                  value="repair"
                                >
                                  Repair
                                </option>
                              </select>
                              <br />
                              <label
                                for="item"
                              >
                                Item:
                              </label>
                              <input
                                class=""
                                id="item"
                                name="item"
                                required=""
                                type="text"
                                value=""
                              />
                              <br />
                              <label
                                for="model"
                              >
                                Model:
                              </label>
                              <input
                                class=""
                                id="model"
                                name="model"
                                required=""
                                type="text"
                                value=""
                              />
                              <br />
                              <label>
                                <span>
                                  Description:
                                </span>
                              </label>
                              <textarea
                                cols="40"
                                id="detail"
                                name="detail"
                                required=""
                                type="text"
                              />
                              <label />
                              <input
                                class="white auth-submit-btn"
                                id="new-request-btn"
                                type="submit"
                                value="Submit"
                              />
                            </form>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 12,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "timeoutHandle": -1,
                        },
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": null,
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": Object {
                            "callback": null,
                            "expirationTime": 1,
                            "next": null,
                            "nextEffect": null,
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <RequestForm
                                      store={
                                        Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        }
                                      }
                                    />,
                                  }
                                }
                              />,
                            },
                            "tag": 0,
                          },
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": Object {
                            "callback": null,
                            "expirationTime": 1,
                            "next": null,
                            "nextEffect": null,
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <RequestForm
                                      store={
                                        Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        }
                                      }
                                    />,
                                  }
                                }
                              />,
                            },
                            "tag": 0,
                          },
                        },
                      },
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "effectTag": 32,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": null,
                      "memoizedState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <RequestForm
                                store={
                                  Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  }
                                }
                              />,
                            }
                          }
                        />,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <form
                            class="form request-form"
                            id="new-request-form"
                          >
                            <span
                              class="close-btn grey right"
                              id="sign-up-form-close-btn"
                            >
                              x
                            </span>
                            <label
                              for="id"
                            />
                            <input
                              class=""
                              id=""
                              name="id"
                              type="hidden"
                              value=""
                            />
                            <label
                              class="left orange center"
                              id="title"
                            >
                              Create a new request
                            </label>
                            <select
                              class="transparent-selector"
                              id="type"
                              name="type"
                              required=""
                            >
                              <option
                                disabled=""
                                value=""
                              >
                                Select request type
                              </option>
                              <option
                                value="maintenance"
                              >
                                Maintenance
                              </option>
                              <option
                                value="repair"
                              >
                                Repair
                              </option>
                            </select>
                            <br />
                            <label
                              for="item"
                            >
                              Item:
                            </label>
                            <input
                              class=""
                              id="item"
                              name="item"
                              required=""
                              type="text"
                              value=""
                            />
                            <br />
                            <label
                              for="model"
                            >
                              Model:
                            </label>
                            <input
                              class=""
                              id="model"
                              name="model"
                              required=""
                              type="text"
                              value=""
                            />
                            <br />
                            <label>
                              <span>
                                Description:
                              </span>
                            </label>
                            <textarea
                              cols="40"
                              id="detail"
                              name="detail"
                              required=""
                              type="text"
                            />
                            <label />
                            <input
                              class="white auth-submit-btn"
                              id="new-request-btn"
                              type="submit"
                              value="Submit"
                            />
                          </form>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 12,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "timeoutHandle": -1,
                      },
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <RequestForm
                                  store={
                                    Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    }
                                  }
                                />,
                              }
                            }
                          />,
                        },
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": null,
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": null,
                      },
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": WrapperComponent {
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <RequestForm
                            store={
                              Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              }
                            }
                          />,
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <RequestForm
                            store={
                              Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              }
                            }
                          />,
                        },
                      },
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 2,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": BrowserRouter {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "history": Object {
                      "action": "POP",
                      "block": [Function],
                      "createHref": [Function],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    },
                    "props": Object {
                      "children": <RequestForm
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />,
                    },
                    "refs": Object {},
                    "state": null,
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Router {
                  "__reactInternalMemoizedMaskedChildContext": Object {
                    "router": undefined,
                  },
                  "__reactInternalMemoizedMergedChildContext": Object {
                    "router": Object {
                      "history": Object {
                        "action": "POP",
                        "block": [Function],
                        "createHref": [Function],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      },
                      "route": Object {
                        "location": Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                        "match": Object {
                          "isExact": true,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        },
                      },
                    },
                  },
                  "__reactInternalMemoizedUnmaskedChildContext": Object {},
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {
                    "router": undefined,
                  },
                  "props": Object {
                    "children": <RequestForm
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    />,
                    "history": Object {
                      "action": "POP",
                      "block": [Function],
                      "createHref": [Function],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "match": Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    },
                  },
                  "unlisten": [Function],
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": [Circular],
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "_reactInternalInstance": Object {},
            "context": Object {},
            "handleChange": [Function],
            "handleSubmit": [Function],
            "props": Object {
              "createRequest": undefined,
              "handleClose": undefined,
              "initialValues": undefined,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "updateRequest": undefined,
            },
            "refs": Object {},
            "state": Object {
              "detail": "",
              "id": undefined,
              "item": "",
              "model": "",
              "type": "",
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "createRequest": undefined,
            "handleClose": undefined,
            "initialValues": undefined,
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "updateRequest": undefined,
          },
          "ref": null,
          "rendered": Object {
            "instance": <form
              class="form request-form"
              id="new-request-form"
            >
              <span
                class="close-btn grey right"
                id="sign-up-form-close-btn"
              >
                x
              </span>
              <label
                for="id"
              />
              <input
                class=""
                id=""
                name="id"
                type="hidden"
                value=""
              />
              <label
                class="left orange center"
                id="title"
              >
                Create a new request
              </label>
              <select
                class="transparent-selector"
                id="type"
                name="type"
                required=""
              >
                <option
                  disabled=""
                  value=""
                >
                  Select request type
                </option>
                <option
                  value="maintenance"
                >
                  Maintenance
                </option>
                <option
                  value="repair"
                >
                  Repair
                </option>
              </select>
              <br />
              <label
                for="item"
              >
                Item:
              </label>
              <input
                class=""
                id="item"
                name="item"
                required=""
                type="text"
                value=""
              />
              <br />
              <label
                for="model"
              >
                Model:
              </label>
              <input
                class=""
                id="model"
                name="model"
                required=""
                type="text"
                value=""
              />
              <br />
              <label>
                <span>
                  Description:
                </span>
              </label>
              <textarea
                cols="40"
                id="detail"
                name="detail"
                required=""
                type="text"
              />
              <label />
              <input
                class="white auth-submit-btn"
                id="new-request-btn"
                type="submit"
                value="Submit"
              />
            </form>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="close-btn grey right"
                  id="sign-up-form-close-btn"
                >
                  x
                </span>,
                <Input
                  className=""
                  id=""
                  isRequired=""
                  name="id"
                  type="hidden"
                />,
                <label
                  className="left orange center"
                  id="title"
                >
                  Create a new request
                </label>,
                <select
                  className="transparent-selector"
                  id="type"
                  name="type"
                  onChange={[Function]}
                  required="required"
                  value=""
                >
                  <option
                    disabled={true}
                    value=""
                  >
                    Select request type
                  </option>
                  <option
                    value="maintenance"
                  >
                    Maintenance
                  </option>
                  <option
                    value="repair"
                  >
                    Repair
                  </option>
                </select>,
                <br />,
                <Input
                  className=""
                  handleChange={[Function]}
                  id="item"
                  isRequired="required"
                  label="Item:"
                  name="item"
                  type="text"
                  value=""
                />,
                <br />,
                <Input
                  className=""
                  handleChange={[Function]}
                  id="model"
                  isRequired="required"
                  label="Model:"
                  name="model"
                  type="text"
                  value=""
                />,
                <br />,
                <label>
                  <span>
                    Description:
                  </span>
                </label>,
                <textarea
                  cols="40"
                  id="detail"
                  name="detail"
                  onChange={[Function]}
                  required="required"
                  type="text"
                  value=""
                />,
                <Input
                  className="white auth-submit-btn"
                  id="new-request-btn"
                  isRequired=""
                  type="submit"
                  value="Submit"
                />,
              ],
              "className": "form request-form",
              "id": "new-request-form",
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <span
                  class="close-btn grey right"
                  id="sign-up-form-close-btn"
                >
                  x
                </span>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "x",
                  "className": "close-btn grey right",
                  "id": "sign-up-form-close-btn",
                  "onClick": undefined,
                },
                "ref": null,
                "rendered": Array [
                  "x",
                ],
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "",
                  "handleChange": undefined,
                  "handleClick": undefined,
                  "id": "",
                  "isRequired": "",
                  "label": undefined,
                  "name": "id",
                  "type": "hidden",
                  "value": undefined,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <label
                      for="id"
                    />,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": undefined,
                      "htmlFor": "id",
                    },
                    "ref": null,
                    "rendered": Array [
                      undefined,
                    ],
                    "type": "label",
                  },
                  Object {
                    "instance": <input
                      class=""
                      id=""
                      name="id"
                      type="hidden"
                      value=""
                    />,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "",
                      "id": "",
                      "name": "id",
                      "onChange": undefined,
                      "onClick": undefined,
                      "required": "",
                      "type": "hidden",
                      "value": undefined,
                    },
                    "ref": null,
                    "rendered": Array [
                      undefined,
                    ],
                    "type": "input",
                  },
                ],
                "type": [Function],
              },
              Object {
                "instance": <label
                  class="left orange center"
                  id="title"
                >
                  Create a new request
                </label>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Create a new request",
                  "className": "left orange center",
                  "id": "title",
                },
                "ref": null,
                "rendered": Array [
                  "Create a new request",
                ],
                "type": "label",
              },
              Object {
                "instance": <select
                  class="transparent-selector"
                  id="type"
                  name="type"
                  required=""
                >
                  <option
                    disabled=""
                    value=""
                  >
                    Select request type
                  </option>
                  <option
                    value="maintenance"
                  >
                    Maintenance
                  </option>
                  <option
                    value="repair"
                  >
                    Repair
                  </option>
                </select>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <option
                      disabled={true}
                      value=""
                    >
                      Select request type
                    </option>,
                    <option
                      value="maintenance"
                    >
                      Maintenance
                    </option>,
                    <option
                      value="repair"
                    >
                      Repair
                    </option>,
                  ],
                  "className": "transparent-selector",
                  "id": "type",
                  "name": "type",
                  "onChange": [Function],
                  "required": "required",
                  "value": "",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <option
                      disabled=""
                      value=""
                    >
                      Select request type
                    </option>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Select request type",
                      "disabled": true,
                      "value": "",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Select request type",
                    ],
                    "type": "option",
                  },
                  Object {
                    "instance": <option
                      value="maintenance"
                    >
                      Maintenance
                    </option>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Maintenance",
                      "value": "maintenance",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Maintenance",
                    ],
                    "type": "option",
                  },
                  Object {
                    "instance": <option
                      value="repair"
                    >
                      Repair
                    </option>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Repair",
                      "value": "repair",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Repair",
                    ],
                    "type": "option",
                  },
                ],
                "type": "select",
              },
              Object {
                "instance": <br />,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": Array [
                  undefined,
                ],
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "",
                  "handleChange": [Function],
                  "handleClick": undefined,
                  "id": "item",
                  "isRequired": "required",
                  "label": "Item:",
                  "name": "item",
                  "type": "text",
                  "value": "",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <label
                      for="item"
                    >
                      Item:
                    </label>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Item:",
                      "htmlFor": "item",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Item:",
                    ],
                    "type": "label",
                  },
                  Object {
                    "instance": <input
                      class=""
                      id="item"
                      name="item"
                      required=""
                      type="text"
                      value=""
                    />,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "",
                      "id": "item",
                      "name": "item",
                      "onChange": [Function],
                      "onClick": undefined,
                      "required": "required",
                      "type": "text",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": Array [
                      undefined,
                    ],
                    "type": "input",
                  },
                ],
                "type": [Function],
              },
              Object {
                "instance": <br />,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": Array [
                  undefined,
                ],
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "",
                  "handleChange": [Function],
                  "handleClick": undefined,
                  "id": "model",
                  "isRequired": "required",
                  "label": "Model:",
                  "name": "model",
                  "type": "text",
                  "value": "",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <label
                      for="model"
                    >
                      Model:
                    </label>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Model:",
                      "htmlFor": "model",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Model:",
                    ],
                    "type": "label",
                  },
                  Object {
                    "instance": <input
                      class=""
                      id="model"
                      name="model"
                      required=""
                      type="text"
                      value=""
                    />,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "",
                      "id": "model",
                      "name": "model",
                      "onChange": [Function],
                      "onClick": undefined,
                      "required": "required",
                      "type": "text",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": Array [
                      undefined,
                    ],
                    "type": "input",
                  },
                ],
                "type": [Function],
              },
              Object {
                "instance": <br />,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": Array [
                  undefined,
                ],
                "type": "br",
              },
              Object {
                "instance": <label>
                  <span>
                    Description:
                  </span>
                </label>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <span>
                    Description:
                  </span>,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <span>
                      Description:
                    </span>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Description:",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Description:",
                    ],
                    "type": "span",
                  },
                ],
                "type": "label",
              },
              Object {
                "instance": <textarea
                  cols="40"
                  id="detail"
                  name="detail"
                  required=""
                  type="text"
                />,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "cols": "40",
                  "id": "detail",
                  "name": "detail",
                  "onChange": [Function],
                  "required": "required",
                  "type": "text",
                  "value": "",
                },
                "ref": null,
                "rendered": Array [
                  undefined,
                ],
                "type": "textarea",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "white auth-submit-btn",
                  "handleChange": undefined,
                  "handleClick": undefined,
                  "id": "new-request-btn",
                  "isRequired": "",
                  "label": undefined,
                  "name": undefined,
                  "type": "submit",
                  "value": "Submit",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <label />,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": undefined,
                      "htmlFor": undefined,
                    },
                    "ref": null,
                    "rendered": Array [
                      undefined,
                    ],
                    "type": "label",
                  },
                  Object {
                    "instance": <input
                      class="white auth-submit-btn"
                      id="new-request-btn"
                      type="submit"
                      value="Submit"
                    />,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "white auth-submit-btn",
                      "id": "new-request-btn",
                      "name": undefined,
                      "onChange": undefined,
                      "onClick": undefined,
                      "required": "",
                      "type": "submit",
                      "value": "Submit",
                    },
                    "ref": null,
                    "rendered": Array [
                      undefined,
                    ],
                    "type": "input",
                  },
                ],
                "type": [Function],
              },
            ],
            "type": "form",
          },
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`Request Form when the form is submitted, the event is cancelled 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RequestForm
    getAllRequests={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    initialValues={
      Object {
        "detail": "it is stuck in a boot loop",
        "id": 1,
        "item": "Macbook Pro",
        "model": "2015",
        "type": "repair",
      }
    }
    updateRequest={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "detail": "it is stuck in a boot loop",
              "item": "Macbook Pro",
              "model": "2015",
              "type": "repair",
            },
            1,
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <form
        className="form request-form"
        id="new-request-form"
        onSubmit={[Function]}
      >
        <span
          className="close-btn grey right"
          id="sign-up-form-close-btn"
        >
          x
        </span>
        <Input
          className=""
          id=""
          isRequired=""
          name="id"
          type="hidden"
          value={1}
        />
        <label
          className="left orange center"
          id="title"
        >
          Update request
        </label>
        <select
          className="transparent-selector"
          id="type"
          name="type"
          onChange={[Function]}
          required="required"
          value="repair"
        >
          <option
            disabled={true}
            value=""
          >
            Select request type
          </option>
          <option
            value="maintenance"
          >
            Maintenance
          </option>
          <option
            value="repair"
          >
            Repair
          </option>
        </select>
        <br />
        <Input
          className=""
          handleChange={[Function]}
          id="item"
          isRequired="required"
          label="Item:"
          name="item"
          type="text"
          value="Macbook Pro"
        />
        <br />
        <Input
          className=""
          handleChange={[Function]}
          id="model"
          isRequired="required"
          label="Model:"
          name="model"
          type="text"
          value="2015"
        />
        <br />
        <label>
          <span>
            Description:
          </span>
        </label>
        <textarea
          cols="40"
          id="detail"
          name="detail"
          onChange={[Function]}
          required="required"
          type="text"
          value="it is stuck in a boot loop"
        />
        <Input
          className="white auth-submit-btn"
          id="new-request-btn"
          isRequired=""
          type="submit"
          value="Submit"
        />
      </form>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <span
            className="close-btn grey right"
            id="sign-up-form-close-btn"
          >
            x
          </span>,
          <Input
            className=""
            id=""
            isRequired=""
            name="id"
            type="hidden"
            value={1}
          />,
          <label
            className="left orange center"
            id="title"
          >
            Update request
          </label>,
          <select
            className="transparent-selector"
            id="type"
            name="type"
            onChange={[Function]}
            required="required"
            value="repair"
          >
            <option
              disabled={true}
              value=""
            >
              Select request type
            </option>
            <option
              value="maintenance"
            >
              Maintenance
            </option>
            <option
              value="repair"
            >
              Repair
            </option>
          </select>,
          <br />,
          <Input
            className=""
            handleChange={[Function]}
            id="item"
            isRequired="required"
            label="Item:"
            name="item"
            type="text"
            value="Macbook Pro"
          />,
          <br />,
          <Input
            className=""
            handleChange={[Function]}
            id="model"
            isRequired="required"
            label="Model:"
            name="model"
            type="text"
            value="2015"
          />,
          <br />,
          <label>
            <span>
              Description:
            </span>
          </label>,
          <textarea
            cols="40"
            id="detail"
            name="detail"
            onChange={[Function]}
            required="required"
            type="text"
            value="it is stuck in a boot loop"
          />,
          <Input
            className="white auth-submit-btn"
            id="new-request-btn"
            isRequired=""
            type="submit"
            value="Submit"
          />,
        ],
        "className": "form request-form",
        "id": "new-request-form",
        "onSubmit": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "x",
            "className": "close-btn grey right",
            "id": "sign-up-form-close-btn",
            "onClick": undefined,
          },
          "ref": null,
          "rendered": "x",
          "type": "span",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "",
            "handleChange": undefined,
            "handleClick": undefined,
            "id": "",
            "isRequired": "",
            "label": undefined,
            "name": "id",
            "type": "hidden",
            "value": 1,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Update request",
            "className": "left orange center",
            "id": "title",
          },
          "ref": null,
          "rendered": "Update request",
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <option
                disabled={true}
                value=""
              >
                Select request type
              </option>,
              <option
                value="maintenance"
              >
                Maintenance
              </option>,
              <option
                value="repair"
              >
                Repair
              </option>,
            ],
            "className": "transparent-selector",
            "id": "type",
            "name": "type",
            "onChange": [Function],
            "required": "required",
            "value": "repair",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Select request type",
                "disabled": true,
                "value": "",
              },
              "ref": null,
              "rendered": "Select request type",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Maintenance",
                "value": "maintenance",
              },
              "ref": null,
              "rendered": "Maintenance",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Repair",
                "value": "repair",
              },
              "ref": null,
              "rendered": "Repair",
              "type": "option",
            },
          ],
          "type": "select",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "br",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "",
            "handleChange": [Function],
            "handleClick": undefined,
            "id": "item",
            "isRequired": "required",
            "label": "Item:",
            "name": "item",
            "type": "text",
            "value": "Macbook Pro",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "br",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "",
            "handleChange": [Function],
            "handleClick": undefined,
            "id": "model",
            "isRequired": "required",
            "label": "Model:",
            "name": "model",
            "type": "text",
            "value": "2015",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "br",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <span>
              Description:
            </span>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Description:",
            },
            "ref": null,
            "rendered": "Description:",
            "type": "span",
          },
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "cols": "40",
            "id": "detail",
            "name": "detail",
            "onChange": [Function],
            "required": "required",
            "type": "text",
            "value": "it is stuck in a boot loop",
          },
          "ref": null,
          "rendered": null,
          "type": "textarea",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "white auth-submit-btn",
            "handleChange": undefined,
            "handleClick": undefined,
            "id": "new-request-btn",
            "isRequired": "",
            "label": undefined,
            "name": undefined,
            "type": "submit",
            "value": "Submit",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "form",
    },
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <form
          className="form request-form"
          id="new-request-form"
          onSubmit={[Function]}
        >
          <span
            className="close-btn grey right"
            id="sign-up-form-close-btn"
          >
            x
          </span>
          <Input
            className=""
            id=""
            isRequired=""
            name="id"
            type="hidden"
            value={1}
          />
          <label
            className="left orange center"
            id="title"
          >
            Update request
          </label>
          <select
            className="transparent-selector"
            id="type"
            name="type"
            onChange={[Function]}
            required="required"
            value="repair"
          >
            <option
              disabled={true}
              value=""
            >
              Select request type
            </option>
            <option
              value="maintenance"
            >
              Maintenance
            </option>
            <option
              value="repair"
            >
              Repair
            </option>
          </select>
          <br />
          <Input
            className=""
            handleChange={[Function]}
            id="item"
            isRequired="required"
            label="Item:"
            name="item"
            type="text"
            value="Macbook Pro"
          />
          <br />
          <Input
            className=""
            handleChange={[Function]}
            id="model"
            isRequired="required"
            label="Model:"
            name="model"
            type="text"
            value="2015"
          />
          <br />
          <label>
            <span>
              Description:
            </span>
          </label>
          <textarea
            cols="40"
            id="detail"
            name="detail"
            onChange={[Function]}
            required="required"
            type="text"
            value="it is stuck in a boot loop"
          />
          <Input
            className="white auth-submit-btn"
            id="new-request-btn"
            isRequired=""
            type="submit"
            value="Submit"
          />
        </form>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <span
              className="close-btn grey right"
              id="sign-up-form-close-btn"
            >
              x
            </span>,
            <Input
              className=""
              id=""
              isRequired=""
              name="id"
              type="hidden"
              value={1}
            />,
            <label
              className="left orange center"
              id="title"
            >
              Update request
            </label>,
            <select
              className="transparent-selector"
              id="type"
              name="type"
              onChange={[Function]}
              required="required"
              value="repair"
            >
              <option
                disabled={true}
                value=""
              >
                Select request type
              </option>
              <option
                value="maintenance"
              >
                Maintenance
              </option>
              <option
                value="repair"
              >
                Repair
              </option>
            </select>,
            <br />,
            <Input
              className=""
              handleChange={[Function]}
              id="item"
              isRequired="required"
              label="Item:"
              name="item"
              type="text"
              value="Macbook Pro"
            />,
            <br />,
            <Input
              className=""
              handleChange={[Function]}
              id="model"
              isRequired="required"
              label="Model:"
              name="model"
              type="text"
              value="2015"
            />,
            <br />,
            <label>
              <span>
                Description:
              </span>
            </label>,
            <textarea
              cols="40"
              id="detail"
              name="detail"
              onChange={[Function]}
              required="required"
              type="text"
              value="it is stuck in a boot loop"
            />,
            <Input
              className="white auth-submit-btn"
              id="new-request-btn"
              isRequired=""
              type="submit"
              value="Submit"
            />,
          ],
          "className": "form request-form",
          "id": "new-request-form",
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "x",
              "className": "close-btn grey right",
              "id": "sign-up-form-close-btn",
              "onClick": undefined,
            },
            "ref": null,
            "rendered": "x",
            "type": "span",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "",
              "handleChange": undefined,
              "handleClick": undefined,
              "id": "",
              "isRequired": "",
              "label": undefined,
              "name": "id",
              "type": "hidden",
              "value": 1,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Update request",
              "className": "left orange center",
              "id": "title",
            },
            "ref": null,
            "rendered": "Update request",
            "type": "label",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <option
                  disabled={true}
                  value=""
                >
                  Select request type
                </option>,
                <option
                  value="maintenance"
                >
                  Maintenance
                </option>,
                <option
                  value="repair"
                >
                  Repair
                </option>,
              ],
              "className": "transparent-selector",
              "id": "type",
              "name": "type",
              "onChange": [Function],
              "required": "required",
              "value": "repair",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Select request type",
                  "disabled": true,
                  "value": "",
                },
                "ref": null,
                "rendered": "Select request type",
                "type": "option",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Maintenance",
                  "value": "maintenance",
                },
                "ref": null,
                "rendered": "Maintenance",
                "type": "option",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Repair",
                  "value": "repair",
                },
                "ref": null,
                "rendered": "Repair",
                "type": "option",
              },
            ],
            "type": "select",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "",
              "handleChange": [Function],
              "handleClick": undefined,
              "id": "item",
              "isRequired": "required",
              "label": "Item:",
              "name": "item",
              "type": "text",
              "value": "Macbook Pro",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "",
              "handleChange": [Function],
              "handleClick": undefined,
              "id": "model",
              "isRequired": "required",
              "label": "Model:",
              "name": "model",
              "type": "text",
              "value": "2015",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <span>
                Description:
              </span>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Description:",
              },
              "ref": null,
              "rendered": "Description:",
              "type": "span",
            },
            "type": "label",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "cols": "40",
              "id": "detail",
              "name": "detail",
              "onChange": [Function],
              "required": "required",
              "type": "text",
              "value": "it is stuck in a boot loop",
            },
            "ref": null,
            "rendered": null,
            "type": "textarea",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "white auth-submit-btn",
              "handleChange": undefined,
              "handleClick": undefined,
              "id": "new-request-btn",
              "isRequired": "",
              "label": undefined,
              "name": undefined,
              "type": "submit",
              "value": "Submit",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "form",
      },
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
